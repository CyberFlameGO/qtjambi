<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 1992-2009 Nokia. All rights reserved.
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.opengl" module="qtjambi.opengl" default-superclass="io.qt.QtObject">
  <primitive-type name="GLuint" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="GLshort" java-name="short" preferred-conversion="no" jni-name="jshort"/>
  <primitive-type name="GLushort" java-name="short" preferred-conversion="no" jni-name="jshort"/>
  <primitive-type name="GLint64" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="GLuint64" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="GLintptr" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="GLsizeiptr" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="qopengl_GLsizeiptr" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="qopengl_GLintptr" java-name="long" preferred-conversion="no" jni-name="jlong"/>
  <primitive-type name="GLint" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="GLchar" java-name="char" preferred-conversion="no" jni-name="jchar"/>
  <primitive-type name="GLenum" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="GLbitfield" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="GLsizei" java-name="int" preferred-conversion="no" jni-name="jint"/>
  <primitive-type name="GLboolean" java-name="boolean" preferred-conversion="no" jni-name="jboolean"/>
  <primitive-type name="GLdouble" java-name="double" preferred-conversion="no" jni-name="jdouble"/>
  <primitive-type name="GLfloat" java-name="float" preferred-conversion="no" jni-name="jfloat"/>
  <primitive-type name="GLubyte" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>
  <primitive-type name="GLbyte" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>
  <primitive-type name="GLvoid" java-name="void" preferred-conversion="no" jni-name="void"/>
  <primitive-type name="GLclampf" java-name="float" preferred-conversion="no" jni-name="jfloat"/>

    <template-type name="QOpenGLESFunctions">
        <inject-code class="native" position="beginning">
#ifndef GL_MAX_LABEL_LENGTH
#define GL_MAX_LABEL_LENGTH 0x82E8
#endif
        </inject-code>
        <modify-function signature="glDeleteBuffers(GLsizei,const GLuint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteFramebuffers(GLsizei,const GLuint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteRenderbuffers(GLsizei,const GLuint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteTextures(GLsizei,const GLuint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenBuffers(GLsizei,GLuint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenFramebuffers(GLsizei,GLuint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenRenderbuffers(GLsizei,GLuint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenTextures(GLsizei,GLuint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetBooleanv(GLenum,GLboolean*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetBufferParameteriv(GLenum,GLenum,GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetFloatv(GLenum,GLfloat*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetFramebufferAttachmentParameteriv(GLenum,GLenum,GLenum,GLint*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetIntegerv(GLenum,GLint*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetUniformfv(GLuint, GLint, GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetUniformiv(GLuint, GLint, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetRenderbufferParameteriv(GLenum, GLenum, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexParameterfv(GLenum, GLenum, GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexParameteriv(GLenum, GLenum, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glReadPixels(GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,GLvoid*)">
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexImage2D(GLenum,GLint,GLint,GLsizei,GLsizei,GLint,GLenum,GLenum,const GLvoid*)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexParameterfv(GLenum,GLenum,const GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexParameteriv(GLenum,GLenum,const GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLenum,const GLvoid*)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawElements(GLenum, GLsizei, GLenum, const GLvoid*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetAttachedShaders(GLuint, GLsizei, GLsizei*, GLuint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramiv(GLuint, GLenum, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetShaderPrecisionFormat(GLenum, GLenum, GLint*, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetShaderiv(GLuint, GLenum, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetUniformfv(GLuint, GLint, GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetUniformiv(GLuint, GLint, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetVertexAttribfv(GLuint, GLenum, GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetVertexAttribiv(GLuint, GLenum, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform1fv(GLint, GLsizei, const GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform1iv(GLint, GLsizei, const GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform2fv(GLint, GLsizei, const GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform2iv(GLint, GLsizei, const GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform3fv(GLint, GLsizei, const GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform3iv(GLint, GLsizei, const GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform4fv(GLint, GLsizei, const GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform4iv(GLint, GLsizei, const GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix2fv(GLint, GLsizei, GLboolean, const GLfloat*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix3fv(GLint, GLsizei, GLboolean, const GLfloat*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix4fv(GLint, GLsizei, GLboolean, const GLfloat*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttrib1fv(GLuint, const GLfloat*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttrib2fv(GLuint, const GLfloat*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttrib3fv(GLuint, const GLfloat*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttrib4fv(GLuint, const GLfloat*)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>

    <template-type name="QOpenGLFunctions_1_0_template_until_4_5">
        <modify-function signature="glGetBooleanv(GLenum, GLboolean *)">
            <modify-argument index="2">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetDoublev(GLenum, GLdouble *)">
            <modify-argument index="2">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetFloatv(GLenum, GLfloat *)">
            <modify-argument index="2">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetIntegerv(GLenum, GLint *)">
            <modify-argument index="2">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexLevelParameterfv(GLenum, GLint, GLenum, GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexLevelParameteriv(GLenum, GLint, GLenum, GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexParameterfv(GLenum, GLenum, GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexParameteriv(GLenum, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetString(GLenum)">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexParameterfv(GLenum,GLenum,const GLfloat*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexParameteriv(GLenum,GLenum,const GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_1_0_template_until_4_4">
        <modify-function signature="glReadPixels(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLvoid *)">
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexImage(GLenum, GLint, GLenum, GLenum, GLvoid *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexImage1D(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const GLvoid *)">
            <modify-argument index="8">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexImage2D(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const GLvoid *)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_1_0_template_since_4_4">
        <modify-function signature="glReadPixels(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, void *)">
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexImage(GLenum, GLint, GLenum, GLenum, void *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexImage1D(GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, const void *)">
            <modify-argument index="8">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexImage2D(GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_1_0_template_until_3_1A">
                <modify-function signature="glPixelMapfv(GLenum, GLint, const GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glPixelMapuiv(GLenum, GLint, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glPixelMapusv(GLenum, GLint, const GLushort *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCallLists(GLsizei, GLenum, const GLvoid *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawPixels(GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_1_0_template_until_3_1B">
                <modify-function signature="glPixelMapfv(GLenum, GLsizei, const GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glPixelMapuiv(GLenum, GLsizei, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glPixelMapusv(GLenum, GLsizei, const GLushort *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCallLists(GLsizei, GLenum, const void *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawPixels(GLsizei, GLsizei, GLenum, GLenum, const void *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>

    <template-type name="QOpenGLFunctions_1_0_template_until_3_1">
        <modify-function signature="glColor4ub(GLubyte,GLubyte,GLubyte,GLubyte)" remove="all"/>
        <modify-function signature="glColor3ub(GLubyte,GLubyte,GLubyte)" remove="all"/>
        <modify-function signature="glColor4ui(GLuint,GLuint,GLuint,GLuint)" remove="all"/>
        <modify-function signature="glColor3ui(GLuint,GLuint,GLuint)" remove="all"/>
        <modify-function signature="glColor4us(GLushort,GLushort,GLushort,GLushort)" remove="all"/>
        <modify-function signature="glColor3us(GLushort,GLushort,GLushort)" remove="all"/>
        <modify-function signature="glColor4ubv(const GLubyte *)" remove="all"/>
        <modify-function signature="glColor3ubv(const GLubyte *)" remove="all"/>
        <modify-function signature="glColor4uiv(const GLuint *)" remove="all"/>
        <modify-function signature="glColor3uiv(const GLuint *)" remove="all"/>
        <modify-function signature="glColor4usv(const GLushort *)" remove="all"/>
        <modify-function signature="glColor3usv(const GLushort *)" remove="all"/>
        <modify-function signature="glEdgeFlagv(const GLboolean *)" remove="all"/>
        <modify-function signature="glGetTexGendv(GLenum, GLenum, GLdouble *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexGenfv(GLenum, GLenum, GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexGeniv(GLenum, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetClipPlane(GLenum, GLdouble *)">
            <modify-argument index="2">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetMaterialfv(GLenum, GLenum, GLfloat *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetMaterialiv(GLenum, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glClipPlane(GLenum, const GLdouble *)">
            <modify-argument index="2">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetPixelMapfv(GLenum, GLfloat *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glPolygonStipple(const GLubyte *)">
            <modify-argument index="1">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRectdv(const GLdouble *,const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
            <modify-argument index="2">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRectfv(const GLfloat *,const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
            <modify-argument index="2">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRectiv(const GLint *,const GLint *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
            <modify-argument index="2">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRectsv(const GLshort *,const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
            <modify-argument index="2">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glBitmap(GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, const GLubyte *)">
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glFogiv(GLenum, const GLint *)">
            <modify-argument index="2">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glFogfv(GLenum, const GLfloat *)">
            <modify-argument index="2">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMultMatrixd(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="16"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMultMatrixf(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="16"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glNormal3bv(const GLbyte *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glNormal3sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glNormal3iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glNormal3fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glNormal3dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor4bv(const GLbyte *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor3bv(const GLbyte *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor4sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor3sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor4iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor3iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor4fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor3fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor4dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glColor3dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos4sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos3sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos2sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos4iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos3iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos2iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos4fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos3fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos2fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos4dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos3dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glRasterPos2dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glLightModeliv(GLenum, const GLint *)">
            <modify-argument index="2">
                <array-type min-length="1"/>
           </modify-argument>
        </modify-function>
        <modify-function signature="glLightModelfv(GLenum, const GLfloat *)">
            <modify-argument index="2">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetPolygonStipple(GLubyte *)">
            <modify-argument index="1">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetLightfv(GLenum, GLenum, GLfloat *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetLightiv(GLenum, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glLightiv(GLenum, GLenum, const GLint *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glLightfv(GLenum, GLenum, const GLfloat *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glEvalCoord1fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glEvalCoord1dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glEvalCoord2fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glEvalCoord2dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetMapdv(GLenum, GLenum, GLdouble *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetMapfv(GLenum, GLenum, GLfloat *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetMapiv(GLenum, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetPixelMapuiv(GLenum, GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetPixelMapusv(GLenum, GLushort *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glSelectBuffer(GLsizei,GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes" length-parameter="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMaterialiv(GLenum, GLenum, const GLint *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMaterialfv(GLenum, GLenum, const GLfloat *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex4sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex3sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex2sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex4iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex3iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex2iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex4fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex3fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex2fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex4dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex3dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertex2dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord4sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord3sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord2sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord1sv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord4iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord3iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord2iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord1iv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord4fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord3fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord2fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord1fv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord4dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="4"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord3dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord2dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoord1dv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexEnviv(GLenum, GLenum, const GLint *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexEnvfv(GLenum, GLenum, const GLfloat *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexEnvfv(GLenum, GLenum, GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexEnviv(GLenum, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexGendv(GLenum, GLenum, const GLdouble *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexGenfv(GLenum, GLenum, const GLfloat *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexGeniv(GLenum, GLenum, const GLint *)">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glFeedbackBuffer(GLsizei, GLenum, GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes" length-parameter="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glLoadMatrixd(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="16"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glLoadMatrixf(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="16"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMap1d(GLenum, GLdouble, GLdouble, GLint, GLint, const GLdouble *)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMap1f(GLenum, GLfloat, GLfloat, GLint, GLint, const GLfloat *)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMap2d(GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, const GLdouble *)">
            <modify-argument index="10">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMap2f(GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, const GLfloat *)">
            <modify-argument index="10">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glIndexdv(const GLdouble *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glIndexfv(const GLfloat *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glIndexiv(const GLint *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glIndexsv(const GLshort *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_1_1_deprecated">
        <modify-function signature="glAreTexturesResident(GLsizei, const GLuint *, GLboolean *)">
            <modify-argument index="2">
                <array-type as-buffer="yes" length-parameter="1"/>
            </modify-argument>
            <modify-argument index="3">
                <array-type length-parameter="1"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glPrioritizeTextures(GLsizei, const GLuint *, const GLfloat *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_1_1_deprecatedA">
        <modify-function signature="glColorPointer(GLint, GLenum, GLsizei, const GLvoid *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexPointer(GLint, GLenum, GLsizei, const GLvoid *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoordPointer(GLint, GLenum, GLsizei, const GLvoid *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glInterleavedArrays(GLenum, GLsizei, const GLvoid *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glNormalPointer(GLenum, GLsizei, const GLvoid *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glEdgeFlagPointer(GLsizei, const GLvoid *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glIndexPointer(GLenum, GLsizei, const GLvoid *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_1_1_deprecatedB">
        <modify-function signature="glColorPointer(GLint, GLenum, GLsizei, const void *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexPointer(GLint, GLenum, GLsizei, const void *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexCoordPointer(GLint, GLenum, GLsizei, const void *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glInterleavedArrays(GLenum, GLsizei, const void *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glNormalPointer(GLenum, GLsizei, const void *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glEdgeFlagPointer(GLsizei, const void *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glIndexPointer(GLenum, GLsizei, const void *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_1_1">
        <modify-function signature="glGenTextures(GLsizei, GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteTextures(GLsizei, const GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>

    <template-type name="QOpenGLFunctions_1_1A">
        <modify-function signature="glGetPointerv(GLenum, GLvoid**)">
            <modify-argument index="2">
                <no-null-pointer/>
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                    if(%out.size()==0){
                        JavaException::raiseIllegalArgumentException(%env, "Array length is 0." QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawElements(GLenum, GLsizei, GLenum, const GLvoid *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexSubImage2D(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const GLvoid *)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexSubImage1D(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const GLvoid *)">
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_1_1B">
        <modify-function signature="glDrawElements(GLenum, GLsizei, GLenum, const void *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexSubImage2D(GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, const void *)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexSubImage1D(GLenum, GLint, GLint, GLsizei, GLenum, GLenum, const void *)">
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_1_1_until_4_4">
        <modify-function signature="glIndexubv(const GLubyte *)">
            <modify-argument index="1">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
    </template-type>

    <template-type name="QOpenGLFunctions_1_1B_until_4_4">
        <modify-function signature="glGetPointerv(GLenum, void**)">
            <modify-argument index="2">
                <no-null-pointer/>
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                    if(%out.size()==0){
                        JavaException::raiseIllegalArgumentException(%env, "Array length is 0." QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>

    <template-type name="QOpenGLFunctions_1_4A">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="glMultiDrawElements(GLenum, const GLsizei *, GLenum, const GLvoid *const*, GLsizei)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <no-null-pointer/>
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;const void*> %out(%env, jobjectArray(%in),
                                                [&amp;%scope](const void* &amp; pointer,JNIEnv *env, jobject o){
                                                    JBufferData* bufferData = new JBufferData(env, o);
                                                    %scope.addDeletion(bufferData);
                                                    pointer = bufferData->data();
                                                },
                                                [](JNIEnv * env, const void* const&amp; ptr) -> jobject {
                                                    jobject result = env->NewDirectByteBuffer(const_cast&lt;void*>(ptr), INT_MAX);
                                                    return Java::Runtime::ByteBuffer::asReadOnlyBuffer(env, result);
                                                }
                                            );
                    if(%out.size()==0){
                        JavaException::raiseIllegalArgumentException(%env, "Array length is 0." QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_1_4B">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="glMultiDrawElements(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <no-null-pointer/>
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;const void*> %out(%env, jobjectArray(%in),
                                                [&amp;%scope](const void* &amp; pointer,JNIEnv *env, jobject o){
                                                    JBufferData* bufferData = new JBufferData(env, o);
                                                    %scope.addDeletion(bufferData);
                                                    pointer = bufferData->data();
                                                },
                                                [](JNIEnv * env, const void* const&amp; ptr) -> jobject {
                                                    jobject result = env->NewDirectByteBuffer(const_cast&lt;void*>(ptr), INT_MAX);
                                                    return Java::Runtime::ByteBuffer::asReadOnlyBuffer(env, result);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>

    <template-type name="QOpenGLFunctions_1_5">
        <modify-function signature="glMapBuffer(GLenum, GLenum)">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                %out = %in ? %env->NewDirectByteBuffer(%in, INT_MAX) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>

    <template-type name="QOpenGLFunctions_2_0">
        <modify-function signature="glShaderSource(GLuint, GLsizei, const GLchar *const*, const GLint*)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const char** %out = nullptr;
                    QScopedArrayPointer&lt;const char*> %outPtr(%out = new const char*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = %env->GetArrayLength(jarray(%3));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_1_5A">
        <modify-function signature="glGetBufferPointerv(GLenum, GLenum, GLvoid **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                    if(%out.size()==0){
                        JavaException::raiseIllegalArgumentException(%env, "Array length is 0." QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_1_5B">
        <modify-function signature="glGetBufferPointerv(GLenum, GLenum, void **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                    if(%out.size()==0){
                        JavaException::raiseIllegalArgumentException(%env, "Array length is 0." QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_2_0A">
        <import template="QOpenGLFunctions_2_0"/>
        <import template="QOpenGLFunctions_1_4A"/>
        <import template="QOpenGLFunctions_1_5"/>
        <import template="QOpenGLFunctions_1_5A"/>
        <modify-function signature="glGetVertexAttribPointerv(GLuint, GLenum, GLvoid **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_2_0B">
        <modify-function signature="glGetBufferPointerv(GLenum, GLenum, void **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                    if(%out.size()==0){
                        JavaException::raiseIllegalArgumentException(%env, "Array length is 0." QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>

    <template-type name="QOpenGLFunctions_2_0B">
        <import template="QOpenGLFunctions_2_0"/>
        <import template="QOpenGLFunctions_1_4B"/>
        <import template="QOpenGLFunctions_1_5"/>
        <import template="QOpenGLFunctions_1_5B"/>
        <modify-function signature="glGetVertexAttribPointerv(GLuint, GLenum, void **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_3_0">
        <inject-code class="native" position="beginning">
#ifndef GL_MAX_LABEL_LENGTH
#define GL_MAX_LABEL_LENGTH 0x82E8
#endif
        </inject-code>
        <modify-function signature="glTransformFeedbackVaryings(GLuint, GLsizei, const GLchar *const *, GLenum)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = %env->GetArrayLength(jarray(%3));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const GLchar** %out = nullptr;
                    QScopedArrayPointer&lt;const GLchar*> %outPtr(%out = new const GLchar*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTransformFeedbackVarying(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *)">
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="6">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="7">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %4));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (name.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'name': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glGetStringi(GLenum, GLuint)">
            <modify-argument index="return">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetBooleani_v(GLenum, GLuint, GLboolean *)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.IntBuffer"/>
                <conversion-rule class="native">
                    JBufferData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMapBufferRange(GLenum, GLintptr, GLsizeiptr, GLbitfield)">
            <modify-argument index="0">
                <array-type as-buffer="yes" length-parameter="3"/>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_3_1">
        <import template="QOpenGLFunctions_3_0"/>
        <modify-function signature="glGetUniformIndices(GLuint, GLsizei, const GLchar *const *, GLuint *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = qMin(%env->GetArrayLength(jarray(%3)), %env->GetArrayLength(jarray(%4)));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const char** %out = nullptr;
                    QScopedArrayPointer&lt;const char*> %outPtr(%out = new const char*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="int[]"/>
                <conversion-rule class="native">
                JIntArrayPointer %out(%env, %in, true);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_3_2">
        <modify-function signature="glGetSynciv(__GLsync *, GLenum, GLsizei, GLsizei *, GLint *)">
            <modify-argument index="3">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="4">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.nio.IntBuffer"/>
                <conversion-rule class="native">
                    JBufferData %out(%env, %in);
                    GLsizei %3 = GLsizei(%out.size());
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_3_2A">
        <import template="QOpenGLFunctions_3_2"/>
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="glMultiDrawElementsBaseVertex(GLenum, const GLsizei *, GLenum, const GLvoid *const*, GLsizei, const GLint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <no-null-pointer/>
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;const void*> %out(%env, jobjectArray(%in),
                                                [&amp;%scope](const void* &amp; pointer,JNIEnv *env, jobject o){
                                                    JBufferData* bufferData = new JBufferData(env, o);
                                                    %scope.addDeletion(bufferData);
                                                    pointer = bufferData->data();
                                                },
                                                [](JNIEnv * env, const void* const&amp; ptr) -> jobject {
                                                    jobject result = env->NewDirectByteBuffer(const_cast&lt;void*>(ptr), INT_MAX);
                                                    return Java::Runtime::ByteBuffer::asReadOnlyBuffer(env, result);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_3_2B">
        <import template="QOpenGLFunctions_3_2"/>
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="glMultiDrawElementsBaseVertex(GLenum, const GLsizei *, GLenum, const void *const*, GLsizei, const GLint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <no-null-pointer/>
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;const void*> %out(%env, jobjectArray(%in),
                                                [&amp;%scope](const void* &amp; pointer,JNIEnv *env, jobject o){
                                                    JBufferData* bufferData = new JBufferData(env, o);
                                                    %scope.addDeletion(bufferData);
                                                    pointer = bufferData->data();
                                                },
                                                [](JNIEnv * env, const void* const&amp; ptr) -> jobject {
                                                    jobject result = env->NewDirectByteBuffer(const_cast&lt;void*>(ptr), INT_MAX);
                                                    return Java::Runtime::ByteBuffer::asReadOnlyBuffer(env, result);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </template-type>
    <template-type name="QOpenGLFunctions_4_1">
        <import template="QOpenGLFunctions_3_1"/>
        <modify-function signature="glGetProgramPipelineInfoLog(GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %3));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (infoLog.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'infoLog': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>        
        <modify-function signature="glCreateShaderProgramv(GLenum, GLsizei, const GLchar * const *)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const char** %out = nullptr;
                    QScopedArrayPointer&lt;const char*> %outPtr(%out = new const char*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = %env->GetArrayLength(jarray(%3));
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_4_3">
        <import template="QOpenGLFunctions_4_1"/>
        <modify-function signature="glGetProgramResourceName(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="6">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %5));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (name.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'name': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
    </template-type>
   <template-type name="QOpenGLFunctions_4_4">
        <import template="QOpenGLFunctions_4_3"/>
        <modify-function signature="glDebugMessageCallback(GLDEBUGPROC, const void *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    const void * %out = nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetDebugMessageLog(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *)">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    GLuint %out = GLuint(%env->GetArrayLength(jarray(%3)));
                    %out = qMin(%out, GLuint(%env->GetArrayLength(jarray(%4))));
                    %out = qMin(%out, GLuint(%env->GetArrayLength(jarray(%5))));
                    %out = qMin(%out, GLuint(%env->GetArrayLength(jarray(%8))));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="6">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="7">
                <remove-argument/>
                <conversion-rule class="native">
                    QScopedArrayPointer&lt;GLsizei> %in(new GLsizei[__qt_%1]);
                    GLsizei* %out = %in.get();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="8">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <conversion-rule class="native">
                %out = jint(%in);
                int offset = 0;
                for(jsize i=0; i&lt;jsize(__qt_return_value); ++i){
                    jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(__qt_%8+offset, __qt_%7[i]));
                    offset += __qt_%7[i];
                    %env->SetObjectArrayElement(%8, i, result);
                }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetObjectPtrLabel(const void *, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.gui.gl.GLsync"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    const void* %out = qtjambi_to_object(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %3));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (label.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'label': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glGetObjectLabel(GLenum, GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %4));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (label.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'label': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glObjectPtrLabel(const void *, GLsizei, const GLchar *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.gui.gl.GLsync"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    const void* %out = qtjambi_to_object(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    J2CStringBuffer %out(%env, %in);
                    GLsizei %2(%out.length());
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_4_5">
        <import template="QOpenGLFunctions_4_4"/>
        <modify-function signature="glMapNamedBuffer(GLuint, GLenum)">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                %out = %env->NewDirectByteBuffer(%in, INT_MAX);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMapNamedBufferRange(GLuint,GLintptr,GLsizei,GLbitfield)">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                %out = %env->NewDirectByteBuffer(%in, INT_MAX);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetNamedBufferPointerv(GLuint, GLenum, void **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </template-type>
    
    <template-type name="QOpenGLFunctions_1_0_template_full">
        <import template="QOpenGLFunctions_1_0_template_until_3_1"/>
        <import template="QOpenGLFunctions_1_0_template_until_3_1A"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_4"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
    </template-type>
    <template-type name="QOpenGLFunctions_1_0_template_full2">
        <import template="QOpenGLFunctions_1_0_template_until_3_1"/>
        <import template="QOpenGLFunctions_1_0_template_until_3_1B"/>
        <import template="QOpenGLFunctions_1_0_template_since_4_4"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
    </template-type>
    <template-type name="QOpenGLFunctions_1_1_template_full">
        <import template="QOpenGLFunctions_1_1"/>
        <import template="QOpenGLFunctions_1_1_until_4_4"/>
        <import template="QOpenGLFunctions_1_1A"/>
        <import template="QOpenGLFunctions_1_1_deprecated"/>
        <import template="QOpenGLFunctions_1_1_deprecatedA"/>
    </template-type>
    <template-type name="QOpenGLFunctions_1_1_template_full2">
        <import template="QOpenGLFunctions_1_1"/>
        <import template="QOpenGLFunctions_1_1B"/>
        <import template="QOpenGLFunctions_1_1_until_4_4"/>
        <import template="QOpenGLFunctions_1_1B_until_4_4"/>
        <import template="QOpenGLFunctions_1_1_deprecated"/>
        <import template="QOpenGLFunctions_1_1_deprecatedB"/>
    </template-type>
    <template-type name="QOpenGLFunctions_1_1_template_until_4_5">
        <import template="QOpenGLFunctions_1_1"/>
        <import template="QOpenGLFunctions_1_1A"/>
    </template-type>
    <template-type name="QOpenGLFunctions_1_1_template_until_4_5B">
        <import template="QOpenGLFunctions_1_1"/>
        <import template="QOpenGLFunctions_1_1B"/>
    </template-type>

    <object-type name="QOpenGLContext">
      <modify-function signature="makeCurrent(QSurface *)" thread-affine="yes">
      </modify-function>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_gui-java.java" quote-after-line="class QOpenGLContext_java__" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="native">
            <import-file name="typesystem/java/typesystem_gui-java.java" quote-after-line="class QOpenGLContext_native__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    
    <value-type name="QOpenGLDebugMessage">
    </value-type>
    
    <object-type name="QOpenGLShaderProgram">
        <inject-code>
            <import-file name="typesystem/java/typesystem_gui-java.java" quote-after-line="class QOpenGLShaderProgram___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="setAttributeArray(int, const GLfloat *, int, int)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(const char *, const GLfloat *, int, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(int, const QVector2D *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(int, const QVector3D *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(int, const QVector4D *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(const char *, const QVector2D *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(const char *, const QVector3D *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(const char *, const QVector4D *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(int, GLenum, const void *, int, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeArray(const char *, GLenum, const void *, int, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeValue(int, const GLfloat *, int, int)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeBuffer ( const char *, GLenum, int, int, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="disableAttributeArray ( const char * )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="enableAttributeArray ( const char * )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeValue(const char *, GLfloat)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setAttributeValue ( const char * , GLfloat , GLfloat )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setAttributeValue ( const char *, GLfloat, GLfloat, GLfloat )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setAttributeValue ( const char * , GLfloat , GLfloat , GLfloat , GLfloat )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setAttributeValue ( const char * , const QVector2D )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setAttributeValue ( const char * , const QVector3D )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setAttributeValue ( const char * , const QVector4D )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setAttributeValue ( const char *, const QColor )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setAttributeValue ( const char * , const GLfloat * , int , int )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QPointF )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QSize )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setUniformValue(const char *, const QSizeF )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix2x2 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix2x3 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix2x4 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix3x2 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix3x3 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix3x4 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix4x2 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix4x3 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue(const char *, const QMatrix4x4 )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
            <modify-function signature="setUniformValue(const char *, const QTransform )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, GLfloat)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, GLint)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, GLfloat, GLfloat)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, GLfloat, GLfloat, GLfloat)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, GLfloat, GLfloat, GLfloat, GLfloat)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, QVector2D )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, QVector3D )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, QVector4D )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, QPoint )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValue ( const char *, QColor )">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const GLuint *, int)" remove="all"/>
        <modify-function signature="setUniformValueArray(int, const GLint *, int)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const GLfloat *, int, int)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QVector2D *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QVector3D *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QVector4D *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix4x4 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix2x2 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix3x2 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix4x2 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix2x3 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix3x3 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix4x3 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix2x4 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(int, const QMatrix3x4 *, int)">
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const GLuint *, int)" remove="all"/>
        <modify-function signature="setUniformValueArray(const char*, const GLint *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const GLfloat *, int, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QVector2D *, int)">
        <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QVector3D *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QVector4D *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix4x4 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix2x2 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix3x2 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix4x2 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix2x3 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix3x3 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix4x3 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix2x4 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUniformValueArray(const char*, const QMatrix3x4 *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="2">
                <array-type length-parameter="3"/>
            </modify-argument>
        </modify-function>
    </object-type>

    <value-type name="QOpenGLPixelTransferOptions">
    </value-type>
    <value-type name="QOpenGLBuffer">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="allocate(const void *, int)">
            <modify-argument index="1">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="read(int, void *, int)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="write(int, const void *, int)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="map(QOpenGLBuffer::Access)">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.ByteBuffer" />
                <conversion-rule class="native">
                %out = %env->NewDirectByteBuffer(%in, __qt_this->size());
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="mapRange(int, int, QFlags&lt;QOpenGLBuffer::RangeAccessFlag>)">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.ByteBuffer" />
                <conversion-rule class="native">
                %out = %env->NewDirectByteBuffer(%in, qMin(%2, __qt_this->size()-%1));
                </conversion-rule>
            </modify-argument>
        </modify-function>
      </value-type>
    <object-type name="QOpenGLTexture">
        <modify-function signature="setData(int, int, int, int, int, int, int, int, QOpenGLTexture::CubeMapFace, int, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions *const)" since="5.14.0">
            <modify-argument index="13">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="14">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(int, int, int, int, int, int, int, int, QOpenGLTexture::CubeMapFace, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions *const)" since="5.14.0">
            <modify-argument index="12">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="13">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(int, int, int, int, int, int, int, int, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions *const)" since="5.14.0">
            <modify-argument index="11">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="12">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(int, int, int, int, int, int, int, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions *const)" since="5.14.0">
            <modify-argument index="10">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="11">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(int, int, int, int, int, int, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions *const)" since="5.14.0">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="10">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(int, int, QOpenGLTexture::CubeMapFace, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="7">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(int, int, int, QOpenGLTexture::CubeMapFace, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="8">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(int, int, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="6">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(int, QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setData(QOpenGLTexture::PixelFormat, QOpenGLTexture::PixelType, const void *, const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setCompressedData(int, int, int, QOpenGLTexture::CubeMapFace, int, const void *,const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="7">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setCompressedData(int, int, QOpenGLTexture::CubeMapFace, int, const void *,const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="6">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setCompressedData(int, int, int, const void *,const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setCompressedData(int, int, const void *,const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setCompressedData(int, const void *,const QOpenGLPixelTransferOptions * const)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="io.qt.opengl.QOpenGLPixelTransferOptions"/>
                <conversion-rule class="native">
                    QOpenGLPixelTransferOptions *%out = qtjambi_cast&lt;QOpenGLPixelTransferOptions *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
      </object-type>
    <object-type name="QOpenGLVersionFunctionsBackend">
        <modify-field name="context">
            <reference-count action="set" variable-name="_rcOpenGLContext"/>
        </modify-field>
        <inject-code>
            private Object _rcOpenGLContext;
        </inject-code>
    </object-type>
    <object-type name="QOpenGLFunctions">
        <modify-function signature="glBindAttribLocation(GLuint,GLuint,const char*)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetVertexAttribPointerv(GLuint, GLenum, void **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetString(GLenum)">
            <modify-argument index="return">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glBufferData(GLenum,qopengl_GLsizeiptr,const void*,GLenum)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glBufferSubData(GLenum,qopengl_GLintptr,qopengl_GLsizeiptr,const void*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCompressedTexImage2D(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const void*)">
            <modify-argument index="8">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCompressedTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const void*)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetActiveAttrib(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, char*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetActiveUniform(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, char*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetAttribLocation(GLuint, const char*)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramInfoLog(GLuint, GLsizei, GLsizei*, char*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetShaderInfoLog(GLuint, GLsizei, GLsizei*, char*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glShaderBinary(GLint, const GLuint*, GLenum, const void*, GLint)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glShaderSource(GLuint, GLsizei, const char**, const GLint*)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const char** %out = nullptr;
                    QScopedArrayPointer&lt;const char*> %outPtr(%out = new const char*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = %env->GetArrayLength(jarray(%3));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    const GLint * %out = nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttribPointer(GLuint, GLint, GLenum, GLboolean, GLsizei, const void*)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetUniformLocation(GLuint, const char*)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetShaderSource(GLuint, GLsizei, GLsizei*, char*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <import template="QOpenGLESFunctions"/>
    </object-type>
    <functional-type name="GLDEBUGPROC">
            <modify-argument index="5">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="7">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="6">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    J2CStringBuffer %out(%env, %in);
                    GLsizei %5 = %env->GetStringLength(%in);
                    const void * __qt_%7 = nullptr;
                </conversion-rule>
                <conversion-rule class="shell">
                    Q_UNUSED(%7)
                    jstring %out = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%in, %5));
                </conversion-rule>
            </modify-argument>
    </functional-type>
    <object-type name="QOpenGLExtraFunctions">
        <inject-code class="native" position="beginning">
#ifndef GL_MAX_LABEL_LENGTH
#define GL_MAX_LABEL_LENGTH 0x82E8
#endif
        </inject-code>
        <modify-function signature="glDebugMessageCallback(GLDEBUGPROC, const void *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    const void * %out = nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetPointerv(GLenum, void**)">
            <modify-argument index="2">
                <no-null-pointer/>
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                    if(%out.size()==0){
                        JavaException::raiseIllegalArgumentException(%env, "Array length is 0." QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetBufferPointerv(GLenum, GLenum, void **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glClearBufferfv(GLenum, GLint, const GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glClearBufferiv(GLenum, GLint, const GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glClearBufferuiv(GLenum, GLint, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCompressedTexImage3D(GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, const void *)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCompressedTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, const void *)">
            <modify-argument index="11">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glInvalidateFramebuffer(GLenum, GLsizei, const GLenum *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glInvalidateSubFramebuffer(GLenum, GLsizei, const GLenum *, GLint, GLint, GLsizei, GLsizei)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteProgramPipelines(GLsizei, const GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteQueries(GLsizei, const GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteSamplers(GLsizei, const GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteTransformFeedbacks(GLsizei, const GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDeleteVertexArrays(GLsizei, const GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawArraysIndirect(GLenum, const void *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawBuffers(GLsizei, const GLenum *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawElementsIndirect(GLenum, GLenum, const void *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawElementsInstanced(GLenum, GLsizei, GLenum, const void *, GLsizei)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawRangeElements(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenProgramPipelines(GLsizei, GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenQueries(GLsizei, GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenSamplers(GLsizei, GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenTransformFeedbacks(GLsizei, GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGenVertexArrays(GLsizei, GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetActiveUniformBlockName(GLuint, GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetActiveUniformBlockiv(GLuint, GLuint, GLenum, GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetActiveUniformsiv(GLuint, GLsizei, const GLuint *, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetDebugMessageLog(GLuint, GLsizei, GLenum *, GLenum *, GLuint *, GLenum *, GLsizei *, GLchar *)">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    GLuint %out = GLuint(%env->GetArrayLength(jarray(%3)));
                    %out = qMin(%out, GLuint(%env->GetArrayLength(jarray(%4))));
                    %out = qMin(%out, GLuint(%env->GetArrayLength(jarray(%5))));
                    %out = qMin(%out, GLuint(%env->GetArrayLength(jarray(%8))));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="6">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="7">
                <remove-argument/>
                <conversion-rule class="native">
                    QScopedArrayPointer&lt;GLsizei> %in(new GLsizei[__qt_%1]);
                    GLsizei* %out = %in.get();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="8">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <conversion-rule class="native">
                %out = jint(%in);
                int offset = 0;
                for(jsize i=0; i&lt;jsize(__qt_return_value); ++i){
                    jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(__qt_%8+offset, __qt_%7[i]));
                    offset += __qt_%7[i];
                    %env->SetObjectArrayElement(%8, i, result);
                }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTransformFeedbackVaryings(GLuint, GLsizei, const GLchar *const *, GLenum)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = %env->GetArrayLength(jarray(%3));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const GLchar** %out = nullptr;
                    QScopedArrayPointer&lt;const GLchar*> %outPtr(%out = new const GLchar*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCreateShaderProgramv(GLenum, GLsizei, const GLchar * const *)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const char** %out = nullptr;
                    QScopedArrayPointer&lt;const char*> %outPtr(%out = new const char*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = %env->GetArrayLength(jarray(%3));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetUniformBlockIndex(GLuint, const GLchar *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetFragDataLocation(GLuint, const GLchar *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramResourceIndex(GLuint, GLenum, const GLchar *)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glObjectLabel(GLenum, GLuint, GLsizei, const GLchar *)">
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glPushDebugGroup(GLenum, GLuint, GLsizei, const GLchar *)">
            <modify-argument index="3">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    J2CStringBuffer %out(%env, jstring(%in));
                    GLsizei %3 = %env->GetStringLength(jstring(%in));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramResourceLocation(GLuint, GLenum, const GLchar *)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramPipelineInfoLog(GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %3));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (infoLog.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'infoLog': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>        
        <modify-function signature="glGetStringi(GLenum, GLuint)">
            <modify-argument index="return">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramResourceName(GLuint, GLenum, GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="6">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %5));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (name.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'name': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glGetObjectLabel(GLenum, GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %4));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (label.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'label': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glGetPointerv(GLenum, void **)">
            <modify-argument index="2">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramPipelineInfoLog(GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %3));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (infoLog.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'infoLog': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glGetObjectLabel(GLenum, GLuint, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %4));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (label.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'label': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glGetObjectPtrLabel(const void *, GLsizei, GLsizei *, GLchar *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.gui.gl.GLsync"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    const void* %out = qtjambi_to_object(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %3));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (label.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'label': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glObjectPtrLabel(const void *, GLsizei, const GLchar *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.gui.gl.GLsync"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    const void* %out = qtjambi_to_object(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    J2CStringBuffer %out(%env, %in);
                    GLsizei %2(-1);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDebugMessageControl(GLenum, GLenum, GLenum, GLsizei, const GLuint *, GLboolean)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawElementsBaseVertex(GLenum, GLsizei, GLenum, const void *, GLint)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawRangeElementsBaseVertex(GLenum, GLuint, GLuint, GLsizei, GLenum, const void *, GLint)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDrawElementsInstancedBaseVertex(GLenum, GLsizei, GLenum, const void *, GLsizei, GLint)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glDebugMessageInsert(GLenum, GLenum, GLuint, GLenum, GLsizei, const GLchar *)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetBooleani_v(GLenum, GLuint, GLboolean *)">
            <modify-argument index="3">
                <no-null-pointer/>
                <replace-type modified-type="java.nio.IntBuffer"/>
                <conversion-rule class="native">
                    JBufferData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetInteger64i_v(GLenum, GLuint, GLint64 *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetInternalformativ(GLenum, GLenum, GLenum, GLsizei, GLint*)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetIntegeri_v(GLenum, GLuint, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetInteger64v(GLenum, GLint64 *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetBufferParameteri64v(GLenum, GLenum, GLint64*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetFramebufferParameteriv(GLenum, GLenum, GLint*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttribI4iv(GLuint, const GLint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttribI4uiv(GLuint, const GLuint *)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttribIPointer(GLuint, GLint, GLenum, GLsizei, const void *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix4x3fv(GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix4x2fv(GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix3x4fv(GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix3x2fv(GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix2x4fv(GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniformMatrix2x3fv(GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix4x3fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix4x2fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix4fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix3x4fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix3x2fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix3fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix2x4fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix2x3fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniformMatrix2fv(GLuint, GLint, GLsizei, GLboolean, const GLfloat *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform1uiv(GLint, GLsizei, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform2uiv(GLint, GLsizei, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform3uiv(GLint, GLsizei, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glUniform4uiv(GLint, GLsizei, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexParameterIiv(GLenum, GLenum, const GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexParameterIuiv(GLenum, GLenum, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glSamplerParameterIuiv(GLuint, GLenum, const GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glSamplerParameterIiv(GLuint, GLenum, const GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glSamplerParameteriv(GLuint, GLenum, const GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glSamplerParameterfv(GLuint, GLenum, const GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform4uiv(GLuint, GLint, GLsizei, const GLuint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform4iv(GLuint, GLint, GLsizei, const GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform4fv(GLuint, GLint, GLsizei, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform3uiv(GLuint, GLint, GLsizei, const GLuint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform3iv(GLuint, GLint, GLsizei, const GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform3fv(GLuint, GLint, GLsizei, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform2uiv(GLuint, GLint, GLsizei, const GLuint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform2iv(GLuint, GLint, GLsizei, const GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform2fv(GLuint, GLint, GLsizei, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform1uiv(GLuint, GLint, GLsizei, const GLuint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform1iv(GLuint, GLint, GLsizei, const GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glProgramUniform1fv(GLuint, GLint, GLsizei, const GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetnUniformfv(GLuint, GLint, GLsizei, GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetnUniformuiv(GLuint, GLint, GLsizei, GLuint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetnUniformiv(GLuint, GLint, GLsizei, GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetMultisamplefv(GLenum, GLuint, GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramBinary(GLuint, GLsizei, GLsizei *, GLenum *, void *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramInterfaceiv(GLuint, GLenum, GLenum, GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramPipelineiv(GLuint, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramResourceiv(GLuint, GLenum, GLuint, GLsizei, const GLenum *, GLsizei, GLsizei *, GLint *)">
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="8">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetQueryObjectuiv(GLuint, GLenum, GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetQueryiv(GLenum, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetSamplerParameterIiv(GLuint, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetSamplerParameterIuiv(GLuint, GLenum, GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetSamplerParameterfv(GLuint, GLenum, GLfloat *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetSamplerParameteriv(GLuint, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetSynciv(__GLsync *, GLenum, GLsizei, GLsizei *, GLint *)">
            <modify-argument index="3">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="4">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.nio.IntBuffer"/>
                <conversion-rule class="native">
                    JBufferData %out(%env, %in);
                    GLsizei %3 = GLsizei(%out.size());
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexLevelParameterfv(GLenum, GLint, GLenum, GLfloat *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexLevelParameteriv(GLenum, GLint, GLenum, GLint *)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexParameterIiv(GLenum, GLenum, GLint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTexParameterIuiv(GLenum, GLenum, GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetTransformFeedbackVarying(GLuint, GLuint, GLsizei, GLsizei *, GLsizei *, GLenum *, GLchar *)">
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %out = GL_MAX_LABEL_LENGTH;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    GLsizei %in = 0;
                    GLsizei* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="6">
                <array-type min-length="1"/>
            </modify-argument>
            <modify-argument index="7">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QByteArray %out_buffer(GL_MAX_LABEL_LENGTH, '\0');
                    char* %out = %out_buffer.data();
                    %scope.addFinalAction([&amp;](){
                        jstring result = qtjambi_from_qstring(%env, QString::fromLocal8Bit(%out, %4));
                        %env->SetObjectArrayElement(%in, 0, result);
                    });
                </conversion-rule>
            </modify-argument>
            <inject-code>
                if (name.length &lt; 1)
                    throw new IllegalArgumentException("Argument 'name': Wrong number of elements in array. Found: 0, expected: 1");
            </inject-code>
        </modify-function>
        <modify-function signature="glGetUniformIndices(GLuint, GLsizei, const GLchar *const *, GLuint *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = qMin(%env->GetArrayLength(jarray(%3)), %env->GetArrayLength(jarray(%4)));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const char** %out = nullptr;
                    QScopedArrayPointer&lt;const char*> %outPtr(%out = new const char*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <no-null-pointer/>
                <replace-type modified-type="int[]"/>
                <conversion-rule class="native">
                JIntArrayPointer %out(%env, %in, true);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetUniformuiv(GLuint, GLint, GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetVertexAttribIiv(GLuint, GLenum, GLint *)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.IntBuffer"/>
                <conversion-rule class="native">
                    JBufferData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetVertexAttribIuiv(GLuint, GLenum, GLuint *)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glReadnPixels(GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, void *)">
            <modify-argument index="8">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexImage3D(GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, const void *)">
            <modify-argument index="10">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glTexSubImage3D(GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, const void *)">
            <modify-argument index="11">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glMapBufferRange(GLenum, GLintptr, GLsizeiptr, GLbitfield)">
            <modify-argument index="0">
                <array-type as-buffer="yes" length-parameter="3"/>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_gui-java.java" quote-after-line="class QOpenGLExtraFunctions___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QOpenGLFunctions_ES2">
        <modify-function signature="glBindAttribLocation(GLuint,GLuint,const GLchar*)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetVertexAttribPointerv(GLuint, GLenum, GLvoid **)">
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer[]"/>
                <conversion-rule class="native">
                    JObjectArrayPointer&lt;void*> %out(%env, jobjectArray(%in),
                                                [](void* &amp; pointer,JNIEnv *, jobject){
                                                    pointer = nullptr;
                                                },
                                                [](JNIEnv * env, void* const&amp; ptr) -> jobject {
                                                    return env->NewDirectByteBuffer(ptr, INT_MAX);
                                                }
                                            );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetString(GLenum)">
            <modify-argument index="return">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glBufferData(GLenum,GLsizeiptr,const GLvoid*,GLenum)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glBufferSubData(GLenum,GLintptr,GLsizeiptr,const GLvoid*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCompressedTexImage2D(GLenum,GLint,GLenum,GLsizei,GLsizei,GLint,GLsizei,const GLvoid*)">
            <modify-argument index="8">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glCompressedTexSubImage2D(GLenum,GLint,GLint,GLint,GLsizei,GLsizei,GLenum,GLsizei,const GLvoid*)">
            <modify-argument index="9">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetActiveAttrib(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetActiveUniform(GLuint, GLuint, GLsizei, GLsizei*, GLint*, GLenum*, GLchar*)">
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="5">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="7">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetAttribLocation(GLuint, const GLchar*)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetProgramInfoLog(GLuint, GLsizei, GLsizei*, GLchar*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetShaderInfoLog(GLuint, GLsizei, GLsizei*, GLchar*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glShaderBinary(GLsizei,const GLuint*,GLenum,const GLvoid*,GLsizei)">
            <modify-argument index="2">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glShaderSource(GLuint, GLsizei, const GLchar**, const GLint*)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    QVector&lt;QSharedPointer&lt;J2CStringBuffer>> %inVec;
                    const char** %out = nullptr;
                    QScopedArrayPointer&lt;const char*> %outPtr(%out = new const char*[quint32(__qt_%2)]);
                    for(jsize i=0; i&lt;__qt_%2; ++i){
                        J2CStringBuffer* b = new J2CStringBuffer(%env, jstring(%env->GetObjectArrayElement(jobjectArray(%in), i)));
                        %out[i] = *b;
                        %inVec &lt;&lt; QSharedPointer&lt;J2CStringBuffer>(b);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jsize %out = %env->GetArrayLength(jarray(%3));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    const GLint * %out = nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="glVertexAttribPointer(GLuint, GLint, GLenum, GLboolean, GLsizei, const GLvoid*)">
            <modify-argument index="6">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetUniformLocation(GLuint, const GLchar*)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="glGetShaderSource(GLuint, GLsizei, GLsizei*, GLchar*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <import template="QOpenGLESFunctions"/>
        <inject-code>
            <import-file name="typesystem/java/typesystem_gui-java.java" quote-after-line="class QOpenGLFunctions_ES2___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QOpenGLFunctions_1_0">
        <import template="QOpenGLFunctions_1_0_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_1_1">
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_1_2">
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_1_3">
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_1_4">
        <import template="QOpenGLFunctions_1_4A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_1_5">
        <import template="QOpenGLFunctions_1_4A"/>
        <import template="QOpenGLFunctions_1_5A"/>
        <import template="QOpenGLFunctions_1_5"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_2_0">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_2_1">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_3_0">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_0"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_3_1">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_1"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5"/>
    </object-type>
    <object-type name="QOpenGLFunctions_3_2_Core">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_1"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5"/>
    </object-type>
    <object-type name="QOpenGLFunctions_3_2_Compatibility">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_1"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_3_3_Core">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_1"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5"/>
    </object-type>
    <object-type name="QOpenGLFunctions_3_3_Compatibility">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_1"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_0_Core">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_1"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_0_Compatibility">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_1"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_1_Core">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5"/>
        <import template="QOpenGLFunctions_4_1"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_1_Compatibility">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
        <import template="QOpenGLFunctions_4_1"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_2_Core">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5"/>
        <import template="QOpenGLFunctions_4_1"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_2_Compatibility">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
        <import template="QOpenGLFunctions_4_1"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_3_Core">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5"/>
        <import template="QOpenGLFunctions_4_3"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_3_Compatibility">
        <import template="QOpenGLFunctions_2_0A"/>
        <import template="QOpenGLFunctions_3_2A"/>
        <import template="QOpenGLFunctions_1_0_template_full"/>
        <import template="QOpenGLFunctions_1_1_template_full"/>
        <import template="QOpenGLFunctions_4_3"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_4_Core">
        <import template="QOpenGLFunctions_2_0B"/>
        <import template="QOpenGLFunctions_3_2B"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5B"/>
        <import template="QOpenGLFunctions_4_4"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_4_Compatibility">
        <import template="QOpenGLFunctions_2_0B"/>
        <import template="QOpenGLFunctions_3_2B"/>
        <import template="QOpenGLFunctions_1_0_template_full2"/>
        <import template="QOpenGLFunctions_1_1_template_full2"/>
        <import template="QOpenGLFunctions_4_4"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_5_Core">
        <import template="QOpenGLFunctions_2_0B"/>
        <import template="QOpenGLFunctions_3_2B"/>
        <import template="QOpenGLFunctions_1_0_template_until_4_5"/>
        <import template="QOpenGLFunctions_1_1_template_until_4_5B"/>
        <import template="QOpenGLFunctions_4_5"/>
    </object-type>
    <object-type name="QOpenGLFunctions_4_5_Compatibility">
        <import template="QOpenGLFunctions_2_0B"/>
        <import template="QOpenGLFunctions_3_2B"/>
        <import template="QOpenGLFunctions_1_0_template_full2"/>
        <import template="QOpenGLFunctions_1_1_template_full2"/>
        <import template="QOpenGLFunctions_4_5"/>
    </object-type>
</typesystem>

