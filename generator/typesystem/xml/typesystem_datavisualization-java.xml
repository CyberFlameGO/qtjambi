<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2019 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.datavis" module="qtjambi.datavisualization" default-superclass="io.qt.QtObject">
    <object-type name="QtDataVisualization::QSurfaceDataProxy">
        <modify-function signature="resetArray(QtDataVisualization::QSurfaceDataArray*)">
            <inject-code position="beginning">
            QtJambi_LibraryUtilities.internal.invalidateObject(__rcArray);
            </inject-code>
            <inject-code position="end"><argument-map index="1" meta-name="%1"/>
            __rcArray = %1;
            QtJambi_LibraryUtilities.internal.registerDependentObject(__rcArray, this);
            </inject-code>
            <modify-argument index="1">
                <define-ownership class="java" owner="cplusplus"/>
                <replace-type modified-type="io.qt.datavis.QSurfaceDataArray"/>
                <conversion-rule class="native" until="5.*">
                QtDataVisualization::QSurfaceDataArray* %out = %in ? qtjambi_cast&lt;QtDataVisualization::QSurfaceDataArray*>(%env, %in) : nullptr;
                </conversion-rule>
                <conversion-rule class="native" since="6.0.0">
                QSurfaceDataArray* %out = %in ? qtjambi_cast&lt;QSurfaceDataArray*>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            private QSurfaceDataArray __rcArray;
        </inject-code>
    </object-type>
    <object-type name="QtDataVisualization::QScatterDataProxy">
        <modify-function signature="resetArray(QtDataVisualization::QScatterDataArray*)">
            <inject-code position="beginning">
            QtJambi_LibraryUtilities.internal.invalidateObject(__rcArray);
            </inject-code>
            <inject-code position="end"><argument-map index="1" meta-name="%1"/>
            __rcArray = %1;
            QtJambi_LibraryUtilities.internal.registerDependentObject(__rcArray, this);
            </inject-code>
            <modify-argument index="1">
                <define-ownership class="java" owner="cplusplus"/>
                <replace-type modified-type="io.qt.datavis.QScatterDataArray"/>
                <conversion-rule class="native" until="5.*">
                QtDataVisualization::QScatterDataArray* %out = %in ? qtjambi_cast&lt;QtDataVisualization::QScatterDataArray*>(%env, %in) : nullptr;
                </conversion-rule>
                <conversion-rule class="native" since="6.0.0">
                QScatterDataArray* %out = %in ? qtjambi_cast&lt;QScatterDataArray*>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            private QScatterDataArray __rcArray;
        </inject-code>
    </object-type>
    <object-type name="QtDataVisualization::QBarDataProxy">
        <modify-function signature="resetArray(QtDataVisualization::QBarDataArray*)">
            <inject-code position="beginning">
            QtJambi_LibraryUtilities.internal.invalidateObject(__rcArray);
            </inject-code>
            <inject-code position="end"><argument-map index="1" meta-name="%1"/>
            __rcArray = %1;
            QtJambi_LibraryUtilities.internal.registerDependentObject(__rcArray, this);
            </inject-code>
            <modify-argument index="1">
                <define-ownership class="java" owner="cplusplus"/>
                <replace-type modified-type="io.qt.datavis.QBarDataArray"/>
                <conversion-rule class="native" until="5.*">
                QtDataVisualization::QBarDataArray* %out = %in ? qtjambi_cast&lt;QtDataVisualization::QBarDataArray*>(%env, %in) : nullptr;
                </conversion-rule>
                <conversion-rule class="native" since="6.0.0">
                QBarDataArray* %out = %in ? qtjambi_cast&lt;QBarDataArray*>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="resetArray(QtDataVisualization::QBarDataArray*,QStringList,QStringList)">
            <inject-code position="beginning">
            QtJambi_LibraryUtilities.internal.invalidateObject(__rcArray);
            </inject-code>
            <inject-code position="end"><argument-map index="1" meta-name="%1"/>
            __rcArray = %1;
            QtJambi_LibraryUtilities.internal.registerDependentObject(__rcArray, this);
            </inject-code>
            <modify-argument index="1">
                <define-ownership class="java" owner="cplusplus"/>
                <replace-type modified-type="io.qt.datavis.QBarDataArray"/>
                <conversion-rule class="native" until="5.*">
                QtDataVisualization::QBarDataArray* %out = %in ? qtjambi_cast&lt;QtDataVisualization::QBarDataArray*>(%env, %in) : nullptr;
                </conversion-rule>
                <conversion-rule class="native" since="6.0.0">
                QBarDataArray* %out = %in ? qtjambi_cast&lt;QBarDataArray*>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            private QBarDataArray __rcArray;
        </inject-code>
    </object-type>
    <object-type name="QtDataVisualization::QCustom3DVolume">
        <modify-function signature="createTextureData(QVector&lt;QImage*>)">
            <modify-argument index="1">
                <replace-type modified-type="java.util.Collection&lt;io.qt.gui.QImage>"/>
                <conversion-rule class="native">
                const QVector&lt;QImage*>&amp; %out = qtjambi_cast&lt;const QVector&lt;QImage*>&amp;>(%env, %scope, %in);
                for(QImage* image : %out){
                    if(!image)
                        JavaException::raiseIllegalArgumentException(%env, "Collection must not contain null." QTJAMBI_STACKTRACEINFO );
                }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <conversion-rule class="native">
                %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
            <inject-code position="beginning">
            QtJambi_LibraryUtilities.internal.invalidateObject(__rcTextureData);
            </inject-code>
            <inject-code position="end"><argument-map index="0" meta-name="%0"/>
            __rcTextureData = %0;
            QtJambi_LibraryUtilities.internal.registerDependentObject(__rcTextureData, this);
            </inject-code>
        </modify-function>
        <inject-code>
            private io.qt.QtObject __rcTextureData;
        </inject-code>
    </object-type>
    <object-type name="QtDataVisualization::QSurface3DSeries">
        <modify-function signature="setDataProxy(QtDataVisualization::QSurfaceDataProxy *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code position="beginning"><argument-map index="1" meta-name="%1"/>
            if(%1!=null){
                if(%1==dataProxy()){
                    throw new IllegalArgumentException("Proxy is already assigned to this series.");
                }else if(%1.series()!=null){
                    throw new IllegalArgumentException("Proxy is already assigned to another series.");
                }
            }
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QBar3DSeries">
        <modify-function signature="setDataProxy(QtDataVisualization::QBarDataProxy *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code position="beginning"><argument-map index="1" meta-name="%1"/>
            if(%1!=null){
                if(%1==dataProxy()){
                    throw new IllegalArgumentException("Proxy is already assigned to this series.");
                }else if(%1.series()!=null){
                    throw new IllegalArgumentException("Proxy is already assigned to another series.");
                }
            }
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QScatter3DSeries">
        <modify-function signature="setDataProxy(QtDataVisualization::QScatterDataProxy *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code position="beginning"><argument-map index="1" meta-name="%1"/>
            if(%1!=null){
                if(%1==dataProxy()){
                    throw new IllegalArgumentException("Proxy is already assigned to this series.");
                }else if(%1.series()!=null){
                    throw new IllegalArgumentException("Proxy is already assigned to another series.");
                }
            }
            </inject-code>
        </modify-function>
    </object-type>
</typesystem>
