<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2019 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.remoteobjects" module="qtjambi.remoteobjects" default-superclass="io.qt.QtObject">
    <inject-code class="metainfo" position="1">
    void initialize_meta_info_RemoteObject();
    </inject-code>
    <inject-code class="metainfo">
    initialize_meta_info_RemoteObject();
    </inject-code>
    <object-type name="QRemoteObjectHostBase">
        <modify-function signature="proxy(const QUrl &amp;, const QUrl &amp;, QRemoteObjectHostBase::RemoteObjectNameFilter)">
            <modify-argument index="2">
                <replace-default-expression with="new io.qt.core.QUrl()"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-default-expression with="(a,b)-&gt;true"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="reverseProxy(QRemoteObjectHostBase::RemoteObjectNameFilter)">
            <modify-argument index="1">
                <replace-default-expression with="(a,b)-&gt;true"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addHostSideConnection(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="add" variable-name="__rcHostSideConnection"/>
            </modify-argument>
        </modify-function>
  </object-type>
  <object-type name="QRemoteObjectNode">
        <modify-function signature="addClientSideConnection(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="add" variable-name="__rcHostSideConnection"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="instances&lt;T>() const" remove="all"/>
        <modify-function signature="acquireModel(const QString &amp;, QtRemoteObjects::InitialAction, const QVector&lt;int> &amp;)">
            <modify-argument index="3">
                <replace-default-expression with="new java.util.ArrayList&lt;>()"/>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_remoteobjects-java.java" quote-after-line="class QRemoteObjectNode___" quote-before-line="}// class"/>
        </inject-code>
  </object-type>
  <namespace-type name="QtRemoteObjects">
        <inject-code>
            <import-file name="typesystem/java/typesystem_remoteobjects-java.java" quote-after-line="class QtRemoteObjects___" quote-before-line="}// class"/>
        </inject-code>
  </namespace-type>
  <object-type name="ServerIoDevice">
        <extra-includes until="5.12.0">
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="read(QtRemoteObjects::QRemoteObjectPacketTypeEnum &amp;, QString &amp;)" until="5.12.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QtRemoteObjects::QRemoteObjectPacketTypeEnum %out(QtRemoteObjects::Invalid);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %out;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.remoteobjects.ServerIoDevice$ReadResult"/>
                <conversion-rule class="native">
                    if(%in){
                        jclass cls = resolveClass(%env, "io/qt/remoteobjects/ServerIoDevice$ReadResult");
                        JavaException::check(%env QTJAMBI_STACKTRACEINFO );
                        jmethodID constructor = resolveMethod(%env, "&lt;init>", "(Lio/qt/remoteobjects/QtRemoteObjects$QRemoteObjectPacketTypeEnum;Ljava/lang/String;)V", cls, false);
                        JavaException::check(%env QTJAMBI_STACKTRACEINFO );
                        %out = %env->NewObject(cls, constructor, qtjambi_cast&lt;jobject>(%env, __qt_%1), qtjambi_cast&lt;jobject>(%env, __qt_%2));
                        JavaException::check(%env QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code until="5.12.0">
            <import-file name="typesystem/java/typesystem_remoteobjects-java.java" quote-after-line="class IoDevice___" quote-before-line="}// class"/>
        </inject-code>
  </object-type>
  <object-type name="ClientIoDevice">
        <extra-includes until="5.12.0">
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="read(QtRemoteObjects::QRemoteObjectPacketTypeEnum &amp;, QString &amp;)" until="5.12.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QtRemoteObjects::QRemoteObjectPacketTypeEnum %out(QtRemoteObjects::Invalid);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %out;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.remoteobjects.ClientIoDevice$ReadResult"/>
                <conversion-rule class="native">
                    if(%in){
                        jclass cls = resolveClass(%env, "io/qt/remoteobjects/ClientIoDevice$ReadResult");
                        JavaException::check(%env QTJAMBI_STACKTRACEINFO );
                        jmethodID constructor = resolveMethod(%env, "&lt;init>", "(Lio/qt/remoteobjects/QtRemoteObjects$QRemoteObjectPacketTypeEnum;Ljava/lang/String;)V", cls, false);
                        JavaException::check(%env QTJAMBI_STACKTRACEINFO );
                        %out = %env->NewObject(cls, constructor, qtjambi_cast&lt;jobject>(%env, __qt_%1), qtjambi_cast&lt;jobject>(%env, __qt_%2));
                        JavaException::check(%env QTJAMBI_STACKTRACEINFO );
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code until="5.12.0">
            <import-file name="typesystem/java/typesystem_remoteobjects-java.java" quote-after-line="class IoDevice___" quote-before-line="}// class"/>
        </inject-code>
  </object-type>
  <object-type name="IoDeviceBase">
        <extra-includes>
            <include file-name="qtjambi_remoteojects_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="read(QtRemoteObjects::QRemoteObjectPacketTypeEnum &amp;, QString &amp;)">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QtRemoteObjects::QRemoteObjectPacketTypeEnum %out(QtRemoteObjects::Invalid);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %out;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.remoteobjects.IoDeviceBase$ReadResult"/>
                <conversion-rule class="native">
                    if(%in){
                        %out = Java::QtRemoteObjects::IoDeviceBase$ReadResult::newInstance(%env, qtjambi_cast&lt;jobject>(%env, __qt_%1), qtjambi_cast&lt;jobject>(%env, __qt_%2));
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_remoteobjects-java.java" quote-after-line="class IoDevice___" quote-before-line="}// class"/>
        </inject-code>
  </object-type>
  <object-type name="QtROIoDeviceBase">
        <extra-includes>
            <include file-name="qtjambi_remoteojects_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="read(QtRemoteObjects::QRemoteObjectPacketTypeEnum &amp;, QString &amp;)">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QtRemoteObjects::QRemoteObjectPacketTypeEnum %out(QtRemoteObjects::Invalid);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %out;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.remoteobjects.QtROIoDeviceBase$ReadResult"/>
                <conversion-rule class="native">
                    if(%in){
                        %out = Java::QtRemoteObjects::QtROIoDeviceBase$ReadResult::newInstance(%env, qtjambi_cast&lt;jobject>(%env, __qt_%1), qtjambi_cast&lt;jobject>(%env, __qt_%2));
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_remoteobjects-java.java" quote-after-line="class IoDevice___" quote-before-line="}// class"/>
        </inject-code>
  </object-type>
  <interface-type name="QRemoteObjectPendingCall">
        <modify-function signature="waitForFinished(int)">
            <modify-argument index="1">
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <inject-code class="interface">
            <import-file name="typesystem/java/typesystem_remoteobjects-java.java" quote-after-line="class QRemoteObjectPendingCall___" quote-before-line="}// class"/>
        </inject-code>
  </interface-type>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: Final class 'QRemoteObjectHostBase' set to non-final, as it is extended by other classes" />
  <suppress-warning text="WARNING(JavaGenerator) :: Either add or remove specified for reference count variable '__rcHostSideConnection' in '*' but not both." />
</typesystem>
