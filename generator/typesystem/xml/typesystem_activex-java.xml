<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.activex" module="qtjambi.activex" default-superclass="io.qt.QtObject">
    <extra-includes>
        <include file-name="qaxobject.h" location="global"/>
        <include file-name="qaxwidget.h" location="global"/>
    </extra-includes>
    <inject-code class="metainfo" position="end">
    registerMetaType&lt;HRESULT>("HRESULT");
    registerTypeInfo&lt;HRESULT>("HRESULT", "int");
    </inject-code>
    <inject-code class="metainfo" position="end" until="5.15.*">
    registerMetaObject(typeid(QAxObject), QAxObject::staticMetaObject, false);
    registerMetaObject(typeid(QAxWidget), QAxWidget::staticMetaObject, false);
    </inject-code>
    <object-type name="QAxScriptManager">
        <modify-function signature="addObject(QObject *)" remove="all">
            <modify-argument index="1">
                <reference-count action="add" variable-name="__rcObjects"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addObject(QAxBase *)">
            <modify-argument index="1">
                <reference-count action="add" variable-name="__rcObjects"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QAxWidget">
        <inject-code until="5.15.*">
        public static final io.qt.core.QMetaObject staticMetaObject = io.qt.core.QMetaObject.forType(QAxWidget.class);
        </inject-code>
    </object-type>
    <object-type name="QAxObject">
        <inject-code until="5.15.*">
        public static final io.qt.core.QMetaObject staticMetaObject = io.qt.core.QMetaObject.forType(QAxObject.class);
        </inject-code>
    </object-type>
    <interface-type name="QAxBase">
        <modify-function signature="queryInterface(QUuid,void**)const" access="non-final">
        </modify-function>
        <modify-function signature="propertyWritable(const char*)const">
            <modify-argument index="1" replace-type="java.lang.String"/>
        </modify-function>
        <modify-function signature="setPropertyWritable(const char*,bool)">
            <modify-argument index="1" replace-type="java.lang.String"/>
        </modify-function>
        <modify-function signature="className()const">
            <modify-argument index="0" replace-type="java.lang.String"/>
        </modify-function>
        <modify-function signature="dynamicCall(const char*,QList&lt;QVariant>&amp;)">
            <modify-argument index="1" replace-type="java.lang.String"/>
        </modify-function>
        <modify-function signature="dynamicCall(const char*,QList&lt;QVariant>&amp;,uint)">
            <modify-argument index="1" replace-type="java.lang.String"/>
        </modify-function>
        <modify-function signature="dynamicCall(const char*,QVariant,QVariant,QVariant,QVariant,QVariant,QVariant,QVariant,QVariant)">
            <modify-argument index="1" replace-type="java.lang.String"/>
        </modify-function>
        <modify-function signature="querySubObject(const char*,QList&lt;QVariant>&amp;)">
            <modify-argument index="1" replace-type="java.lang.String"/>
        </modify-function>
        <modify-function signature="querySubObject(const char*,QVariant,QVariant,QVariant,QVariant,QVariant,QVariant,QVariant,QVariant)">
            <modify-argument index="1" replace-type="java.lang.String"/>
        </modify-function>
    </interface-type>
</typesystem>
