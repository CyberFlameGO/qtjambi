<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2019 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.quick3d" module="qtjambi.quick3d" default-superclass="io.qt.QtObject">
    <object-type name="QQuick3DObject">
        <modify-function signature="itemChange(QQuick3DObject::ItemChange, const QQuick3DObject::ItemChangeData &amp;)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.Object"/>
                <conversion-rule class="shell">
                    //conversion-rule-shell
                    jobject %out = nullptr;
                    switch(%1){
                    case QQuick3DObject::ItemChildAddedChange:      // value.item
                    case QQuick3DObject::ItemChildRemovedChange:    // value.item
                    case QQuick3DObject::ItemParentHasChanged:      // value.item
                    {
                        %out = qtjambi_cast&lt;jobject>(%env, %in.item);
                    }
                    break;
                    case QQuick3DObject::ItemSceneChange:           // value.sceneManager
                    {
                        %out = nullptr;//qtjambi_cast&lt;jobject>(%env, %in.sceneManager);
                    }
                    break;
                    case QQuick3DObject::ItemVisibleHasChanged:     // value.boolValue
                    case QQuick3DObject::ItemActiveFocusHasChanged: // value.boolValue
                    case QQuick3DObject::ItemAntialiasingHasChanged: // value.boolValue
                    case QQuick3DObject::ItemEnabledHasChanged:      // value.boolValue
                    {
                        %out = qtjambi_cast&lt;jobject>(%env, %in.boolValue);
                    }
                    break;
                    case QQuick3DObject::ItemOpacityHasChanged:     // value.realValue
                    case QQuick3DObject::ItemRotationHasChanged:    // value.realValue
                    case QQuick3DObject::ItemDevicePixelRatioHasChanged: // value.realValue
                    {
                        %out = qtjambi_cast&lt;jobject>(%env, double(%in.realValue));
                    }
                    break;
                    default:
                    break;
                    }
                </conversion-rule>
                <conversion-rule class="native">
                    //conversion-rule-native
                    QQuick3DObject::ItemChangeData %out(false);
                    switch(__qt_%1){
                    case QQuick3DObject::ItemChildAddedChange:      // value.item
                    case QQuick3DObject::ItemChildRemovedChange:    // value.item
                    case QQuick3DObject::ItemParentHasChanged:      // value.item
                    {
                        if(%in &amp;&amp; !Java::QtQuick3D::QQuick3DObject::isInstanceOf(%env, %in)){
                            JavaException::raiseIllegalArgumentException(%env, "Object of type QQuick3DObject expected." QTJAMBI_STACKTRACEINFO);
                        }
                        %out.item = qtjambi_cast&lt;QQuick3DObject*>(%env, %in);
                    }
                    break;
                    case QQuick3DObject::ItemSceneChange:           // value.window
                    {
                        %out.sceneManager = nullptr;
                    }
                    break;
                    case QQuick3DObject::ItemVisibleHasChanged:     // value.boolValue
                    case QQuick3DObject::ItemActiveFocusHasChanged: // value.boolValue
                    case QQuick3DObject::ItemAntialiasingHasChanged: // value.boolValue
                    case QQuick3DObject::ItemEnabledHasChanged:      // value.boolValue
                    {
                        if(%in &amp;&amp; !Java::Runtime::Boolean::isInstanceOf(%env, %in)){
                            JavaException::raiseIllegalArgumentException(%env, "Boolean value expected." QTJAMBI_STACKTRACEINFO);
                        }
                        %out.boolValue = qtjambi_to_boolean(%env, %in);
                    }
                    break;
                    case QQuick3DObject::ItemOpacityHasChanged:     // value.realValue
                    case QQuick3DObject::ItemRotationHasChanged:    // value.realValue
                    case QQuick3DObject::ItemDevicePixelRatioHasChanged: // value.realValue
                    {
                        if(%in &amp;&amp; !Java::Runtime::Number::isInstanceOf(%env, %in)){
                            JavaException::raiseIllegalArgumentException(%env, "Number value expected." QTJAMBI_STACKTRACEINFO);
                        }
                        %out.realValue = qtjambi_to_double(%env, %in);
                    }
                    break;
                    default:
                    break;
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code class="shell-declaration" position="end">
        public: QSSGRenderGraphObject* updateSpatialNode(QSSGRenderGraphObject* n) override {return n;}
        </inject-code>
    </object-type>
</typesystem>
