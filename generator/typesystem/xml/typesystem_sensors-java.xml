<?xml version="1.0"?>
<typesystem package="io.qt.sensors" module="qtjambi.sensors" default-superclass="io.qt.QtObject">
    <object-type name="QSensorGesture">
        <extra-includes>
            <include file-name="qtjambi_sensors_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="gestureSignals() const">
            <modify-argument index="0">
                <conversion-rule class="native">
                    for(int i=0; i&lt;%in.size(); ++i){
                        if(%in[i].endsWith("(QString)")){
                            %in[i].replace("QString", "java.lang.String");
                        }else if(!%in[i].endsWith("()")){
                            const QObject* obj = __qt_this;
                            int idx = obj->metaObject()->indexOfMethod(qPrintable(%in[i]));
                            if(idx>=0){
                                QMetaMethod method = obj->metaObject()->method(idx);
                                jobject methodObject = qtjambi_cast&lt;jobject>(%env, method);
                                jstring sig = Java::QtCore::QMetaMethod::methodSignature(%env, methodObject);
                                qtjambi_to_qstring(%in[i], %env, sig);
                            }else{
                                %in[i].replace("QString", "java.lang.String");
                            }
                        }
                    }
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QSensorGestureManager">
        <modify-function signature="recognizerSignals(QString) const">
            <modify-argument index="0">
                <conversion-rule class="native">
                    for(int i=0; i&lt;%in.size(); ++i){
                        if(!%in[i].endsWith("()")){
                            %in[i].replace("QString", "java.lang.String");
                        }
                    }
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QSensorManager">
        <modify-function signature="registerBackend(const QByteArray &amp;, const QByteArray &amp;, QSensorBackendFactory *)">
            <modify-argument index="3">
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code>
                <argument-map index="1" meta-name="%1"/>
                <argument-map index="2" meta-name="%2"/>
                <argument-map index="3" meta-name="%3"/>
                io.qt.core.QPair&lt;io.qt.core.QByteArray,io.qt.core.QByteArray> key = new io.qt.core.QPair&lt;>(%1, %2);
                __rcBackends.put(key, %3);
            </inject-code>
        </modify-function>
        <modify-function signature="unregisterBackend(const QByteArray &amp;, const QByteArray &amp;)">
            <inject-code>
                <argument-map index="1" meta-name="%1"/>
                <argument-map index="2" meta-name="%2"/>
                io.qt.core.QPair&lt;io.qt.core.QByteArray,io.qt.core.QByteArray> key = new io.qt.core.QPair&lt;>(%1, %2);
                __rcBackends.remove(key);
            </inject-code>
        </modify-function>
        <inject-code>
            private final static java.util.Map&lt;io.qt.core.QPair&lt;io.qt.core.QByteArray,io.qt.core.QByteArray>,QSensorBackendFactory> __rcBackends = java.util.Collections.synchronizedMap(new java.util.HashMap&lt;>());
        </inject-code>
    </object-type>
    <interface-type name="QSensorBackendFactory">
        <modify-function signature="createBackend(QSensor*)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
        </modify-function>
    </interface-type>
    <object-type name="QSensor">
        <modify-function signature="addFilter(QSensorFilter*)">
            <modify-argument index="1">
                <reference-count action="add" variable-name="__rcFilters" />
            </modify-argument>
        </modify-function>
        <modify-function signature="removeFilter(QSensorFilter*)">
            <modify-argument index="1">
                <reference-count action="remove" variable-name="__rcFilters" />
            </modify-argument>
        </modify-function>
        <modify-function signature="reading()const" access="non-final">
        </modify-function>
    </object-type>
    <interface-type name="QSensorFilter">
        <modify-field name="m_sensor" write="no" read="yes" rename="sensor">
            <reference-count action="set" variable-name="__rcSensor" />
        </modify-field>
        <modify-function signature="setSensor(QSensor*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcSensor" />
            </modify-argument>
        </modify-function>
    </interface-type>
    <object-type name="QSensorBackend">
        <modify-function signature="setDataRates(const QSensor*)">
            <modify-argument index="1">
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
</typesystem>
