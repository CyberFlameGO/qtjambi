<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.script" module="qtjambi.script" default-superclass="io.qt.QtObject">
    <object-type name="QScriptEngine">
        <modify-function signature="QScriptEngine(QObject *)">
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QScriptExtensionPlugin">
        <modify-function signature="QScriptExtensionPlugin(QObject *)">
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QScriptClass">
        <modify-function signature="newIterator(const QScriptValue &amp;)">
          <modify-argument index="return">
            <replace-type modified-type="io.qt.script.QScriptClassPropertyIterator" />
            <conversion-rule class="native">
                jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
            </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="queryProperty(const QScriptValue &amp;, const QScriptString &amp;, QFlags&lt;QScriptClass::QueryFlag&gt;, uint *)">
            <modify-argument index="4">
                <replace-type modified-type="java.lang.Integer"/>
                <conversion-rule class="shell">
                    jobject %out = %in ? qtjambi_from_int(%env, int(*%in)) : nullptr;
                </conversion-rule>
                <conversion-rule class="native">
                    uint %outTmp = uint(qtjambi_to_int(%env, %in));
                    uint* %out = %in ? &amp;%outTmp : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setProperty(QScriptValue &amp;, const QScriptString &amp;, unsigned int, const QScriptValue &amp;)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.script.QScriptValue"/>
                <no-null-pointer/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QScriptValue&amp; %out = qtjambi_cast&lt;QScriptValue&amp;>(%env, %scope, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QScriptValue">
      <modify-function signature="call(const QScriptValue &amp;, const QList&lt;QScriptValue&gt; &amp;)">
          <modify-argument index="2">
            <replace-type modified-type="java.util.Collection&lt;QScriptValue&gt;" />
            <replace-default-expression with="new java.util.ArrayList&lt;&gt;()"/>
          </modify-argument>
      </modify-function>
      <modify-function signature="construct(const QList&lt;QScriptValue&gt; &amp;)">
           <modify-argument index="1">
            <replace-type modified-type="java.util.Collection&lt;QScriptValue&gt;" />
            <replace-default-expression with="new java.util.ArrayList&lt;&gt;()"/>
           </modify-argument>
      </modify-function>
      <!--modify-function signature="setProperty(const QString &amp;, const QScriptValue &amp;, const PropertyFlags &amp;);">
           <modify-argument index="3">
            <replace-type modified-type="io.qt.script.QScriptValue$PropertyFlags" />
                <conversion-rule class="native">
                    QScriptValue::PropertyFlags %out = qtjambi_cast&lt;QScriptValue::PropertyFlags>(%env, %in);
                </conversion-rule>
           </modify-argument>
      </modify-function>
      <modify-function signature="setProperty(const QScriptString &amp;, const QScriptValue &amp;, const PropertyFlags &amp;);">
           <modify-argument index="3">
            <replace-type modified-type="io.qt.script.QScriptValue$PropertyFlags" />
                <conversion-rule class="native">
                    QScriptValue::PropertyFlags %out = qtjambi_cast&lt;QScriptValue::PropertyFlags>(%env, %in);
                </conversion-rule>
           </modify-argument>
      </modify-function>
      <modify-function signature="setProperty(unsigned int, const QScriptValue &amp;, const PropertyFlags &amp;);">
           <modify-argument index="3">
            <replace-type modified-type="io.qt.script.QScriptValue$PropertyFlags" />
                <conversion-rule class="native">
                    QScriptValue::PropertyFlags %out = qtjambi_cast&lt;QScriptValue::PropertyFlags>(%env, %in);
                </conversion-rule>
           </modify-argument>
      </modify-function-->
      <inject-code>
      
      @io.qt.QtUninvokable
      public final Integer toInteger() {
            if(Double.isNaN(private_toInteger())){
                return null;
            }else{
                return toInt();
            }
      }
      </inject-code>
  </value-type>
  <value-type name="QScriptString">
  <modify-function signature="toArrayIndex ( bool * ) const">
        <modify-argument index="0">
            <replace-type modified-type="java.lang.Integer"/>
            <conversion-rule class="native">
                %out = ok ? qtjambi_from_int(%env, %in) : nullptr;
            </conversion-rule>
        </modify-argument>
        <modify-argument index="1">
            <remove-argument/>
            <conversion-rule class="native">
                bool ok(false);
                bool* %out = &amp;ok;
            </conversion-rule>
        </modify-argument>
  </modify-function>
  </value-type>
    <suppress-warning text="WARNING(CppImplGenerator) :: protected function '*' in final class '*'" />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: visibility of function '*' modified in class '*'" />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: hiding of function '*' in class '*'" />
</typesystem>
