<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.qt3d.core" module="qtjambi.qt3dcore" default-superclass="io.qt.QtObject">
    <object-type name="Qt3DCore::QScenePropertyChange">
        <extra-includes>
            <include file-name="QtCore/QScopedPointer" location="global"/>
            <include file-name="QtCore/QByteArray" location="global"/>
        </extra-includes>
        <inject-code class="shell-declaration" position="end">
public:
    inline void __qt_propertyNameReset(QByteArray* pointer){
        __qt_propertyName.reset(pointer);
    }
private:
    QScopedPointer&lt;QByteArray&gt; __qt_propertyName;
</inject-code>
        <modify-function signature="propertyName()const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
            %out = (jobject)qtjambi_from_qstring(%env, QLatin1String(%in));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setPropertyName(const char *)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                const char * %out = Q_NULLPTR;
                QByteArray* container = Q_NULLPTR;
                if(%in){
                    container = new QByteArray(qtjambi_to_qstring(%env, (jstring)%in).toLatin1());
                    %out = container->constData();
                }
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                __qt_this->__qt_propertyNameReset(container);
</inject-code>
        </modify-function>
    </object-type>
    <value-type name="Qt3DCore::QAspectFactory">
    </value-type>
    <value-type name="Qt3DCore::QAxisAlignedBoundingBox">
        <modify-function signature="transform(const QMatrix4x4 &amp;)">
            <modify-argument index="0">
                <replace-type modified-type="void"/>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="Qt3DCore::QRay3D">
        <modify-function signature="transform(const QMatrix4x4 &amp;)">
            <modify-argument index="0">
                <replace-type modified-type="void"/>
            </modify-argument>
        </modify-function>
    </value-type>
    <object-type name="Qt3DCore::QAbstractAspect">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_qt3dcore-java.java" quote-after-line="class QAbstractAspect___java" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="Qt3DCore::QEntity">
        <inject-code class="java" since="6.0.0">
            <import-file name="typesystem/java/typesystem_qt3dcore-java.java" quote-after-line="class QEntity__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
</typesystem>
