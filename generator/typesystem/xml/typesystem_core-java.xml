<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 1992-2009 Nokia. All rights reserved.
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.core" default-superclass="io.qt.QtObject" module="qtjambi">
    <inject-code class="metainfo" position="1">
    void initialize_meta_info_QtCore();
    </inject-code>
    <inject-code class="metainfo" position="end">
    initialize_meta_info_QtCore();
    </inject-code>
    <inject-code class="java" position="end">
    QLogging.initialize();
    QThread.initialize();
    </inject-code>
    <inject-code class="module-info" position="end">
    requires transitive java.logging;
    requires java.xml;
    requires java.prefs;
    opens io.qt.internal to qtjambi.autotest;
    exports io.qt.internal to qtjambi.deployer,
                              qtjambi.qml,
                              qtjambi.autotest;
    exports io.qt;
    </inject-code>
    <template name="core.comsumer.function">
        std::function&lt;void(%TYPE)> %out;
        if(%in){
            JObjectWrapper wrapper(%env, %in);
            %out = [wrapper](%TYPE value){
                        if(JNIEnv *env = qtjambi_current_environment()){
                            QTJAMBI_JNI_LOCAL_FRAME(env, 200)
                            jobject _value = qtjambi_cast&lt;jobject>(env, value);
                            Java::Runtime::Consumer::accept(env, wrapper.object(), _value);
                        }
                    };
        }
    </template>
    <template name="core.supplier.function">
        std::function&lt;%TYPE()> %out;
        if(%in){
            JObjectWrapper wrapper(%env, %in);
            %out = [wrapper]() -> %TYPE {
                        if(JNIEnv *env = qtjambi_current_environment()){
                            QTJAMBI_JNI_LOCAL_FRAME(env, 200)
                            jobject value = Java::Runtime::Supplier::get(env, wrapper.object());
                            return qtjambi_cast&lt;%TYPE>(env, value);
                        }
                        return {};
                    };
        }
    </template>
    <template name="core.AtomicReference_to_ptr">
    %TYPE* %out = nullptr;
    if(%in){
        jobject obj = %env-&gt;CallObjectMethod(%in, _AtomicReference->get);
        JavaException::check(%env QTJAMBI_STACKTRACEINFO );
        %out = new %TYPE( qtjambi_cast&lt;%TYPE>(%env, obj) );
        %scope.addFinalAction([%env,_AtomicReference,%in,%out](){
                                QScopedPointer&lt;%TYPE> ptr(%out);
                                Java::Runtime::AtomicReference::set(%env, %in, qtjambi_cast&lt;jobject>(%env, *%out));
                              });
    }
    </template>
    <template name="core.ptr_to_AtomicReference">
    jobject %out = nullptr;
    if(%in){
        %out = Java::Runtime::AtomicReference::newInstance(%env, qtjambi_cast&lt;jobject>(%env, *%in));
        %scope.addFinalAction([%env,_AtomicReference,%in,%out](){
                                *%in = qtjambi_cast&lt;%TYPE>(%env, Java::Runtime::AtomicReference::get(%env, %out));
                              });
    }
    </template>
    <template name="core.std_iterator_to_java_util_Iterator">
            @Override
            @io.qt.QtUninvokable
            public final java.util.Iterator&lt;%ELEMENT_TYPE> iterator() {
                return begin().toJavaIterator(this::end());
            }
    </template>

    <template name="core.self_iterator">
            @Override
            @io.qt.QtUninvokable
            public final java.util.Iterator&lt;%ELEMENT_TYPE> iterator() {
                return this;
            }
    </template>

    <template name="core.to_iterator">
            @Override
            @io.qt.QtUninvokable
            public final %ITERATOR_TYPE iterator() {
                return new %ITERATOR_TYPE(this);
            }
    </template>

    <template name="core.return_string_instead_of_char*">
            public final String %FUNCTION_NAME() {
                QNativePointer np = %FUNCTION_NAME_private();
                String returned = "";
                int i=0;
                while (np.byteAt(i) != 0) returned += (char) np.byteAt(i++);
                return returned;
            }
    </template>
    <template name="core.call_with_string_instead_of_char*">
            public final void %FUNCTION_NAME(String %ARG_NAME) {
                %FUNCTION_NAME(QNativePointer.createCharPointer(%ARG_NAME));
            }
    </template>

    <template name="core.private_function_return_self">
          public final %RETURN_TYPE %FUNCTION_NAME(%ARGUMENTS) {
            %FUNCTION_NAME_private(%ARGUMENT_NAMES);
            return this;
          }
    </template>
    
    <template name="core.unary_other_type">
        <insert-template name="core.private_function_return_self">
            <replace from="%RETURN_TYPE" to="%OUT_TYPE"/>
            <replace from="%ARGUMENTS" to="%IN_TYPE other"/>
            <replace from="%ARGUMENT_NAMES" to="other"/>
        </insert-template>
    </template>

    <template name="core.unary_self_type">
        <insert-template name="core.unary_other_type">
            <replace from="%IN_TYPE" to="%TYPE"/>
            <replace from="%OUT_TYPE" to="%TYPE"/>
        </insert-template>
    </template>

    <template name="core.operator_assign_self_type">
        <insert-template name="core.unary_self_type">
            <replace from="%FUNCTION_NAME" to="operator_assign"/>
        </insert-template>
    </template>

    <template name="core.operator_assign_other_type">
        <insert-template name="core.unary_other_type">
            <replace from="%FUNCTION_NAME" to="operator_assign"/>
        </insert-template>
    </template>

    <template name="core.call_through_with_byte[]_instead_of_char*_and_int">
        public final int %FUNCTION_NAME(byte data[]) {
            QNativePointer np = new QNativePointer(QNativePointer.Type.Byte, data.length);
            %COPY_IN
            int returned = (int) %FUNCTION_NAME(np, data.length);
            %COPY_OUT
            return returned;
        }
    </template>

    <template name="core.read_with_byte[]_instead_of_char*_and_int">
        <insert-template name="core.call_through_with_byte[]_instead_of_char*_and_int">
            <replace from="%COPY_IN" to=""/>
            <replace from="%COPY_OUT" to="for (int i=0; i&lt;returned; ++i) data[i] = np.byteAt(i);"/>
        </insert-template>
    </template>

    <template name="core.write_with_byte[]_instead_of_char*_and_int">
        <insert-template name="core.call_through_with_byte[]_instead_of_char*_and_int">
            <replace from="%COPY_OUT" to=""/>
            <replace from="%COPY_IN" to="for (int i=0; i&lt;data.length; ++i) np.setByteAt(i, data[i]);"/>
        </insert-template>
    </template>

    <template name="core.stream_operator_shift_right">
            public final %STREAM_TYPE operator_shift_right(%TYPE array[]) {
                QNativePointer np = new QNativePointer(QNativePointer.Type.%NATIVEPOINTER_TYPE);
                for (int i=0; i&lt;array.length; ++i) {
                    operator_shift_right_%TYPE(np);
                    array[i] = np.%VALUE_FUNCTION();
                }
            
                return this;
            }
    </template>

    <primitive-type name="bool" java-name="boolean" jni-name="jboolean"/>

    <primitive-type name="double" jni-name="jdouble"/>

    <primitive-type name="float" jni-name="jfloat"/>
    <primitive-type name="qfloat16" java-name="float" jni-name="jfloat" preferred-conversion="no"/>

    <primitive-type name="qtjambireal" java-name="double" jni-name="jdouble"/>

    <primitive-type name="__int64" java-name="long" preferred-conversion="no" jni-name="jlong" />
    <primitive-type name="unsigned __int64" java-name="long" preferred-conversion="no" jni-name="jlong"/>
    <primitive-type name="size_t" java-name="long" preferred-conversion="no" jni-name="jlong"/>
    <primitive-type name="unsigned long long" java-name="long" preferred-conversion="no" jni-name="jlong"/>
    
    <primitive-type name="long long" java-name="long" jni-name="jlong"/>
    <primitive-type name="quintptr" preferred-conversion="no" java-name="long" jni-name="jlong" />
    <primitive-type name="qintptr" java-name="long" preferred-conversion="no" jni-name="jlong" />
    <primitive-type name="qsizetype" java-name="long" preferred-conversion="no" jni-name="jlong" />

    <primitive-type name="short" java-name="char" preferred-java-type="no" preferred-conversion="no" jni-name="jchar"/>
    <primitive-type name="short" java-name="short" jni-name="jshort" />
    <primitive-type name="uint16_t" java-name="short" preferred-conversion="no" jni-name="jshort" />
    <primitive-type name="signed short" java-name="short" preferred-conversion="no" jni-name="jshort"/><!-- jchar short/jshort -->
    <primitive-type name="unsigned short" java-name="short" preferred-conversion="no" jni-name="jshort"/><!-- jchar short/jshort --> 
    <primitive-type name="unsigned short int" java-name="short" preferred-conversion="no" jni-name="jshort"/><!-- jchar short/jshort --> 

    <primitive-type name="char" java-name="byte" jni-name="jbyte"/>
    <primitive-type name="signed char" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>
    <primitive-type name="unsigned char" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>
    <primitive-type name="std::byte" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>

    <primitive-type name="int" jni-name="jint"/>
    <primitive-type name="signed int" java-name="int" preferred-conversion="no" jni-name="jint"/>
    <primitive-type name="uint" java-name="int" preferred-conversion="no" jni-name="jint"/>
    <primitive-type name="ulong" java-name="int" preferred-conversion="no" jni-name="jint"/>
    <primitive-type name="unsigned int" java-name="int" preferred-conversion="no" jni-name="jint"/>
    <primitive-type name="unsigned" java-name="int" preferred-conversion="no" jni-name="jint"/>
    <primitive-type name="signed long" java-name="int" preferred-conversion="no" jni-name="jint"/>
    <primitive-type name="long" java-name="int" preferred-conversion="no" jni-name="jint"/>
    <primitive-type name="unsigned long" java-name="int" preferred-conversion="no" jni-name="jint"/>

    <primitive-type name="WId" java-name="long" preferred-conversion="no" jni-name="jlong"/>
    <primitive-type name="Qt::HANDLE" java-name="long" preferred-conversion="no" jni-name="jlong"/>
    <primitive-type name="QSocketDescriptor" java-name="long" preferred-conversion="no" jni-name="jlong"/>

    <primitive-type name="QByteRef" java-name="byte" preferred-conversion="no" jni-name="jbyte"/>
    <primitive-type name="QBitRef" java-name="boolean" preferred-conversion="no" jni-name="jboolean"/>

    <primitive-type name="QBool" java-name="boolean" preferred-conversion="no" jni-name="jboolean"/>
    <primitive-type name="QChar" java-name="char" preferred-conversion="yes" jni-name="jchar"/>
    <primitive-type name="char16_t" java-name="char" preferred-conversion="no" jni-name="jchar"/>
    <primitive-type name="char32_t" java-name="int" preferred-conversion="no" jni-name="jint"/>

    <primitive-type name="jobject" java-name="java.lang.Object" preferred-conversion="no" jni-name="jobject"/>
    <primitive-type name="std::nullptr_t" java-name="null" preferred-conversion="no" jni-name="std::nullptr_t"/>


    <value-type name="QDate">
        <extra-includes>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QDate___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="weekNumber(int*)const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QDate$Week"/>
                <conversion-rule class="native">
                    jobject %out = Java::QtCore::QDate$Week::newInstance(%env, %in, yearNumber);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    int yearNumber(0);
                    int* %out = &amp;yearNumber;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getDate(int*,int*,int*)" remove="all" until="5.*"/>
        <modify-function signature="getDate(int*,int*,int*) const" remove="all" since="5.9.0"/>
    </value-type>

    <value-type name="QDateTime">
    </value-type>

    <value-type name="QStorageInfo">
    </value-type>
    
    <value-type name="QCollator">
    </value-type>
    
    <value-type name="QCommandLineOption">
    </value-type>
    
    <object-type name="QCommandLineParser">
        <extra-includes>
            <include file-name="QtCore/QScopeGuard" location="global"/>
            <include file-name="qtjambi/qtjambi_application.h" location="global"/>
        </extra-includes>
        <modify-function signature="process(const QCoreApplication &amp;)" rethrow-exceptions="yes">
            <inject-code class="native" position="beginning">
            qtjambi_pre_exit();
            auto _qtjambi_unexit = qScopeGuard(&amp;qtjambi_unexit);
            </inject-code>
        </modify-function>
        <modify-function signature="process(QStringList)" rethrow-exceptions="yes">
            <inject-code class="native" position="beginning">
            qtjambi_pre_exit();
            auto _qtjambi_unexit = qScopeGuard(&amp;qtjambi_unexit);
            </inject-code>
        </modify-function>
        <modify-function signature="showVersion()">
            <inject-code class="native" position="beginning">
            qtjambi_pre_exit();
            </inject-code>
        </modify-function>
        <modify-function signature="showHelp(int)">
            <inject-code class="native" position="beginning">
            qtjambi_pre_exit();
            </inject-code>
        </modify-function>
    </object-type>
    
    <value-type name="QTimeZone">
    </value-type>

    <value-type name="QEasingCurve">
    </value-type>

    <value-type name="QMimeType">
    </value-type>

    <value-type name="QPersistentModelIndex">
        <modify-function signature="operator const QModelIndex&amp;() const" rename="toIndex" until="5.*"/>
        <modify-function signature="operator QModelIndex() const" rename="toIndex" since="6.0.0"/>
    </value-type>

    <value-type name="QProcessEnvironment">
    </value-type>
    <namespace-type name="QSysInfo">
        <inject-code class="java">
            private native static int byteOrder();
            private native static int wordSize();
            
            public static final Endian ByteOrder = Endian.resolve(byteOrder());
            
            public static final int WordSize = wordSize();
        </inject-code>
        <inject-code class="native">
                extern "C" Q_DECL_EXPORT jint JNICALL QTJAMBI_FUNCTION_PREFIX(Java_io_qt_core_QSysInfo_byteOrder__)
                (JNIEnv *, jclass)
                {
                    return jint(QSysInfo::ByteOrder);
                }
                extern "C" Q_DECL_EXPORT jint JNICALL QTJAMBI_FUNCTION_PREFIX(Java_io_qt_core_QSysInfo_wordSize__)
                (JNIEnv *, jclass)
                {
                    return jint(QSysInfo::WordSize);
                }
        </inject-code>
        <modify-field name="ByteOrder" read="no" write="no" />
    </namespace-type>
    <value-type name="QDir">
        <modify-function signature="operator[](int)const" rename="at"/>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QDir__" quote-before-line="}// class"/>
        </inject-code>
    </value-type>

    <template name="core.multiply-devide-add-subtract">
    public final %TYPE multiply(double d) { operator_multiply_assign(d); return this; }
    public final %TYPE divide(double d) { operator_divide_assign(d); return this; }
    public final %TYPE add(%TYPE p) { operator_add_assign(p); return this; }
    public final %TYPE subtract(%TYPE p) { operator_subtract_assign(p); return this; }
    </template>

    <object-type name="QSettings">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QSettings__" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="QSettings(QObject*)" block-exceptions="yes">
        </modify-function>
        <modify-function signature="QSettings(QSettings::Format, QSettings::Scope, const QString&amp;, const QString&amp;, QObject*)" block-exceptions="yes">
        </modify-function>
        <modify-function signature="QSettings(QSettings::Scope, const QString&amp;, const QString&amp;, QObject*)" block-exceptions="yes">
        </modify-function>
        <modify-function signature="QSettings(const QString&amp;, QSettings::Format, QObject*)" block-exceptions="yes">
        </modify-function>
        <modify-function signature="QSettings(const QString&amp;, const QString&amp;, QObject*)" block-exceptions="yes">
        </modify-function>
        <modify-function signature="setIniCodec(const char*)" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
                <conversion-rule class="native">
                    J2CStringBuffer %out(%env, jstring(%in));
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <value-type name="QByteArrayMatcher">
        <modify-function signature="QByteArrayMatcher(const char*,int)" remove="all" until="5.*"/>
        <modify-function signature="QByteArrayMatcher(const char*,qsizetype)" remove="all" since="6.0.0">
            <modify-argument index="1">
                <no-null-pointer/>
                <array-type length-parameter="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="indexIn(const char*,int,int)const" remove="all" until="5.*"/>
        <modify-function signature="indexIn(const char*,qsizetype,qsizetype)const" remove="all" since="6.0.0"/>
    </value-type>

    <value-type name="QPoint">
        <modify-function signature="operator*=(int)" rename="multiply">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPoint" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator*=(double)" rename="multiply">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPoint" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator*=(float)" rename="multiply">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPoint" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator/=(qreal)" rename="divide">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPoint" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator+=(QPoint)" rename="add">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPoint" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator-=(QPoint)" rename="subtract">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPoint" />
            </modify-argument>
        </modify-function>
        <modify-function signature="rx()"> <remove/> </modify-function>
        <modify-function signature="ry()"> <remove/> </modify-function>
    </value-type>

    <value-type name="QPointF">
        <modify-function signature="operator*=(qreal)" rename="multiply">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPointF" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator/=(qreal)" rename="divide">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPointF" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator+=(QPointF)" rename="add">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPointF" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator-=(QPointF)" rename="subtract">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QPointF" />
            </modify-argument>
        </modify-function>
        <modify-function signature="rx()"> <remove/> </modify-function>
        <modify-function signature="ry()"> <remove/> </modify-function>
    </value-type>

    <value-type name="QLocale">
        <modify-function signature="toDouble(QString,bool*) const" throws="NumberFormatException">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>
        <modify-function signature="toFloat(QString,bool*) const" throws="NumberFormatException">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>
        <modify-function signature="toInt(QString,bool*) const" throws="NumberFormatException">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>
        <modify-function signature="toLongLong(QString,bool*) const" rename="toLong" throws="NumberFormatException">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>
        <modify-function signature="toShort(QString,bool*) const" throws="NumberFormatException">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>
    </value-type>

    <object-type name="QAbstractProxyModel">
        <modify-function signature="createSourceIndex(int,int,void*)const" remove="all" since="6.2.0"/>
    </object-type>
    <object-type name="QAbstractItemModel">
        <modify-function signature="parent()const" remove="all"/>
        <modify-function signature="createIndex(int, int, void *) const" remove="all" until="5.*"/>
        <modify-function signature="createIndex(int, int, const void*) const" remove="all" since="6.0.0"/>
        <extra-includes>
            <include file-name="QStringList" location="global"/>
            <include file-name="QSize" location="global"/>
        </extra-includes>
        <modify-function signature="match(QModelIndex,int,QVariant,int,QFlags&lt;Qt::MatchFlag&gt;)const">
            <modify-argument index="5">
                <replace-default-expression with="Qt.MatchFlag.MatchStartsWith, Qt.MatchFlag.MatchWrap"/>
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QAbstractItemModel___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="mimeData(QList&lt;QModelIndex&gt;)const">
            <modify-argument index="0">
                <define-ownership class="shell" owner="cplusplus"/>
                <define-ownership class="native" owner="java"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="canDropMimeData(const QMimeData *, Qt::DropAction,int, int, const QModelIndex &amp;)const">
            <modify-argument index="1">
                <no-null-pointer/>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QByteArrayView">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="data() const">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.ByteBuffer"/>
                <conversion-rule class="native">
                    jobject %out = %env->NewDirectByteBuffer(const_cast&lt;char*>(%in), jlong(__qt_this->size()));
                    %out = Java::Runtime::ByteBuffer::asReadOnlyBuffer(%env, %out);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QByteArrayView___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="toShort(bool*, int) const" throws="NumberFormatException" since="6.3.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>
        <modify-function signature="toInt(bool*, int) const" throws="NumberFormatException" since="6.3.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>

        <modify-function signature="toDouble(bool*) const" throws="NumberFormatException" since="6.3.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>

        <modify-function signature="toFloat(bool*) const" throws="NumberFormatException" since="6.3.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>
        <inject-code class="java" position="equals">
        if (other instanceof byte[]) {
            other = new io.qt.core.QByteArrayView((byte[]) other);
        }else if (other instanceof java.nio.ByteBuffer) {
            other = new io.qt.core.QByteArrayView((java.nio.ByteBuffer) other);
        }else if (other instanceof String) {
            other = new io.qt.core.QByteArrayView((String) other);
        }
        </inject-code>
        <inject-code class="java" position="compare">
        if (other instanceof byte[]) {
            other = new io.qt.core.QByteArrayView((byte[]) other);
        }else if (other instanceof java.nio.ByteBuffer) {
            other = new io.qt.core.QByteArrayView((java.nio.ByteBuffer) other);
        }else if (other instanceof String) {
            other = new io.qt.core.QByteArrayView((String) other);
        }
        </inject-code>
    </value-type>
    <value-type name="QByteArray">
        <inject-code class="java" position="equals" since="6.0.0">
        if (other instanceof byte[]) {
            other = new io.qt.core.QByteArrayView((byte[]) other);
        }else if (other instanceof java.nio.ByteBuffer) {
            other = new io.qt.core.QByteArrayView((java.nio.ByteBuffer) other);
        }
        </inject-code>
        <inject-code class="java" position="compare" since="6.0.0">
        if (other instanceof byte[]) {
            other = new io.qt.core.QByteArrayView((byte[]) other);
        }else if (other instanceof java.nio.ByteBuffer) {
            other = new io.qt.core.QByteArrayView((java.nio.ByteBuffer) other);
        }
        </inject-code>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QByteArray___" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="java" until="5.*">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QByteArray_5__" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="java" since="5.12.0" until="5.*">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QByteArray_5_12__" quote-before-line="}// class"/>
        </inject-code>
        <inject-code since="5.15.0">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QByteArray_5_15__" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="java" since="6.0.0">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QByteArray_6__" quote-before-line="}// class"/>
        </inject-code>
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="operator+=(QByteArrayView)" remove="all" since="6.0.0"/>
        <modify-function signature="toShort(bool*, int) const" throws="NumberFormatException">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>

        <modify-function signature="toInt(bool*, int) const" throws="NumberFormatException">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>

        <modify-function signature="toDouble(bool*) const" throws="NumberFormatException">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>

        <modify-function signature="toFloat(bool*) const" throws="NumberFormatException">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                if(!ok)
                    JavaException::raiseNumberFormatException(%env, "Unable to parse number." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>

        <modify-function signature="QByteArray(const char*,int)" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    jsize %out = %in;
                    if(%out&lt;0){
                        if(qstrlen(__qt_%1)>__qt_%1.size()){
                            %out = jsize(__qt_%1.size());
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = jsize(__qt_%1.size());
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="QByteArray(const char*,qsizetype)" since="6.0.0">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    qsizetype %out = %in;
                    if(%in&lt;0){
                        if(qsizetype(qstrlen(__qt_%1))>__qt_%1.size()){
                            %out = __qt_%1.size();
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = __qt_%1.size();
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <modify-function signature="append(QString)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="append(int, char)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="append(qsizetype, char)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insert(int, int, char)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insert(qsizetype, qsizetype, char)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insert(qsizetype, const char*)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insert(qsizetype, QByteArray)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        
        <modify-function signature="prepend(int, char)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="prepend(qsizetype, char)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="append(const char*)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="append(const char*,int)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    jsize %out = %in;
                    if(%out&lt;0){
                        if(qstrlen(__qt_%1)>__qt_%1.size()){
                            %out = jsize(__qt_%1.size());
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = jsize(__qt_%1.size());
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="append(const char*,qsizetype)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    qsizetype %out = qsizetype(%in);
                    if(%in&lt;0){
                        if(qsizetype(qstrlen(__qt_%1))>__qt_%1.size()){
                            %out = __qt_%1.size();
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = __qt_%1.size();
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="append(QByteArray)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="append(QByteArrayView)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="append(char)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="contains(const char*)const" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="compare(const char *, Qt::CaseSensitivity) const" since="5.12.0" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="count(const char*)const" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <modify-function signature="endsWith(const char*)const" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <modify-function signature="fill(char,int)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="fill(char,qsizetype)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="indexOf(const char*,int)const" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="insert(int,QByteArray)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="insert(int,char)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insert(qsizetype,QByteArrayView)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="insert(qsizetype,char)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="insert(int,QString)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="insert(int,const char*)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="lastIndexOf(const char*,int)const" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <modify-function signature="prepend(QByteArray)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="prepend(QByteArrayView)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="prepend(char)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="prepend(const char*)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="prepend(const char*, int)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    jsize %out = %in;
                    if(%out&lt;0){
                        if(qstrlen(__qt_%1)>__qt_%1.size()){
                            %out = jsize(__qt_%1.size());
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = jsize(__qt_%1.size());
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="prepend(const char*, qsizetype)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    qsizetype %out = %in;
                    if(%in&lt;0){
                        if(qsizetype(qstrlen(__qt_%1))>__qt_%1.size()){
                            %out = __qt_%1.size();
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = __qt_%1.size();
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="replace(int, int, const char *, int)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <conversion-rule class="native">
                    jsize %out = %in;
                    if(%out&lt;0){
                        if(qstrlen(__qt_%3)>__qt_%3.size()){
                            %out = jsize(__qt_%3.size());
                        }
                    }else if(%out>__qt_%3.size()){
                        %out = jsize(__qt_%3.size());
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="replace(qsizetype, qsizetype, const char *, qsizetype)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <conversion-rule class="native">
                    qsizetype %out = %in;
                    if(%in&lt;0){
                        if(qsizetype(qstrlen(__qt_%3))>__qt_%3.size()){
                            %out = __qt_%3.size();
                        }
                    }else if(%out>__qt_%3.size()){
                        %out = __qt_%3.size();
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="insert(int, const char *, int)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <conversion-rule class="native">
                    jsize %out = %in;
                    if(%out&lt;0){
                        if(qstrlen(__qt_%2)>__qt_%2.size()){
                            %out = jsize(__qt_%2.size());
                        }
                    }else if(%out>__qt_%2.size()){
                        %out = jsize(__qt_%2.size());
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="insert(qsizetype, const char *, qsizetype)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <conversion-rule class="native">
                    qsizetype %out = %in;
                    if(%in&lt;0){
                        if(qsizetype(qstrlen(__qt_%2))>__qt_%2.size()){
                            %out = __qt_%2.size();
                        }
                    }else if(%out>__qt_%2.size()){
                        %out = __qt_%2.size();
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="remove(int,int)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="remove(qsizetype,qsizetype)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(QByteArray,const char*)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(char,QByteArray)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="replace(char,QByteArrayView)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(QString,const char*)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(int,int,const char*)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(const char*,const char*)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(const char*,int,const char*,int)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    jsize %out = %in;
                    if(%out&lt;0){
                        if(qstrlen(__qt_%1)>__qt_%1.size()){
                            %out = jsize(__qt_%1.size());
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = jsize(__qt_%1.size());
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <conversion-rule class="native">
                    jsize %out = %in;
                    if(%out&lt;0){
                        if(qstrlen(__qt_%3)>__qt_%3.size()){
                            %out = jsize(__qt_%3.size());
                        }
                    }else if(%out>__qt_%3.size()){
                        %out = jsize(__qt_%3.size());
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="replace(const char*,qsizetype,const char*,qsizetype)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    qsizetype %out = %in;
                    if(%in&lt;0){
                        if(qsizetype(qstrlen(__qt_%1))>__qt_%1.size()){
                            %out = __qt_%1.size();
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = __qt_%1.size();
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <conversion-rule class="native">
                    qsizetype %out = %in;
                    if(%in&lt;0){
                        if(qsizetype(qstrlen(__qt_%1))>__qt_%1.size()){
                            %out = __qt_%1.size();
                        }
                    }else if(%out>__qt_%1.size()){
                        %out = __qt_%1.size();
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(const char*,QByteArray)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(int,int,QByteArray)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="replace(qsizetype,qsizetype,QByteArrayView)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(char,const char*)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(char,QString)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(char,char)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(QByteArray,QByteArray)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="replace(QByteArrayView,QByteArrayView)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="replace(QString,QByteArray)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="setNum(int,int)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setNum(float,char,int)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="char"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setNum(long long,int)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setNum(double,char,int)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="char"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setNum(short,int)">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="startsWith(const char*)const" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <modify-function signature="fromRawData(const char*,int)" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    jsize %out = qMin(%in, jsize(__qt_%1.size()));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="fromRawData(const char*,qsizetype)" since="6.0.0">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    jsize %out = qMin(%in, jsize(__qt_%1.size()));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setRawData(const char*,uint)" until="5.*">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    jsize %out = qMin(%in, jsize(__qt_%1.size()));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setRawData(const char*,qsizetype)" since="6.0.0">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    jsize %out = qMin(%in, jsize(__qt_%1.size()));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="data() const">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.ByteBuffer"/>
                <conversion-rule class="native">
                    jobject %out = %env->NewDirectByteBuffer(const_cast&lt;char*>(%in), jlong(__qt_this->capacity()));
                    %out = Java::Runtime::ByteBuffer::asReadOnlyBuffer(%env, %out);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="constData() const" rename="toByteArray">
            <modify-argument index="0">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="native">
                    jbyteArray %out = %env->NewByteArray(jsize(__qt_this->size()));
                    %env->SetByteArrayRegion(%out, 0, jsize(__qt_this->size()), reinterpret_cast&lt;const jbyte *>(%in));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator=(const char*)" rename="set">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;(const char*)" since="6.0.0">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArrayView"/>
                <conversion-rule class="native">
                    QByteArrayView %out = qtjambi_cast&lt;QByteArrayView>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator==(const char*)" since="6.0.0">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArrayView"/>
                <conversion-rule class="native">
                    QByteArrayView %out = qtjambi_cast&lt;QByteArrayView>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator=(QByteArray)" rename="set">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QByteArray"/>
            </modify-argument>
        </modify-function>
        
        <modify-function signature="fromBase64Encoding(const QByteArray &amp;, QFlags&lt;QByteArray::Base64Option>)" since="5.15.0">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QByteArray$FromBase64Result"/>
                <conversion-rule class="native">
                    jobject %out = Java::QtCore::QByteArray$FromBase64Result::newInstance(%env, qtjambi_cast&lt;jobject>(%env, %in.decoded), jint(%in.decodingStatus));
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>


    <object-type name="QFile">
        <extra-includes>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="decodeName(const char*)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="moveToTrash(const QString &amp;, QString *)" since="5.15.0">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QFile$TrashResult"/>
                <conversion-rule class="native">
                    jobject %out = Java::QtCore::QFile$TrashResult::newInstance(%env, jboolean(%in), qtjambi_cast&lt;jstring>(%env, %2));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QFile__" quote-before-line="}// class" since="5.15.0"/>
        </inject-code>
    </object-type>

    <value-type name="QFileInfo">
    </value-type>


    <object-type name="QIODevice">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QIODevice_prefix__" quote-before-line="}// QIODevice_prefix__"/>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QIODevice_6_1__" quote-before-line="}// QIODevice_6_1__" since="6.0.0"/>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QIODevice_infix__" quote-before-line="}// QIODevice_infix__"/>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QIODevice_6_2__" quote-before-line="}// QIODevice_6_2__" since="6.0.0"/>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QIODevice_suffix__" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="putChar(char)" rename="putByte"/>
        <modify-function signature="ungetChar(char)" rename="ungetByte"/>
        <modify-function signature="getChar(char*)" rename="getByte">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Byte"/>
                <conversion-rule class="native">
                    jobject %out = %in ? qtjambi_cast&lt;jobject>(%env, c) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    char c(0);
                    char * %out = &amp;c;
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="write(const char*)" remove="all" />

        <modify-function signature="peek(char*,long long)">
            <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="shell">
                        qint64 %out = qint64(%in);
                        while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                            %2 -= INT_MAX;
                            %1 = &amp;%1[INT_MAX];
                            CharPointerArray %1_buffer2(%env, %1, jsize(qMin(qint64(INT_MAX), %2)));
                            %in = %env->CallIntMethod(__java_this, method_id, %1_buffer2.array());
                            %out += %in;
                        }
                </conversion-rule>
                <conversion-rule class="native">
                    jint %out = jint(%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, jsize(qMin(qint64(INT_MAX), %2)));
                </conversion-rule>
                <conversion-rule class="native">
                    jsize %2 = 0;
                    char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>

        <modify-function signature="read(char*,long long)">
            <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="shell">
                        qint64 %out = qint64(%in);
                        while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                            %2 -= INT_MAX;
                            %1 = &amp;%1[INT_MAX];
                            CharPointerArray %1_buffer2(%env, %1, jsize(qMin(qint64(INT_MAX), %2)));
                            %in = %env->CallIntMethod(__java_this, method_id, %1_buffer2.array());
                            %out += %in;
                        }
                </conversion-rule>
                <conversion-rule class="native">
                    jint %out = jint(%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, jsize(qMin(qint64(INT_MAX), %2)));
                </conversion-rule>
                <conversion-rule class="native">
                    jsize %2 = 0;
                    char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>

        <modify-function signature="readLine(char*,long long)">
            <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="shell">
                        qint64 %out = qint64(%in);
                        while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                            %2 -= INT_MAX;
                            %1 = &amp;%1[INT_MAX];
                            CharPointerArray %1_buffer2(%env, %1, jsize(qMin(qint64(INT_MAX), %2)));
                            %in = %env->CallIntMethod(__java_this, method_id, %1_buffer2.array());
                            %out += %in;
                        }
                </conversion-rule>
                <conversion-rule class="native">
                    jint %out = jint(%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, jsize(qMin(qint64(INT_MAX), %2)));
                </conversion-rule>
                <conversion-rule class="native">
                    jsize %2 = 0;
                    char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>

        <modify-function signature="write(const char*,long long)">
            <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="shell">
                        qint64 %out = qint64(%in);
                        while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                            %2 -= INT_MAX;
                            %1 = &amp;%1[INT_MAX];
                            j%2 = jsize(qMin(qint64(INT_MAX), %2));
                            ConstCharPointerArray __%1(%env, %1, j%2);
                            %in = %env->CallIntMethod(__java_this, method_id, __%1.array());
                            %out += %in;
                        }
                </conversion-rule>
                <conversion-rule class="native">
                    jint %out = jint(%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    jsize j%2 = jsize(qMin(qint64(INT_MAX), %2));
                    jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, j%2);
                </conversion-rule>
                <conversion-rule class="native">
                    jsize %2 = 0;
                    char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>
        <modify-function signature="readData(char*,long long)">
            <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="shell">
                        qint64 %out = qint64(%in);
                        while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                            %2 -= INT_MAX;
                            %1 = &amp;%1[INT_MAX];
                            CharPointerArray %1_buffer2(%env, %1, jsize(qMin(qint64(INT_MAX), %2)));
                            %in = %env->CallIntMethod(__java_this, method_id, %1_buffer2.array());
                            %out += %in;
                        }
                </conversion-rule>
                <conversion-rule class="native">
                    jint %out = jint(%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, jsize(qMin(qint64(INT_MAX), %2)));
                </conversion-rule>
                <conversion-rule class="native">
                    jsize %2 = 0;
                    char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>

        <modify-function signature="writeData(const char*,long long)">
            <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="shell">
                        qint64 %out = qint64(%in);
                        while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                            %2 -= INT_MAX;
                            %1 = &amp;%1[INT_MAX];
                            j%2 = jsize(qMin(qint64(INT_MAX), %2));
                            ConstCharPointerArray __%1(%env, %1, j%2);
                            %in = %env->CallIntMethod(__java_this, method_id, __%1.array());
                            %out += %in;
                        }
                </conversion-rule>
                <conversion-rule class="native">
                    jint %out = jint(%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    jsize j%2 = jsize(qMin(qint64(INT_MAX), %2));
                    jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, j%2);
                </conversion-rule>
                <conversion-rule class="native">
                    jsize %2 = 0;
                    char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>

        <modify-function signature="readLineData(char*,long long)">
            <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="shell">
                        qint64 %out = qint64(%in);
                        while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                            %2 -= INT_MAX;
                            %1 = &amp;%1[INT_MAX];
                            CharPointerArray %1_buffer2(%env, %1, jsize(qMin(qint64(INT_MAX), %2)));
                            %in = %env->CallIntMethod(__java_this, method_id, %1_buffer2.array());
                            %out += %in;
                        }
                </conversion-rule>
                <conversion-rule class="native">
                    jint %out = jint(%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, jsize(qMin(qint64(INT_MAX), %2)));
                </conversion-rule>
                <conversion-rule class="native">
                    jsize %2 = 0;
                    char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>
    </object-type>


    <object-type name="QCryptographicHash">
        <modify-function signature="addData(const char*,int)" until="5.*">
            <modify-argument index="1">
                <no-null-pointer/>
                <array-type length-parameter="2"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addData(const char*,qsizetype)" since="6.0.0">
            <modify-argument index="1">
                <no-null-pointer/>
                <array-type length-parameter="2"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>
        <inject-code since="6.3.0">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QCryptographicHash___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>


    <object-type name="QTextCodec">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QTextCodec___" quote-before-line="}// class"/>
        </inject-code>

        <modify-function signature="convertFromUnicode(const QChar*,int,QTextCodec::ConverterState*)const" until="5.*">
            <modify-argument index="0">
                <conversion-rule class="shell">
                    delete[] __qt_charbuffer;
                    const QByteArray&amp;  %out = qtjambi_cast&lt;QByteArray>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                    %env->ReleaseCharArrayElements(jcharArray(%1), reinterpret_cast&lt;jchar *>(__qt_%1_tmp), 0);
                    delete[] __qt_%1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="char[]"/>
                <conversion-rule class="shell">
                    // Convert directly QChar * -&gt; ushort *
                    jsize __length = jsize(%2);
                    jcharArray %out = %env-&gt;NewCharArray(__length);
                    jchar* __qt_charbuffer = new jchar[size_t(%2)];
                    for(int i=0; i&lt;__length; ++i){
                        __qt_charbuffer[i] = jchar(%in[i].unicode());
                    }
                    %env-&gt;SetCharArrayRegion(%out, 0, __length, __qt_charbuffer);
                </conversion-rule>
                <conversion-rule class="native">
                    // Convert directly ushort * -&gt; QChar *
                    jchar *__qt_%1_tmp = %env->GetCharArrayElements(%in, nullptr);
                    jsize %2 = %env->GetArrayLength(%in);
                    QChar* %out = new QChar[size_t(%2)];
                    for(int i=0; i&lt;%2; ++i){
                        %out[i] = QChar(__qt_%1_tmp[i]);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="convertToUnicode(const char*,int,QTextCodec::ConverterState*)const" until="5.*">
            <modify-argument index="0">
                <conversion-rule class="native">
                    jstring %out = qtjambi_from_qstring(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    ConstCharPointerArray _%in(%env, %in, jsize(%2));
                    jbyteArray %out = _%in;
                </conversion-rule>
                <conversion-rule class="native">
                    JByteArrayPointer %out(%env, jbyteArray(%in));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="shell">
                    // nothing
                </conversion-rule>
                <conversion-rule class="native">
                    int %out = __qt_%1.size();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="fromUnicode(const QChar*,int,QTextCodec::ConverterState*)const" until="5.*">
            <modify-argument index="0">
                <conversion-rule class="shell">
                    delete[] __qt_charbuffer;
                    const QByteArray&amp;  %out = qtjambi_cast&lt;QByteArray>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                    %env->ReleaseCharArrayElements(%1, reinterpret_cast&lt;jchar *>(__qt_%1_tmp), 0);
                    delete[] __qt_%1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="char[]"/>
                <conversion-rule class="shell">
                    // Convert directly QChar * -&gt; ushort *
                    jsize __length = jsize(%2);
                    jcharArray %out = %env-&gt;NewCharArray(__length);
                    jchar* __qt_charbuffer = new jchar[size_t(%2)];
                    for(int i=0; i&lt;__length; ++i){
                        __qt_charbuffer[i] = jchar(%in[i].unicode());
                    }
                    %env-&gt;SetCharArrayRegion(%out, 0, __length, __qt_charbuffer);
                </conversion-rule>
                <conversion-rule class="native">
                    // Convert directly ushort * -&gt; QChar *
                    jchar *__qt_%1_tmp = %env->GetCharArrayElements(%in, nullptr);
                    jsize %2 = %env->GetArrayLength(%in);
                    QChar* %out = new QChar[size_t(%2)];
                    for(int i=0; i&lt;%2; ++i){
                        %out[i] = QChar(__qt_%1_tmp[i]);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="toUnicode(const char*,int,QTextCodec::ConverterState*)const" until="5.*">
            <modify-argument index="0">
                <conversion-rule class="native">
                    jstring %out = qtjambi_from_qstring(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    ConstCharPointerArray _%in(%env, %in, jsize(%2));
                    jbyteArray %out = _%in;
                </conversion-rule>
                <conversion-rule class="native">
                    JByteArrayPointer %out(%env, jbyteArray(%in));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="shell">
                    // nothing
                </conversion-rule>
                <conversion-rule class="native">
                    int %out = __qt_%1.size();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="convertFromUnicode(const QChar*,int,QStringConverterBase::State*)const" since="6.0.0">
            <modify-argument index="0">
                <conversion-rule class="shell">
                    delete[] __qt_charbuffer;
                    const QByteArray&amp;  %out = qtjambi_cast&lt;QByteArray>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                    %env->ReleaseCharArrayElements(jcharArray(%1), reinterpret_cast&lt;jchar *>(__qt_%1_tmp), 0);
                    delete[] __qt_%1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="char[]"/>
                <conversion-rule class="shell">
                    // Convert directly QChar * -&gt; ushort *
                    jsize __length = jsize(%2);
                    jcharArray %out = %env-&gt;NewCharArray(__length);
                    jchar* __qt_charbuffer = new jchar[size_t(%2)];
                    for(int i=0; i&lt;__length; ++i){
                        __qt_charbuffer[i] = jchar(%in[i].unicode());
                    }
                    %env-&gt;SetCharArrayRegion(%out, 0, __length, __qt_charbuffer);
                </conversion-rule>
                <conversion-rule class="native">
                    // Convert directly ushort * -&gt; QChar *
                    jchar *__qt_%1_tmp = %env->GetCharArrayElements(%in, nullptr);
                    jsize %2 = %env->GetArrayLength(%in);
                    QChar* %out = new QChar[size_t(%2)];
                    for(int i=0; i&lt;%2; ++i){
                        %out[i] = QChar(__qt_%1_tmp[i]);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="convertToUnicode(const char*,int,QStringConverterBase::State*)const" since="6.0.0">
            <modify-argument index="0">
                <conversion-rule class="native">
                    jstring %out = qtjambi_from_qstring(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    ConstCharPointerArray _%in(%env, %in, jsize(%2));
                    jbyteArray %out = _%in;
                </conversion-rule>
                <conversion-rule class="native">
                    JByteArrayPointer %out(%env, jbyteArray(%in));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="shell">
                    // nothing
                </conversion-rule>
                <conversion-rule class="native">
                    int %out = __qt_%1.size();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="fromUnicode(const QChar*,int,QStringConverterBase::State*)const" since="6.0.0">
            <modify-argument index="0">
                <conversion-rule class="shell">
                    delete[] __qt_charbuffer;
                    const QByteArray&amp;  %out = qtjambi_cast&lt;QByteArray>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                    %env->ReleaseCharArrayElements(%1, reinterpret_cast&lt;jchar *>(__qt_%1_tmp), 0);
                    delete[] __qt_%1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="char[]"/>
                <conversion-rule class="shell">
                    // Convert directly QChar * -&gt; ushort *
                    jsize __length = jsize(%2);
                    jcharArray %out = %env-&gt;NewCharArray(__length);
                    jchar* __qt_charbuffer = new jchar[size_t(%2)];
                    for(int i=0; i&lt;__length; ++i){
                        __qt_charbuffer[i] = jchar(%in[i].unicode());
                    }
                    %env-&gt;SetCharArrayRegion(%out, 0, __length, __qt_charbuffer);
                </conversion-rule>
                <conversion-rule class="native">
                    // Convert directly ushort * -&gt; QChar *
                    jchar *__qt_%1_tmp = %env->GetCharArrayElements(%in, nullptr);
                    jsize %2 = %env->GetArrayLength(%in);
                    QChar* %out = new QChar[size_t(%2)];
                    for(int i=0; i&lt;%2; ++i){
                        %out[i] = QChar(__qt_%1_tmp[i]);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="toUnicode(const char*,int,QStringConverterBase::State*)const" since="6.0.0">
            <modify-argument index="0">
                <conversion-rule class="native">
                    jstring %out = qtjambi_from_qstring(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="shell">
                    ConstCharPointerArray _%in(%env, %in, jsize(%2));
                    jbyteArray %out = _%in;
                </conversion-rule>
                <conversion-rule class="native">
                    JByteArrayPointer %out(%env, jbyteArray(%in));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="shell">
                    // nothing
                </conversion-rule>
                <conversion-rule class="native">
                    int %out = __qt_%1.size();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>
        
        <modify-function signature="codecForName(const char*)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="makeDecoder(QFlags&lt;QStringConverterBase::Flag>) const" since="6.0.0">
            <modify-argument index="1">
                <replace-default-expression with="QStringConverterBase.Flag.WriteBom"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="makeEncoder(QFlags&lt;QStringConverterBase::Flag>) const" since="6.0.0">
            <modify-argument index="1">
                <replace-default-expression with="QStringConverterBase.Flag.WriteBom"/>
            </modify-argument>
        </modify-function>

    </object-type>

    <object-type name="QTranslator">
        <extra-includes>
            <include file-name="QTextCodec" location="global" until="5.*"/>
            <include file-name="QtCore/QSharedPointer" location="global"/>
            <include file-name="memory" location="global"/>
         </extra-includes>
        <modify-function signature="load(const unsigned char*,int,QString)">
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="native">
                    struct ObjectUserData : QtJambiObjectData{
                        ObjectUserData(JNIEnv *env, jbyteArray data) : QtJambiObjectData(), array(new JByteArrayPointer(env, data, false)) {
                        }
                        QSharedPointer&lt;JByteArrayPointer> array;
                        QTJAMBI_OBJECTUSERDATA_ID_IMPL(static,)
                    };
                    std::unique_ptr&lt;ObjectUserData> userData(new ObjectUserData(%env, %in));
                    const unsigned char* %out = reinterpret_cast&lt;const unsigned char*>(userData->array->pointer());
                    int %2 = userData->array->size();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
            <modify-argument index="0">
                <conversion-rule class="native">
                    jboolean %out = %in;
                    if(%in){
                        ObjectUserData *oldUserData = QTJAMBI_GET_OBJECTUSERDATA(ObjectUserData, __qt_this);
                        QTJAMBI_SET_OBJECTUSERDATA(ObjectUserData, __qt_this, userData.release());
                        if(oldUserData)
                            delete oldUserData;
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="translate(const char*,const char*,const char*,int)const">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
    </object-type>


    <value-type name="QItemSelection">
        <inject-code class="native" position="beginning">
        namespace QtJambiPrivate{
            template&lt;>
            struct supports_less_than&lt;QItemSelection> : std::false_type{};
            template&lt;>
            struct supports_stream_operators&lt;QItemSelection> : std::false_type{};
            template&lt;>
            struct supports_debugstream&lt;QItemSelection> : std::false_type{};
        }
        </inject-code>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QItemSelection___" quote-before-line="}// class"/>
        </inject-code>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QItemSelection_6__" quote-before-line="}// class" since="6.0.0"/>
        </inject-code>
        <modify-function signature="split(QItemSelectionRange,QItemSelectionRange,QItemSelection*)">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QItemSelection"/>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, result);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    QItemSelection result;
                    QItemSelection * %out = &amp;result;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>

    <!--object-type name="QSortFilterProxyModel">
        <modify-function signature="match(QModelIndex, int, QVariant, int, QFlags&lt;Qt::MatchFlag&gt;) const">
            <modify-argument index="5">
                <replace-default-expression with="Qt.MatchFlag.MatchStartsWith, Qt.MatchFlag.MatchWrap"/>
            </modify-argument>
        </modify-function>
    </object-type-->

    <!-- Don't wrap Qt concurrency classes. Use similar java concurrency classes instead! -->
    <object-type name="QWaitCondition">
        <modify-function signature="wait(QReadWriteLock *, QDeadlineTimer)">
            <modify-argument index="2">
                <replace-default-expression with="new QDeadlineTimer(QDeadlineTimer.ForeverConstant.Forever)"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="wait(QMutex *, QDeadlineTimer)">
            <modify-argument index="2">
                <replace-default-expression with="new QDeadlineTimer(QDeadlineTimer.ForeverConstant.Forever)"/>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QBuffer">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QBuffer___" quote-before-line="}// class"/>
        </inject-code>


        <modify-function signature="QBuffer(QByteArray*,QObject*)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <reference-count action="set" variable-name="strongDataReference"/>
                <conversion-rule class="native">
                    QByteArray* %out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <modify-function signature="setBuffer(QByteArray*)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <reference-count action="set" variable-name="strongDataReference"/>
                <conversion-rule class="native">
                    QByteArray* %out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <modify-function signature="setData(const char*,int)">
            <modify-argument index="1">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="native">
                    JByteArrayPointer %out(%env, jbyteArray(%in));
                    jint %2 = %out.size();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>

    </object-type>

    <object-type name="QTimer">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QTimer___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>

    <object-type name="QProcess">
        <modify-function signature="setStandardOutputProcess(QProcess*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcStandardOutputProcess"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setStandardOutputFile(QString,QFlags&lt;QIODevice::OpenModeFlag>)" until="5.*">
            <inject-code class="java" position="beginning"><argument-map index="2" meta-name="%2"/>
            if(%2.value()!=io.qt.core.QIODevice.OpenModeFlag.Append.value() &amp;&amp; %2.value()!=io.qt.core.QIODevice.OpenModeFlag.Truncate.value())
                throw new IllegalArgumentException("Argument %2: Append or Truncate expected");
            </inject-code>
        </modify-function>
        <modify-function signature="setStandardErrorFile(QString,QFlags&lt;QIODevice::OpenModeFlag>)" until="5.*">
            <inject-code class="java" position="beginning"><argument-map index="2" meta-name="%2"/>
            if(%2.value()!=io.qt.core.QIODevice.OpenModeFlag.Append.value() &amp;&amp; %2.value()!=io.qt.core.QIODevice.OpenModeFlag.Truncate.value())
                throw new IllegalArgumentException("Argument %2: Append or Truncate expected");
            </inject-code>
        </modify-function>
        <modify-function signature="setStandardOutputFile(QString,QFlags&lt;QIODeviceBase::OpenModeFlag>)" since="6.0.0">
            <inject-code class="java" position="beginning"><argument-map index="2" meta-name="%2"/>
            if(%2.value()!=io.qt.core.QIODeviceBase.OpenModeFlag.Append.value() &amp;&amp; %2.value()!=io.qt.core.QIODeviceBase.OpenModeFlag.Truncate.value())
                throw new IllegalArgumentException("Argument %2: Append or Truncate expected");
            </inject-code>
        </modify-function>
        <modify-function signature="setStandardErrorFile(QString,QFlags&lt;QIODeviceBase::OpenModeFlag>)" since="6.0.0">
            <inject-code class="java" position="beginning"><argument-map index="2" meta-name="%2"/>
            if(%2.value()!=io.qt.core.QIODeviceBase.OpenModeFlag.Append.value() &amp;&amp; %2.value()!=io.qt.core.QIODeviceBase.OpenModeFlag.Truncate.value())
                throw new IllegalArgumentException("Argument %2: Append or Truncate expected");
            </inject-code>
        </modify-function>
        <modify-function signature="start(const QString &amp;, const QStringList &amp;,QFlags&lt;QIODeviceBase::OpenModeFlag>)" since="6.0.0">
            <modify-argument index="2">
                <replace-default-expression with="java.util.Collections.emptyList()"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="execute(const QString &amp;, const QStringList &amp;)" since="6.0.0">
            <modify-argument index="2">
                <replace-default-expression with="java.util.Collections.emptyList()"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="startDetached(QString,QStringList,QString,long long*)">
            <modify-argument index="2" since="6.0.0">
                <replace-default-expression with="java.util.Collections.emptyList()"/>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Long"/>
                <conversion-rule class="native">
                    jobject %out = %in ? qtjambi_from_long(%env, pid) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    long long pid(0);
                    long long * %out = &amp;pid;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="startDetached(long long*)" since="5.10.0">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Long"/>
                <conversion-rule class="native">
                    jobject %out = %in ? qtjambi_from_long(%env, pid) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    long long pid(0);
                    long long * %out = &amp;pid;
                </conversion-rule>
            </modify-argument>
        </modify-function>
  </object-type>


    <object-type name="QSignalMapper">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QSignalMapper___" quote-before-line="}// class"/>
        </inject-code>
         <extra-includes>
             <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
         </extra-includes>
<!--
        <modify-function signature="mapped(QWidget*)" remove="all"/>
        <modify-function signature="mapping(QWidget*)const" remove="all"/>
        <modify-function signature="setMapping(QObject*,QWidget*)" remove="all"/>
-->
        <modify-function signature="mapped(QWidget*)" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QWidget"/>
                <conversion-rule class="shell">
                jobject %out = qtjambi_cast&lt;jobject>(%env, reinterpret_cast&lt;QObject*>(%in));
                </conversion-rule>
                <conversion-rule class="native">
                QWidget* %out = reinterpret_cast&lt;QWidget*>(qtjambi_cast&lt;QObject*>(%env, %in));
                </conversion-rule>
            </modify-argument>
      </modify-function>
        <modify-function signature="mappedWidget(QWidget*)" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QWidget"/>
                <conversion-rule class="shell">
                jobject %out = qtjambi_cast&lt;jobject>(%env, reinterpret_cast&lt;QObject*>(%in));
                </conversion-rule>
                <conversion-rule class="native">
                QWidget* %out = reinterpret_cast&lt;QWidget*>(qtjambi_cast&lt;QObject*>(%env, %in));
                </conversion-rule>
            </modify-argument>
      </modify-function>
      <modify-function signature="removeMappings(QObject*)">
          <modify-argument index="1">
              <reference-count action="remove" variable-name="__rcMappings"/>
          </modify-argument>
          <inject-code class="java" position="end">
              <argument-map index="1" meta-name="%1"/>
            if (__rcObjectForObject!=null) __rcObjectForObject.remove(sender);
          </inject-code>
      </modify-function>

      <modify-function signature="setMapping(QObject*,QObject*)">
          <modify-argument index="1">
              <reference-count action="add" variable-name="__rcMappings"/>
          </modify-argument>
          <inject-code class="java" position="end">
              <argument-map index="1" meta-name="%1"/>
              <argument-map index="2" meta-name="%2"/>
                if (%2 == null)
                    if(__rcObjectForObject!=null)
                        __rcObjectForObject.remove(%1);
                else{
                    if(__rcObjectForObject==null)
                        __rcObjectForObject = new java.util.HashMap&lt;>();
                    __rcObjectForObject.put(%1,%2);
                }
          </inject-code>
      </modify-function>

      <modify-function signature="setMapping(QObject*,QWidget*)" until="5.*">
          <modify-argument index="1">
              <reference-count action="add" variable-name="__rcMappings"/>
          </modify-argument>
          <modify-argument index="2">
                <replace-type modified-type="io.qt.widgets.QWidget"/>
                <conversion-rule class="shell">
                jobject %out = qtjambi_cast&lt;jobject>(%env, reinterpret_cast&lt;QObject*>(%in));
                </conversion-rule>
                <conversion-rule class="native">
                QWidget* %out = reinterpret_cast&lt;QWidget*>(qtjambi_cast&lt;QObject*>(%env, %in));
                </conversion-rule>
          </modify-argument>
          <inject-code class="java" position="end">
              <argument-map index="1" meta-name="%1"/>
              <argument-map index="2" meta-name="%2"/>
                if (%2 == null)
                    if(__rcObjectForObject!=null)
                        __rcObjectForObject.remove(%1);
                else{
                    if(__rcObjectForObject==null)
                        __rcObjectForObject = new java.util.HashMap&lt;>();
                    __rcObjectForObject.put(%1,%2);
                }
          </inject-code>
      </modify-function>

      <modify-function signature="setMapping(QObject*,QString)">
          <modify-argument index="1">
              <reference-count action="add" variable-name="__rcMappings"/>
          </modify-argument>
      </modify-function>

      <modify-function signature="setMapping(QObject*,int)">
          <modify-argument index="1">
              <reference-count action="add" variable-name="__rcMappings"/>
          </modify-argument>
      </modify-function>
      <modify-function signature="mapping(QWidget*)const" until="5.*">
          <modify-argument index="1">
            <replace-type modified-type="io.qt.widgets.QWidget"/>
            <conversion-rule class="shell">
            jobject %out = qtjambi_cast&lt;jobject>(%env, reinterpret_cast&lt;QObject*>(%in));
            </conversion-rule>
            <conversion-rule class="native">
            QWidget* %out = reinterpret_cast&lt;QWidget*>(qtjambi_cast&lt;QObject*>(%env, %in));
            </conversion-rule>
          </modify-argument>
      </modify-function>
  </object-type>

    <object-type name="QThread"><!-- In case of patched Qt library, QThread type entry is replaced in generator internally -->
        <modify-function signature="QThread(QObject*)">
          <inject-code class="java" position="end">
              initialize(null);
          </inject-code>
        </modify-function>
        <modify-function signature="wait(QDeadlineTimer)" rename="join" thread-affine="no" since="5.15.0">
            <modify-argument index="1">
                <replace-default-expression with="new QDeadlineTimer(QDeadlineTimer.ForeverConstant.Forever)"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="start(QThread::Priority)" thread-affine="no">
          <inject-code class="native" position="beginning">
              if(!__qt_this->parent() &amp;&amp; !__qt_this->isRunning()){
                  if(!Java::QtCore::QThread::javaThread(%env, __this))
                    qtjambi_set_cpp_ownership(%env, __this);
              }
          </inject-code>
        </modify-function>
        <modify-function signature="requestInterruption()" thread-affine="no">
          <inject-code class="java" position="end">
                Thread t = javaThread();
                if(t!=null)
                    t.interrupt();
          </inject-code>
        </modify-function>
      <inject-code class="java">
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QThread___" quote-before-line="}// class"/>
      </inject-code>
    </object-type>
    
  <object-type name="QObject" implements="QtSignalEmitterInterface, QtSignalBlockerInterface, QtThreadAffineInterface">
        <extra-includes>
            <include file-name="io.qt.*" location="java"/>
            <include file-name="java.util.function.Supplier" location="java"/>
        </extra-includes>
        <modify-function signature="bindingStorage()" access="private" since="6.0.0"/>
      <inject-code class="java">
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QObject___" quote-before-line="}// class"/>
      </inject-code>
      <inject-code class="java" until="5.*">
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QObject_5__" quote-before-line="}// class"/>
      </inject-code>
      <inject-code class="java" since="6.0.0">
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QObject_6__" quote-before-line="}// class"/>
      </inject-code>
      <modify-function signature="startTimer(int, Qt::TimerType)" thread-affine="yes">
          <inject-code class="java">
            <argument-map index="1" meta-name="%1"/>
            if(%1 &lt; 0){
                throw new IllegalArgumentException("Timers cannot have negative intervals.");
            }
            if(QAbstractEventDispatcher.instance()==null){
                throw new RuntimeException("Timers can only be used with threads providing an event dispatcher.");
            }
          </inject-code>
      </modify-function>
      <modify-function signature="killTimer(int)" thread-affine="yes">
      </modify-function>
      <modify-function signature="setParent(QObject*)">
          <inject-code class="native"><argument-map index="1" meta-name="%1"/>
                    if(__qt_this->isWidgetType()) {
                        if(!__qt_%1 || __qt_%1->isWidgetType()) {
                            Java::QtWidgets::QWidget::setParent(%env, qtjambi_cast&lt;jobject>(%env, __qt_this), qtjambi_cast&lt;jobject>(%env, __qt_%1));
                            return;
                        }else {
                            JavaException::raiseIllegalArgumentException(%env, "Cannot set non-widget object as widget's parent." QTJAMBI_STACKTRACEINFO );
                        }
                    }
          </inject-code>
      </modify-function>
      <modify-function signature="moveToThread(QThread*)" thread-affine="no">
            <inject-code class="native">
                    QThread* objectThread = __qt_this->thread();
                    if (objectThread == __qt_thread0) {
                        return;
                    }
                    if (objectThread &amp;&amp; objectThread != QThread::currentThread()) {
                        JavaException::raiseQThreadAffinityException(%env, "QObject::moveToThread: Current thread is not the object's thread" QTJAMBI_STACKTRACEINFO,
                                            __this,
                                            objectThread, QThread::currentThread()
                                        );
                        return;
                    }
            </inject-code>
      </modify-function>
        <modify-function signature="inherits(const char*)const">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="receivers(const char*)const">
              <inject-code class="java">
                <argument-map index="1" meta-name="%1"/>
                    if(%1==null || %1.isEmpty())
                        return 0;
                    if(!%1.startsWith("2")){
                        io.qt.core.QMetaMethod method = metaObject().method(%1);
                        if(method!=null &amp;&amp; method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal) {
                            %1 = "2" + method.cppMethodSignature();
                        }
                    }
              </inject-code>
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="property(const char*)const">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="native" position="beginning" since="6.0.0"><argument-map index="1" meta-name="%1"/>
#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
        if(QtJambiObjectData::isRejectedUserProperty(__qt_this, __qt_%1))
            return nullptr;
#endif
            </inject-code>
        </modify-function>

        <modify-function signature="setProperty(const char*,QVariant)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="native" position="beginning"><argument-map index="1" meta-name="%1"/>
#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
        if(QtJambiObjectData::isRejectedUserProperty(__qt_this, __qt_%1))
            return false;
#endif
            </inject-code>
        </modify-function>
        
        <modify-function signature="dynamicPropertyNames() const">
            <modify-argument index="0">
                <conversion-rule class="native">
#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
                for(QByteArray name : QList&lt;QByteArray>(%in)){
                    if(QtJambiObjectData::isRejectedUserProperty(__qt_this, name))
                        %in.removeAll(name);
                }
#endif
                jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
  </object-type>

  <object-type name="QCoreApplication">
      <extra-includes>
          <include file-name="qtjambi/qtjambi_application.h" location="global"/>
          <include file-name="qtjambi/qtjambi_nativeinterface.h" location="global"/>
          <include file-name="QtCore/private/qthread_p.h" location="global"/>
          <include file-name="QtCore/private/qcoreapplication_p.h" location="global"/>
          <include file-name="qtjambi_core_repository.h" location="local"/>
      </extra-includes>
        <modify-function signature="QCoreApplication(int &amp;, char **, int)"><!-- since 4.8, was 2 arg -->
            <access modifier="protected"/>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    // nothing to do
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                        std::unique_ptr&lt;ApplicationData> applicationData(new ApplicationData(%env, jobjectArray(%in)));
                        char** %out = applicationData->chars();
                        int&amp; __qt_%1 = applicationData->size();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
            </modify-argument>
            <inject-code class="java">
                    if(!__qt_isInitializing){
                        throw new IllegalAccessError("Not allowed to instantiate QCoreApplication. Please use QCoreApplication.initialize() instead.");
                    }
            </inject-code>
            <inject-code class="native" position="end">
                QTJAMBI_SET_OBJECTUSERDATA(ApplicationData, __qt_this, applicationData.release());
            </inject-code>
        </modify-function>
      <modify-function signature="exec()">
            <inject-code class="native" position="beginning">
            QCoreApplication* instance = QCoreApplication::instance();
            if (!instance)
                JavaException::raiseRuntimeException(%env, "QCoreApplication has not been initialized with QCoreApplication.initialize()" QTJAMBI_STACKTRACEINFO );
            else if(instance->inherits("QGuiApplication")){
                bool classNotFound = false;
                try{
                    Java::QtGui::QGuiApplication::getClass(%env);
                }catch(...){
                    classNotFound = true;
                }
                if(!classNotFound)
                    return Java::QtGui::QGuiApplication::exec(%env);
            }else if(instance->thread()!=QThread::currentThread())
                JavaException::raiseRuntimeException(%env, "exec() must be called from the main thread." QTJAMBI_STACKTRACEINFO );
            else if(QThreadData::get2(instance->thread())->eventLoops.size()>0)
                JavaException::raiseRuntimeException(%env, "The event loop is already running." QTJAMBI_STACKTRACEINFO );
            </inject-code>
      </modify-function>
      <modify-function signature="sendPostedEvents(QObject *, int)">
            <modify-argument index="1" thread-affine="yes"/>
      </modify-function>
      <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QCoreApplication___" quote-before-line="}// class"/>
      </inject-code>
      <inject-code since="6.2.0">
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QCoreApplication__62_" quote-before-line="}// class"/>
      </inject-code>

        <modify-function signature="translate(const char*,const char*,const char*,int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="resolveInterface(const char *, int)const" access="private" since="6.2.0">
            <modify-argument index="0">
                <replace-type modified-type="&lt;QNativeInterface extends io.qt.QtObjectInterface> QNativeInterface"/>
                <conversion-rule class="native">
                    jobject %out = qtjambi_from_object(%env, %in, %1, false, false);
                    qtjambi_register_dependent_interface(%env, %out, __this_nativeId);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.lang.Class&lt;QNativeInterface>"/>
                <conversion-rule class="native">
                    if(inherits("QGuiApplication")){
                        bool classNotFound = false;
                        try{
                            Java::QtGui::QGuiApplication::getClass(%env);
                        }catch(...){
                            classNotFound = true;
                        }
                        if(!classNotFound)
                            return Java::QtGui::QGuiApplication::resolveInterface(%env, qtjambi_java_object_reference(__this_nativeId, %env), %in);
                    }
                    NITypeInfo info = qtjambi_get_native_interface_info(%env, %in);
                    const char* %out = info.name;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    int %out = info.revision;
                </conversion-rule>
                <remove-argument/>
            </modify-argument>
        </modify-function>
  </object-type>
  
  <template-type name="Stream">
      <modify-function signature="operator&lt;&lt;(long long)">
          <rename to="writeLong"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(float)">
          <rename to="writeFloat"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <!-- This API is double even on ARM -->
      <modify-function signature="operator&lt;&lt;(double)">
          <rename to="writeDouble"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(long long&amp;)">
          <rename to="readLong"/>
          <modify-argument index="0">
                <replace-type modified-type="long"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    long long __java_return_value;
                    long long&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(float&amp;)">
          <rename to="readFloat"/>
          <modify-argument index="0">
                <replace-type modified-type="float"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    float __java_return_value;
                    float&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>

      <!-- This API is double even on ARM -->
      <modify-function signature="operator&gt;&gt;(double&amp;)">
          <rename to="readDouble"/>
          <modify-argument index="0">
                <replace-type modified-type="double"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    double __java_return_value;
                    double&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
  </template-type>

  <object-type name="QDataStream">
      <import template="Stream"/>
      <modify-function signature="operator&lt;&lt;(unsigned short)">
          <rename to="writeChar"/>
          <modify-argument index="0" replace-value="this"/>
          <modify-argument index="1">
                <replace-type modified-type="char"/>
          </modify-argument>
      </modify-function>

      <modify-function signature="operator&gt;&gt;(unsigned short&amp;)">
          <rename to="readChar"/>
          <modify-argument index="0">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    unsigned short __java_return_value;
                    unsigned short&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>

      <modify-function signature="operator&lt;&lt;(qfloat16)">
          <rename to="writeFloat16"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(qfloat16&amp;)">
          <rename to="readFloat16"/>
          <modify-argument index="0">
                <replace-type modified-type="float"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    float %out = __qt_%1;
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    qfloat16 %out;
                </conversion-rule>
          </modify-argument>
      </modify-function>

      <modify-function signature="operator&lt;&lt;(bool)">
          <rename to="writeBoolean"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(bool&amp;)">
          <rename to="readBoolean"/>
          <modify-argument index="0">
                <replace-type modified-type="boolean"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool __java_return_value;
                    bool&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(signed char)">
          <rename to="writeByte"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(int)">
          <rename to="writeInt"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(short)">
          <rename to="writeShort"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(int&amp;)">
          <rename to="readInt"/>
          <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    int __java_return_value;
                    int&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(signed char&amp;)">
          <rename to="readByte"/>
          <modify-argument index="0">
                <replace-type modified-type="byte"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    signed char __java_return_value;
                    signed char&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(short&amp;)">
          <rename to="readShort"/>
          <modify-argument index="0">
                <replace-type modified-type="short"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    short __java_return_value;
                    short&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(char &amp;*)">
          <rename to="readString"/>
          <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    jstring %out = nullptr;
                    if(__qt_%1){
                        %out = %env->NewStringUTF(__qt_%1);
                        delete[] __qt_%1;
                    }
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    char* %out = nullptr;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(const char*)">
          <rename to="writeString"/>
          <modify-argument index="0" replace-value="this"/>
          <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
          </modify-argument>
      </modify-function>
        <modify-function signature="unsetDevice()" until="5.*">
            <inject-code position="end">
                __rcDevice = null;
            </inject-code>
        </modify-function>
      <modify-function signature="QDataStream(QByteArray*,QFlags&lt;QIODevice::OpenModeFlag&gt;)" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <no-null-pointer/>
                <reference-count action="set" variable-name="__rcDevice"/>
                <conversion-rule class="native">
                    QByteArray* %out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                </conversion-rule>
            </modify-argument>
      </modify-function>
      <modify-function signature="QDataStream(QByteArray*,QFlags&lt;QIODeviceBase::OpenModeFlag&gt;)" since="6.0.0">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <no-null-pointer/>
                <reference-count action="set" variable-name="__rcDevice"/>
                <conversion-rule class="native">
                    QByteArray* %out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                </conversion-rule>
            </modify-argument>
      </modify-function>

        <modify-function signature="readRawData(char*,int)" rename="readBytes">
            <modify-argument index="1">
                <array-type length-parameter="2"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>
        <modify-function signature="writeRawData(const char*,int)" rename="writeBytes">
            <modify-argument index="1">
                <array-type length-parameter="2"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>
      <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QDataStream___" quote-before-line="}// class"/>
      </inject-code>
  </object-type>

  <object-type name="QTextStream">
      <import template="Stream"/>
      <modify-function signature="operator&lt;&lt;(char)">
          <rename to="writeByte"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(signed int)">
          <rename to="writeInt"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(signed short)">
          <rename to="writeShort"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(QChar)">
          <rename to="writeChar"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(QChar&amp;)">
          <rename to="readChar"/>
          <modify-argument index="0">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    jchar %out = qtjambi_cast&lt;jchar>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QChar %out;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(signed int&amp;)">
          <rename to="readInt"/>
          <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    int __java_return_value;
                    int&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(char&amp;)">
          <rename to="readByte"/>
          <modify-argument index="0">
                <replace-type modified-type="byte"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    char __java_return_value;
                    char&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(signed short&amp;)">
          <rename to="readShort"/>
          <modify-argument index="0">
                <replace-type modified-type="short"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    short __java_return_value;
                    short&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(QByteArray&amp;)">
          <rename to="readBytes"/>
          <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    jobject %out = qtjambi_cast&lt;jobject>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QByteArray %out;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(const QByteArray&amp;)">
          <rename to="writeBytes"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="operator&gt;&gt;(QString&amp;)">
          <rename to="readString"/>
          <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    jstring %out = qtjambi_from_qstring(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %out;
                </conversion-rule>
          </modify-argument>
      </modify-function>
      <modify-function signature="operator&lt;&lt;(QString)">
          <rename to="writeString"/>
          <modify-argument index="0" replace-value="this"/>
      </modify-function>
      <modify-function signature="QTextStream(QByteArray*,QFlags&lt;QIODevice::OpenModeFlag&gt;)" until="5.*">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    QByteArray* %out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                </conversion-rule>
            </modify-argument>
      </modify-function>
      <modify-function signature="QTextStream(QByteArray*,QFlags&lt;QIODeviceBase::OpenModeFlag&gt;)" since="6.0.0">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    QByteArray* %out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                </conversion-rule>
            </modify-argument>
      </modify-function>

      <modify-function signature="setCodec(const char*)" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
      </modify-function>
      <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QTextStream___" quote-before-line="}// class"/>
      </inject-code>
  </object-type>

  <object-type name="QAbstractFileEngine::ExtensionOption">
  </object-type>
  <object-type name="QAbstractFileEngine::ExtensionReturn">
  </object-type>
  <object-type name="QAbstractFileEngine::MapExtensionOption">
  </object-type>
  <object-type name="QAbstractFileEngine::UnMapExtensionOption">
    <modify-field name="address">
        <access modifier="private" />
        <rename to="address_private" />
    </modify-field>
    <inject-code>
        <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QAbstractFileEngine_UnMapExtensionOption___" quote-before-line="}// class"/>
    </inject-code>
  </object-type>

  <object-type name="QAbstractFileEngine::MapExtensionReturn">
    <modify-field name="address">
        <access modifier="private" />
        <rename to="address_private" />
    </modify-field>
    <inject-code>
        <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QAbstractFileEngine_MapExtensionReturn___" quote-before-line="}// class"/>
    </inject-code>
  </object-type>

  <object-type name="QFileDevice">
    <extra-includes>
        <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
    </extra-includes>
    <modify-function signature="map(long long, long long, QFileDevice::MemoryMapFlags)" until="5.*">
        <modify-argument index="0">
            <replace-type modified-type="java.nio.ByteBuffer" />
            <conversion-rule class="native">
            jobject %out = %in ? %env->NewDirectByteBuffer(%in, qMin(%2, jlong(__qt_this->size())-%1)) : nullptr;
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function signature="map(long long, long long, QFlags&lt;QFileDevice::MemoryMapFlag>)" since="6.0.0">
        <modify-argument index="0">
            <replace-type modified-type="java.nio.ByteBuffer" />
            <conversion-rule class="native">
            jobject %out = %in ? %env->NewDirectByteBuffer(%in, qMin(%2, jlong(__qt_this->size())-%1)) : nullptr;
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function signature="unmap(unsigned char*)">
        <modify-argument index="1">
            <replace-type modified-type="java.nio.ByteBuffer" />
            <conversion-rule class="native">
            if(!Java::Runtime::Buffer::isDirect(%env,%in)){
                JavaException::raiseIllegalArgumentException(%env, "Direct buffer expected but given buffer is indirect." QTJAMBI_STACKTRACEINFO );
                return false;
            }
            uchar* %out = %in ? reinterpret_cast&lt;uchar*>(%env->GetDirectBufferAddress(%in)) : nullptr;
            </conversion-rule>
        </modify-argument>
    </modify-function>
  </object-type>
  <object-type name="QAbstractFileEngine">
    <extra-includes>
        <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
    </extra-includes>
        <modify-function signature="cloneTo(QAbstractFileEngine*)">
            <modify-argument index="1" invalidate-after-use="yes" />
        </modify-function>
    <modify-function signature="map(long long, long long, QFileDevice::MemoryMapFlags)" until="5.*">
        <modify-argument index="0">
            <replace-type modified-type="java.nio.ByteBuffer" />
            <conversion-rule class="native">
            jobject %out = %in ? %env->NewDirectByteBuffer(%in, qMin(%2, jlong(__qt_this->size())-%1)) : nullptr;
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function signature="map(long long, long long, QFlags&lt;QFileDevice::MemoryMapFlag>)" since="6.0.0">
        <modify-argument index="0">
            <replace-type modified-type="java.nio.ByteBuffer" />
            <conversion-rule class="native">
            jobject %out = %in ? %env->NewDirectByteBuffer(%in, qMin(%2, jlong(__qt_this->size())-%1)) : nullptr;
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function signature="unmap(unsigned char*)">
        <modify-argument index="1">
            <replace-type modified-type="java.nio.ByteBuffer" />
            <conversion-rule class="native">
            if(!Java::Runtime::Buffer::isDirect(%env,%in)){
                JavaException::raiseIllegalArgumentException(%env, "Direct buffer expected but given buffer is indirect." QTJAMBI_STACKTRACEINFO );
                return false;
            }
            uchar* %out = %in ? reinterpret_cast&lt;uchar*>(%env->GetDirectBufferAddress(%in)) : nullptr;
            </conversion-rule>
        </modify-argument>
    </modify-function>
    <modify-function signature="read(char *, long long)">
        <modify-argument index="0">
            <replace-type modified-type="int"/>
            <conversion-rule class="shell">
                    qint64 %out = qint64(%in);
                    while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                        %2 -= INT_MAX;
                        %1 = &amp;%1[INT_MAX];
                        CharPointerArray %1_buffer2(%env, %1, jsize(qMin(qint64(INT_MAX), %2)));
                        %in = %env->CallIntMethod(__java_this, method_id, %1_buffer2.array());
                        %out += %in;
                    }
            </conversion-rule>
            <conversion-rule class="native">
                jint %out = jint(%in);
            </conversion-rule>
        </modify-argument>
        <modify-argument index="1">
            <replace-type modified-type="byte[]"/>
            <conversion-rule class="shell">
                jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, jsize(qMin(qint64(INT_MAX), %2)));
            </conversion-rule>
            <conversion-rule class="native">
                jsize %2 = 0;
                char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument/>
        </modify-argument>
    </modify-function>
    <modify-function signature="readLine(char *, long long)">
        <modify-argument index="0">
            <replace-type modified-type="int"/>
            <conversion-rule class="shell">
                    qint64 %out = qint64(%in);
                    while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                        %2 -= INT_MAX;
                        %1 = &amp;%1[INT_MAX];
                        CharPointerArray __%1(%env, %1, jsize(qMin(qint64(INT_MAX), %2)));
                        %in = %env->CallIntMethod(__java_this, method_id, __%1.array());
                        %out += %in;
                    }
            </conversion-rule>
            <conversion-rule class="native">
                jint %out = jint(%in);
            </conversion-rule>
        </modify-argument>
        <modify-argument index="1">
            <replace-type modified-type="byte[]"/>
            <conversion-rule class="shell">
                jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, jsize(qMin(qint64(INT_MAX), %2)));
            </conversion-rule>
            <conversion-rule class="native">
                jsize %2 = 0;
                char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument/>
        </modify-argument>
    </modify-function>
    <modify-function signature="write(const char *, long long)">
        <modify-argument index="0">
            <replace-type modified-type="int"/>
            <conversion-rule class="shell">
                    qint64 %out = qint64(%in);
                    while(%2 > INT_MAX &amp;&amp; %in == INT_MAX){
                        %2 -= INT_MAX;
                        %1 = &amp;%1[INT_MAX];
                        j%2 = jsize(qMin(qint64(INT_MAX), %2));
                        ConstCharPointerArray __%1(%env, %1, j%2);
                        %in = %env->CallIntMethod(__java_this, method_id, __%1.array());
                        %out += %in;
                    }
            </conversion-rule>
            <conversion-rule class="native">
                jint %out = jint(%in);
            </conversion-rule>
        </modify-argument>
        <modify-argument index="1">
            <replace-type modified-type="byte[]"/>
            <conversion-rule class="shell">
                jsize j%2 = jsize(qMin(qint64(INT_MAX), %2));
                jbyteArray %out = qtjambi_array_cast&lt;jbyteArray>(%env, %scope, %in, j%2);
            </conversion-rule>
            <conversion-rule class="native">
                jsize %2 = 0;
                char * %out = qtjambi_array_cast&lt;char *>(%env, %scope, jbyteArray(%in), %2);
            </conversion-rule>
        </modify-argument>
        <modify-argument index="2">
            <remove-argument/>
        </modify-argument>
    </modify-function>
  </object-type>
  <object-type name="QDirIterator" implements="Iterable&lt;String>, java.util.Iterator&lt;String>">
    <inject-code>
        <insert-template name="core.self_iterator">
            <replace from="%ELEMENT_TYPE" to="String"/>
        </insert-template>
    </inject-code>
  </object-type>
  <value-type name="QRegularExpressionMatchIterator" implements="Iterable&lt;QRegularExpressionMatch>, java.util.Iterator&lt;QRegularExpressionMatch>">
    <inject-code>
        <insert-template name="core.self_iterator">
            <replace from="%ELEMENT_TYPE" to="QRegularExpressionMatch"/>
        </insert-template>
    </inject-code>
  </value-type>
  <object-type name="QAbstractFileEngineIterator" implements="Iterable&lt;String>, java.util.Iterator&lt;String>">
    <inject-code>
        <insert-template name="core.self_iterator">
            <replace from="%ELEMENT_TYPE" to="String"/>
        </insert-template>
    </inject-code>
  </object-type>

  <namespace-type name="QtFuture">
    <inject-code class="java">
        <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QtFuture___" quote-before-line="}// class"/>
        <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QtFuture_6_1__" quote-before-line="}// class" since="6.1.0"/>
        <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QtFuture_6_3__" quote-before-line="}// class" since="6.3.0"/>
    </inject-code>
  </namespace-type>
      <value-type name="QFutureInterfaceBase">
        <modify-function signature="waitForFinished()">
            <inject-code class="native" position="beginning">
                qtjambi_exception_handler(%env, __qt_this, [](void* ptr){
                QFutureInterfaceBase *__qt_this = reinterpret_cast&lt;QFutureInterfaceBase *>(ptr);
            </inject-code>
            <inject-code class="native" position="end">
                });
            </inject-code>
        </modify-function>
        <modify-function signature="setContinuation(std::function&lt;void(const QFutureInterfaceBase &amp;)>)" since="6.0.0">
            <modify-argument index="1">
                <replace-type modified-type="java.util.function.Consumer&lt;QFutureInterfaceBase>"/>
                <conversion-rule class="native">
                    <insert-template name="core.comsumer.function">
                        <replace from="%TYPE" to="const QFutureInterfaceBase &amp;"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setThreadPool(QThreadPool*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcThreadPool" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setRunnable(QRunnable*)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QRunnable" />
                <conversion-rule class="native">
                    QRunnable* %out = qtjambi_cast&lt;QRunnable*>(%env, %in);
                    if(%out &amp;&amp; %out->autoDelete())
                        qtjambi_set_cpp_ownership(%env, %in);
                </conversion-rule>
                <reference-count action="set" variable-name="__rcRunnable" />
            </modify-argument>
        </modify-function>
        <modify-function signature="reportFinished()" access="non-final"/>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QFutureInterfaceBase___" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="native">
            const std::type_info&amp; typeid_QFutureInterfaceBase_shell(){
                return typeid(QFutureInterfaceBase_shell);
            }
        </inject-code>
    </value-type>

    <object-type name="QFutureWatcherBase">
        <modify-function signature="waitForFinished()">
            <inject-code class="native" position="beginning">
                qtjambi_exception_handler(%env, __qt_this, [](void* ptr){
                QFutureWatcherBase *__qt_this = reinterpret_cast&lt;QFutureWatcherBase *>(ptr);
            </inject-code>
            <inject-code class="native" position="end">
                });
            </inject-code>
        </modify-function>
        <modify-function signature="futureInterface()">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QFutureInterfaceBase" />
                <no-null-pointer/>
                <conversion-rule class="shell">
                    QFutureInterfaceBase* %out = qtjambi_cast&lt;QFutureInterfaceBase*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="futureInterface() const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QFutureInterfaceBase" />
                <no-null-pointer/>
                <conversion-rule class="shell">
                    const QFutureInterfaceBase* %out = qtjambi_cast&lt;const QFutureInterfaceBase*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QXmlStreamReader">
        <modify-function signature="setDevice(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="QXmlStreamReader(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="clear()">
            <inject-code class="java" position="end">
                __rcDevice = null; // clear() call removes device from stream
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QXmlStreamWriter">
        <!--inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QXmlStreamWriter___" quote-before-line="}// class"/>
        </inject-code-->
        <modify-function signature="QXmlStreamWriter(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="QXmlStreamWriter(QByteArray *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <no-null-pointer/>
                <reference-count action="set" variable-name="__rcDevice"/>
                <conversion-rule class="native">
                    QByteArray* %out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="setCodec(const char *)" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="setCodec(QTextCodec*)" until="5.*">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcCodec"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setDevice(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QRegExp">
    </value-type>
    <value-type name="QRegularExpression">
    </value-type>
    <value-type name="QRegularExpressionMatch">
    </value-type>
    <value-type name="QUrlQuery">
    </value-type>
    
    <!-- This is a work-around for QUrl::FormattingOptions being a QUrlTwoFlags -->
    <primitive-type name="QUrl::FormattingOptions" preferred-conversion="no" java-name="int" jni-name="jint"/>
    <value-type name="QCalendar">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QCalendar___" quote-before-line="}// class"/>
        </inject-code>
    </value-type>
    <value-type name="QUrl">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QUrl___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="toStringList(const QList&lt;QUrl&gt; &amp;,QUrl::FormattingOptions)" access="private">
            <modify-argument index="2">
                <replace-type modified-type="int"/>
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="toDisplayString(QUrl::FormattingOptions) const" access="private">
            <modify-argument index="1" >
                <replace-type modified-type="int"/>
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="toEncoded(QUrl::FormattingOptions) const" access="private">
            <modify-argument index="1">
                <replace-type modified-type="int"/>
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="url(QUrl::FormattingOptions) const" access="private">
            <modify-argument index="1">
                <replace-type modified-type="int"/>
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="toString(QUrl::FormattingOptions) const" access="private">
            <modify-argument index="1">
                <replace-type modified-type="int"/>
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
    </value-type>
    <object-type name="QSignalTransition">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QSignalTransition___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="QSignalTransition(const QObject *, const char *, QState *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="java" position="beginning"><argument-map index="2" meta-name="signal"/><argument-map index="1" meta-name="sender"/>
                if(signal!=null &amp;&amp; !signal.startsWith("2")){
                    io.qt.core.QMetaMethod method = sender.metaObject().method(signal);
                    if(method!=null &amp;&amp; method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal) {
                        signal = "2" + method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="setSignal(const QByteArray &amp;)">
            <inject-code class="java" position="beginning"><argument-map index="1" meta-name="signal"/>
                if(signal!=null &amp;&amp; !signal.startsWith("2")){
                    io.qt.core.QMetaMethod method = senderObject().metaObject().method(signal.toString());
                    if(method!=null &amp;&amp; method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal) {
                        signal = new io.qt.core.QByteArray("2");
                        signal.append(method.cppMethodSignature());
                    }
                }
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QState">
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QState___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="addTransition(const QObject *, const char *, QAbstractState *)">
            <modify-argument index="1">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="3">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code class="java" position="beginning"><argument-map index="2" meta-name="signal"/><argument-map index="1" meta-name="sender"/>
                if(signal==null || signal.isEmpty())
                    return null;
                if(!signal.startsWith("2")){
                    io.qt.core.QMetaMethod method = sender.metaObject().method(signal);
                    if(method!=null &amp;&amp; method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal) {
                        signal = "2" + method.cppMethodSignature();
                    }
                }
            </inject-code>
            <inject-code class="java" position="end"><argument-map index="0" meta-name="%0"/><argument-map index="3" meta-name="%3"/>
                QtJambi_LibraryUtilities.internal.addReferenceCount(%0, QAbstractTransition.class, "__rcTargetStates", false, false, %3);
            </inject-code>
        </modify-function>
        <modify-function signature="addTransition(QAbstractState*)">
            <modify-argument index="1">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code class="java" position="end"><argument-map index="0" meta-name="%0"/><argument-map index="1" meta-name="%1"/>
                QtJambi_LibraryUtilities.internal.addReferenceCount(%0, QAbstractTransition.class, "__rcTargetStates", false, false, %1);
            </inject-code>
        </modify-function>
        <modify-function signature="assignProperty(QObject *, const char *, const QVariant &amp;)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <inject-code class="java">
        </inject-code>
    </object-type>
    <object-type name="QHistoryState">
        <modify-function signature="setDefaultState(QAbstractState*)">
            <modify-argument index="1">
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code class="java" position="end"><argument-map index="0" meta-name="%0"/><argument-map index="1" meta-name="%1"/>
                QtJambi_LibraryUtilities.internal.addReferenceCount(defaultTransition(), QAbstractTransition.class, "__rcTargetStates", false, false, %1);
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QStandardPaths">
        <modify-function signature="findExecutable(const QString &amp;, const QStringList &amp;)">
            <modify-argument index="2">
                    <replace-default-expression with="new java.util.ArrayList&lt;String>()"/>
                </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QJsonDocument">
        <extra-includes>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QJsonDocument___" quote-before-line="}// class"/>
        </inject-code>
        <inject-code until="5.*">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QJsonDocument_5__" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="rawData(int*)const" until="5.*">
            <modify-argument index="0">
                <replace-type modified-type="byte[]"/>
                <conversion-rule class="native">
                    jbyteArray %out = %env->NewByteArray(%1);
                    %env->SetByteArrayRegion(%out, 0, %1, reinterpret_cast&lt;const jbyte *>(%in));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                int %in = 0;
                int* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="fromJson(const QByteArray &amp;, QJsonParseError *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QJsonParseError error;
                    QJsonParseError* %out = &amp;error;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QJsonDocument$FromJsonResult"/>
                <conversion-rule class="native">
                    jobject %out = Java::QtCore::QJsonDocument$FromJsonResult::newInstance(%env, qtjambi_cast&lt;jobject>(%env, %in), qtjambi_cast&lt;jobject>(%env, error));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="fromRawData(const char *, int, QJsonDocument::DataValidation)" until="5.*">
            <modify-argument index="1">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    int %out = %in>=0 ? qMin(int(%in), int(__qt_%1_buffer.size())) : int(__qt_%1_buffer.size());
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QJsonObject">
        <modify-function signature="fromVariantMap(const QMap&lt;QString,QVariant> &amp;)">
            <modify-argument index="1">
                <replace-type modified-type="java.util.NavigableMap&lt;java.lang.String, java.lang.Object>"/>
            </modify-argument>
        </modify-function>
    </value-type>

    <value-type name="QLineF">
        <modify-function signature="intersect(QLineF,QPointF*)const" until="5.*">
            <modify-argument index="2">
                <replace-type modified-type="io.qt.core.QPointF"/>
                <conversion-rule class="native">
                    QPointF* %out = qtjambi_cast&lt;QPointF*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="intersects(QLineF,QPointF*)const" since="5.14.0">
            <modify-argument index="2">
                <replace-type modified-type="io.qt.core.QPointF"/>
                <conversion-rule class="native">
                    QPointF* %out = qtjambi_cast&lt;QPointF*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>

    <functional-type name="QFunctionPointer">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QFunctionPointer__" quote-before-line="}// class"/>
        </inject-code>
    </functional-type>
    <object-type name="QLibrary">
        <modify-function signature="resolve(const char *)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="resolve(const QString &amp;, const char *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="resolve(const QString &amp;, int, const char *)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="resolve(const QString &amp;, const QString &amp;, const char *)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QLibraryInfo">
        <modify-function signature="build()">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QLockFile">
        <extra-includes>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QLockFile__" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="getLockInfo(long long *, QString *, QString *) const">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    long long pid(0);
                    long long* %out = &amp;pid;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString hostname;
                    QString* %out = &amp;hostname;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    QString appname;
                    QString* %out = &amp;appname;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QLockFile$LockInfo"/>
                <conversion-rule class="native">
                    jobject %out = %in ? Java::QtCore::QLockFile$LockInfo::newInstance(%env, jlong(pid), qtjambi_cast&lt;jstring>(%env, hostname), qtjambi_cast&lt;jstring>(%env, appname)) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QMessageAuthenticationCode">
        <modify-function signature="addData(const char *, int)" until="5.*">
            <modify-argument index="1">
                <array-type length-parameter="2" as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addData(const char *, qsizetype)" since="6.0.0">
            <modify-argument index="1">
                <array-type length-parameter="2" as-buffer="yes"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
            </modify-argument>
        </modify-function>
        <inject-code>
        @io.qt.QtUninvokable
        public final void addData(byte[] array){
            addData(java.nio.ByteBuffer.wrap(array));
        }
        </inject-code>
    </object-type>
    <object-type name="QAbstractTransition">
        <modify-function signature="setTargetState(QAbstractState*)">
            <modify-argument index="1">
                <reference-count action="clear-add" variable-name="__rcTargetStates" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setTargetStates(const QList&lt;QAbstractState*&gt;&amp;)">
            <modify-argument index="1">
                <reference-count action="clear-add-all" variable-name="__rcTargetStates" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QPropertyAnimation">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QPropertyAnimation__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <interface-type name="QRunnable" implements="Runnable">
        <inject-code class="interface">
            public static QRunnable of(Runnable runnable) {
                if(runnable instanceof QRunnable) {
                    return (QRunnable)runnable;
                }else if(runnable==null){
                    return null;
                }else {
                    return runnable::run;
                }
            }
        </inject-code>
    </interface-type>
    <object-type name="QThreadPool">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_jobjectwrapper.h" location="global"/>
            <include file-name="qtjambi_core_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="start(QRunnable *, int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.Runnable" />
                <conversion-rule class="native">
                    JObjectWrapper __wrapper_%in(%env, %in);
                    std::function&lt;void()> %out = [__wrapper_%in](){
                                                        try{
                                                            if(JNIEnv * env = qtjambi_current_environment()){
                                                                QTJAMBI_JNI_LOCAL_FRAME(env, 300)
                                                                QtJambiExceptionInhibitor __exnHandler;
                                                                jobject object = env->NewLocalRef(__wrapper_runnable0.object());
                                                                try{
                                                                    Java::Runtime::Runnable::run(env, object);
                                                                }catch(const JavaException&amp; exn){
                                                                    __exnHandler.handle(env, exn, "QRunnable::run()");
                                                                }
                                                                if(Java::QtCore::QRunnable::isInstanceOf(env, object)){
                                                                    if(QRunnable* runnable = qtjambi_cast&lt;QRunnable*>(env, object)){
                                                                        if(runnable->autoDelete())
                                                                            delete runnable;
                                                                    }
                                                                }
                                                            }
                                                        }catch(...){}
                                                    };
                </conversion-rule>
                <reference-count action="set" variable-name="__rcRunnable" />
            </modify-argument>
        </modify-function>
        <modify-function signature="tryStart(QRunnable *)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.Runnable" />
                <conversion-rule class="native">
                    JObjectWrapper __wrapper_%in(%env, %in);
                    std::function&lt;void()> %out = [__wrapper_%in](){
                                                        try{
                                                            if(JNIEnv * env = qtjambi_current_environment()){
                                                                QTJAMBI_JNI_LOCAL_FRAME(env, 300)
                                                                QtJambiExceptionInhibitor __exnHandler;
                                                                jobject object = env->NewLocalRef(__wrapper_runnable0.object());
                                                                try{
                                                                    Java::Runtime::Runnable::run(env, object);
                                                                }catch(const JavaException&amp; exn){
                                                                    __exnHandler.handle(env, exn, "QRunnable::run()");
                                                                }
                                                                if(Java::QtCore::QRunnable::isInstanceOf(env, object)){
                                                                    if(QRunnable* runnable = qtjambi_cast&lt;QRunnable*>(env, object)){
                                                                        if(runnable->autoDelete())
                                                                            delete runnable;
                                                                    }
                                                                }
                                                            }
                                                        }catch(...){}
                                                    };
                </conversion-rule>
                <reference-count action="set" variable-name="__rcRunnable" />
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QDeadlineTimer">
        <modify-function signature="operator+=(long long)" rename="addMSecs">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDeadlineTimer" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator-=(long long)" rename="subtractMSecs">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDeadlineTimer" />
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QVersionNumber">
        <modify-function signature="fromString(const QString &amp;, int *)" since="5.10.0">
            <modify-argument index="2">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QBitArray">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QBitArray___" quote-before-line="}// class"/>
        </inject-code>
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="operator&amp;=(QBitArray)" rename="and">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QBitArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator=(QBitArray)" rename="set">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QBitArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator^=(QBitArray)" rename="xor">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QBitArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator|=(QBitArray)"  rename="or">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QBitArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator~()const" rename="inverted">
            <modify-argument index="0" replace-value="this">
                <replace-type modified-type="io.qt.core.QBitArray"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="bits()const">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.ByteBuffer"/>
                <conversion-rule class="native">
                    jobject %out = %env->NewDirectByteBuffer(const_cast&lt;char*>(%in), jlong(__qt_this->size())/8 + ( jlong(__qt_this->size()) % 8 == 0 ? 0 : 1 ));
                    %out = Java::Runtime::ByteBuffer::asReadOnlyBuffer(%env, %out);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="fromBits(const char *, qsizetype)" since="5.10.0">
            <modify-argument index="1">
                <replace-type modified-type="java.nio.Buffer"/>
                <conversion-rule class="native">
                    JBufferConstData %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    qsizetype %out = qMin&lt;qsizetype>(%in, __qt_%1.size()*8);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="toUInt32(QSysInfo::Endian,bool *)const" rename="toInteger" since="6.0.0">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Integer"/>
                <conversion-rule class="native">
                    jobject %out = ok ? qtjambi_cast&lt;jobject>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok = false;
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QXmlStreamAttributes">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QXmlStreamAttributes___" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="native" position="beginning">
        bool operator&lt;(const QXmlStreamAttribute&amp; lhs, const QXmlStreamAttribute&amp; rhs)
        {
            return qHash(lhs) &lt; qHash(rhs);
        }
        namespace QtJambiPrivate{
            template&lt;>
            struct supports_less_than&lt;QXmlStreamAttributes> : std::false_type{};
            template&lt;>
            struct supports_stream_operators&lt;QXmlStreamAttributes> : std::false_type{};
            template&lt;>
            struct supports_debugstream&lt;QXmlStreamAttributes> : std::false_type{};
        }
        </inject-code>
    </value-type>
    <value-type name="QModelRoleData">
        <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QModelRoleData___" quote-before-line="}// class"/>
        </inject-code>
    </value-type>
    <value-type name="QMetaType">
        <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QMetaType___" quote-before-line="}// class"/>
        </inject-code>
        <inject-code since="6.0.0">
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QMetaType_6__" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="type(const char *)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="typeName(int)">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="name()const" since="6.0.0">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QMetaMethod">
        <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QMetaMethod___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="typeName()const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="tag()const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="name()const">
            <inject-code class="native">
                if(const QHash&lt;int,const char*>* _renamedMethods = renamedMethods(__qt_this->enclosingMetaObject())){
                    if(const char* newName = (*_renamedMethods)[__qt_this->methodIndex()])
                        return qtjambi_cast&lt;jobject>(__jni_env, QByteArray(newName));
                }
            </inject-code>
            <modify-argument index="0">
                <conversion-rule class="native">
                    %in.detach();
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QMetaProperty">
        <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QMetaProperty___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="name()const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="typeName()const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QMetaEnum">
        <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QMetaEnum___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="enumName()const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="name()const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="scope()const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="key(int)const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="valueToKey(int)const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyToValue(const char *, bool *)const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Integer"/>
                <conversion-rule class="native">
                    jobject %out = ok ? qtjambi_cast&lt;jobject>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keysToValue(const char *, bool *)const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Integer"/>
                <conversion-rule class="native">
                    jobject %out = ok ? qtjambi_cast&lt;jobject>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>
    <namespace-type name="Qt">
        <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class Qt___" quote-before-line="}// class"/>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class Qt_56__" quote-before-line="}// class" since="5.6.0" until="6.5.*"/>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class Qt_66__" quote-before-line="}// class" since="6.6.0"/>
        </inject-code>
    </namespace-type>
    <value-type name="QCborValue" since="5.12.0">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QCborValue_java__" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="tag(QCborTag) const">
            <modify-argument index="1">
                <replace-default-expression with="QCborTag.resolve(-1)"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="fromCbor(const QByteArray &amp;, QCborParserError *)">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QCborParserError %in;
                    QCborParserError* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QCborValue$FromCborResult"/>
                <conversion-rule class="native">
                    jobject %out = Java::QtCore::QCborValue$FromCborResult::newInstance(%env, qtjambi_cast&lt;jobject>(%env, %in), qtjambi_cast&lt;jobject>(%env, %2));
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.util.concurrent.atomic.AtomicReference&lt;QCborParserError>"/>
                <conversion-rule class="native">
                    <insert-template name="core.AtomicReference_to_ptr">
                        <replace from="%TYPE" to="QCborParserError"/>
                    </insert-template>
                </conversion-rule>
                <conversion-rule class="shell">
                    <insert-template name="core.ptr_to_AtomicReference">
                        <replace from="%TYPE" to="QCborParserError"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QCborArray" since="5.12.0">
      <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QCborArray_java__" quote-before-line="}// class"/>
      </inject-code>
    </value-type>
    <value-type name="QCborMap" since="5.12.0">
      <modify-function signature="insert(QString,QCborValue)">
        <modify-argument index="return" replace-value="this">
            <replace-type modified-type="io.qt.core.QCborMap" />
        </modify-argument>
      </modify-function>
      <modify-function signature="insert(long long,QCborValue)">
        <modify-argument index="return" replace-value="this">
            <replace-type modified-type="io.qt.core.QCborMap" />
        </modify-argument>
      </modify-function>
      <modify-function signature="insert(QCborValue,QCborValue)">
        <modify-argument index="return" replace-value="this">
            <replace-type modified-type="io.qt.core.QCborMap" />
        </modify-argument>
      </modify-function>
      <modify-function signature="insert(QPair&lt;QCborValue,QCborValue&gt;)">
        <modify-argument index="return" replace-value="this">
            <replace-type modified-type="io.qt.core.QCborMap" />
        </modify-argument>
      </modify-function>
      <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QCborMap_java__" quote-before-line="}// class"/>
      </inject-code>
    </value-type>
    <object-type name="QPluginLoader" since="5.13.0">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="metaData() const">
            <modify-argument index="0">
                <conversion-rule class="native">
                QJsonValue iid = %in.value("IID");
                if(iid.isString()){
                    if(jclass iface = getInterfaceByIID(%env, iid.toString().toUtf8())){
                        %in.insert("interface", qtjambi_class_name(%env, iface));
                    }
                }
                jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
      <inject-code>
          <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QPluginLoader_java__" quote-before-line="}// class"/>
      </inject-code>
    </object-type>
    <value-type name="QPluginParsedMetaData" package="io.qt.core.internal" since="6.3.0">
    </value-type>
    <object-type name="QFactoryLoader" package="io.qt.core.internal" since="5.13.0">
        <extra-includes>
            <include file-name="io.qt.core.*" location="java"/>
            <include file-name="io.qt.*" location="java"/>
            <include file-name="java.lang.reflect.*" location="java"/>
            <include file-name="java.util.logging.*" location="java"/>
        </extra-includes>
        <modify-function signature="QFactoryLoader(const char *, const QString &amp;, Qt::CaseSensitivity)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.Class&lt;? extends io.qt.QtObjectInterface>"/>
                <conversion-rule class="native">
                const char* %out = getInterfaceIID(%env, jclass(%in));
                if(!%out){
                    JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Class %1 is not registered as plugin interface.").arg(qtjambi_class_name(%env, jclass(%in)))) QTJAMBI_STACKTRACEINFO);
                }
                </conversion-rule>
            </modify-argument>
            <inject-code class="java">
            <argument-map index="1" meta-name="%1"/>
            io.qt.QtUtilities.initializePackage(%1);
            </inject-code>
            <inject-code class="java" since="6.3.0">
            <argument-map index="2" meta-name="%2"/>
            if(%2==null || !%2.startsWith("/"))
                throw new IllegalArgumentException("For historical reasons, the suffix must start with '/' (and it can't be empty)");
            </inject-code>
        </modify-function>
        <modify-function signature="metaData() const">
            <modify-argument index="0">
                <conversion-rule class="native" until="6.2.*">
                for(QJsonObject&amp; obj : %in){
                    if(obj["IID"].isString()){
                        if(jclass iface = getInterfaceByIID(%env, obj["IID"].toString().toUtf8())){
                            obj["interface"] = qtjambi_class_name(%env, iface);
                        }
                    }
                }
                jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native" since="6.3.0">
                for(QPluginParsedMetaData&amp; obj : __qt_return_value){
                    QCborMap map = obj.toCbor();
                    QCborValue iid = map.value(QLatin1String("IID"));
                    if(iid.isString()){
                        if(jclass iface = getInterfaceByIID(__jni_env, iid.toString().toUtf8())){
                            map.insert(QLatin1String("interface"), qtjambi_class_name(__jni_env, iface));
                        }
                    }
                    obj.~QPluginParsedMetaData();
                    new (&amp;obj) QCborValue(map);
                }
                jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QFactoryLoader__" quote-before-line="}// class"/>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QFactoryLoader_62_" quote-before-line="}// class" until="6.2.*"/>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QFactoryLoader_63_" quote-before-line="}// class" since="6.3.0"/>
        </inject-code>
    </object-type>
    <value-type name="QStaticPlugin" target-type="final class">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QStaticPlugin_java__" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="metaData() const">
            <modify-argument index="0">
                <conversion-rule class="native">
                QJsonValue iid = %in.value("IID");
                if(iid.isString()){
                    if(jclass iface = getInterfaceByIID(%env, iid.toString().toUtf8())){
                        %in.take("IID");
                        %in.insert("interface", QJsonValue::fromVariant(QVariant::fromValue&lt;JObjectWrapper>(JObjectWrapper(%env, iface))));
                    }
                }
                jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>
    <object-type name="QSharedMemory">
        <extra-includes>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="lock()" access="private" thread-affine="no"/>
        <modify-function signature="unlock()" access="private" thread-affine="no"/>
        <modify-function signature="data()" access="private">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.ByteBuffer"/>
                <conversion-rule class="native">
                    jobject %out = %env->NewDirectByteBuffer(%in, jlong(__qt_this->size()));
                    JavaException::check(%env QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="create(int, QSharedMemory::AccessMode)" until="5.*">
            <inject-code class="java" position="end">
              if(__qt_return_value){
                  __qt_accessMode = mode;
              }
            </inject-code>
        </modify-function>
        <modify-function signature="create(qsizetype, QSharedMemory::AccessMode)" since="6.0.0">
            <inject-code class="java" position="end">
              if(__qt_return_value){
                  __qt_accessMode = mode;
              }
            </inject-code>
        </modify-function>
        <modify-function signature="attach(QSharedMemory::AccessMode)">
            <inject-code class="java" position="end">
              if(__qt_return_value){
                  __qt_accessMode = mode;
              }
            </inject-code>
        </modify-function>
        <inject-code class="java" position="beginning">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QSharedMemory_java__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QCborStreamReader" since="5.12.0">
        <extra-includes>
            <include file-name="qtjambi_biginteger.h" location="local"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QCborStreamReader_java__" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="QCborStreamReader(QIODevice *)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="isFloat16()const" remove="all"/>
        <modify-function signature="toFloat16()const" remove="all"/>
        <modify-function signature="isBool()const" rename="isBoolean"/>
        <modify-function signature="toBool()const" rename="toBoolean"/>
        <modify-function signature="setDevice(QIODevice *)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="QCborStreamReader(const char *, qsizetype)">
            <modify-argument index="1">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <inject-code>
                if(!data.isDirect()) {
                    throw new IllegalArgumentException("Can only read from direct buffers.");
                }
                __rcDevice = data;
            </inject-code>
        </modify-function>
        <modify-function signature="addData(const unsigned char *, qsizetype)">
            <modify-argument index="1">
                <array-type as-buffer="yes"/>
            </modify-argument>
            <inject-code>
                if(!data.isDirect()) {
                    throw new IllegalArgumentException("Can only read from direct buffers.");
                }
                __rcDevice = new QPair&lt;>(__rcDevice, data);
            </inject-code>
        </modify-function>
        <modify-function signature="addData(const char *, qsizetype)" remove="all"/>
        <modify-function signature="isUnsignedInteger()const" rename="isBigInteger">
            <inject-code class="native" position="beginning">
                if(__qt_this->isNegativeInteger()){
                    return true;
                }
            </inject-code>
        </modify-function>
        <modify-function signature="toFloat()const">
            <inject-code class="native" position="beginning">
                if(__qt_this->isFloat16()){
                    return jfloat(__qt_this->toFloat16());
                }
            </inject-code>
        </modify-function>
        <modify-function signature="isFloat()const">
            <inject-code class="native" position="beginning">
                if(__qt_this->isFloat16()){
                    return true;
                }
            </inject-code>
        </modify-function>
        <modify-function signature="toUnsignedInteger()const" rename="toBigInteger">
            <modify-argument index="0">
                <replace-type modified-type="java.math.BigInteger"/>
                <conversion-rule class="native">
                    jobject %out = toBigInteger(%env, %in, false);
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="beginning">
                if(__qt_this->isNegativeInteger()){
                    return toBigInteger(%env, quint64(__qt_this->toNegativeInteger()), true);
                }
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QCborStreamWriter" since="5.12.0">
        <extra-includes>
            <include file-name="qtjambi_biginteger.h" location="local"/>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="append(const char *, qsizetype)">
            <modify-argument index="1">
                <array-type length-parameter="2"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="append(unsigned long long)">
            <modify-argument index="1">
                <replace-type modified-type="java.math.BigInteger"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    BigIntegerValue bigIntegerValue = fromBigInteger(%env, %in);
                    if(bigIntegerValue.outOfRange){
                        Java::Runtime::ArithmeticException::throwNew(%env, "BigInteger is out of range of 64 Bit." QTJAMBI_STACKTRACEINFO );
                        return;
                    }
                    if(bigIntegerValue.isNegative){
                        __qt_this->append(QCborNegativeInteger(bigIntegerValue.value));
                        return;
                    }
                    quint64 %out = bigIntegerValue.value;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="appendByteString(const char *, qsizetype)" rename="append">
            <modify-argument index="1">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="QCborStreamWriter(QByteArray *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    QByteArray* %out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                </conversion-rule>
                <reference-count action="set" variable-name="__rcDevice"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QAbstractEventDispatcher">
        <modify-function signature="registerSocketNotifier(QSocketNotifier *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" variable-name="__rcSocketNotifier"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="unregisterSocketNotifier(QSocketNotifier *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="remove" variable-name="__rcSocketNotifier"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="unregisterTimer(int)" thread-affine="yes">
        </modify-function>
        <modify-function signature="unregisterTimers(QObject*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes"/>
        </modify-function>
        <modify-function signature="registerTimer(int, Qt::TimerType, QObject*)" thread-affine="yes" until="5.*">
            <modify-argument index="3" thread-affine="yes"/>
          <inject-code class="java" position="beginning">
            <argument-map index="1" meta-name="%1"/>
            if(%1 &lt; 0){
                throw new IllegalArgumentException("Timers cannot have negative intervals.");
            }
          </inject-code>
        </modify-function>
        <modify-function signature="registerTimer(long long, Qt::TimerType, QObject*)" thread-affine="yes" since="6.0.0">
            <modify-argument index="3" thread-affine="yes"/>
          <inject-code class="java" position="beginning">
            <argument-map index="1" meta-name="%1"/>
            if(%1 &lt; 0){
                throw new IllegalArgumentException("Timers cannot have negative intervals.");
            }
          </inject-code>
        </modify-function>
        <modify-function signature="registerTimer(int, int, Qt::TimerType, QObject*)" thread-affine="yes" until="5.*">
            <modify-argument index="4" thread-affine="yes"/>
          <inject-code class="java" position="beginning">
            <argument-map index="2" meta-name="%2"/>
            if(%2 &lt; 0){
                throw new IllegalArgumentException("Timers cannot have negative intervals.");
            }
          </inject-code>
        </modify-function>
        <modify-function signature="registerTimer(int, long long, Qt::TimerType, QObject*)" thread-affine="yes" since="6.0.0">
            <modify-argument index="4" thread-affine="yes"/>
          <inject-code class="java" position="beginning">
            <argument-map index="2" meta-name="%2"/>
            if(%2 &lt; 0){
                throw new IllegalArgumentException("Timers cannot have negative intervals.");
            }
          </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QSocketNotifier">
      <modify-function signature="setEnabled(bool)" thread-affine="yes">
      </modify-function>
    </object-type>
    <object-type name="QResource">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QResource__" quote-before-line="}// class"/>
        </inject-code>
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <inject-code class="java" position="beginning">
            private static final java.util.List&lt;java.nio.ByteBuffer> registeredBuffers = new java.util.ArrayList&lt;>();
        </inject-code>
        <modify-function signature="data()const">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.ByteBuffer"/>
                <conversion-rule class="native">
                    jobject %out = %env->NewDirectByteBuffer(const_cast&lt;char*>(reinterpret_cast&lt;const char*>(%in)), jlong(__qt_this->size()));
                    %out = Java::Runtime::ByteBuffer::asReadOnlyBuffer(%env, %out);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="registerResource(const unsigned char *, const QString &amp;)">
            <inject-code class="java" position="beginning">
                <argument-map index="1" meta-name="%1"/>
                if(!%1.isDirect()){
                    throw new IllegalArgumentException("Only direct buffers allowed.");
                }
            </inject-code>
            <inject-code class="java" position="end">
                <argument-map index="0" meta-name="%0"/>
                <argument-map index="1" meta-name="%1"/>
                if(%0){
                    registeredBuffers.add(%1);
                }
            </inject-code>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.ByteBuffer"/>
                <conversion-rule class="native">
                    const unsigned char * %out = reinterpret_cast&lt;const unsigned char *>(%env->GetDirectBufferAddress(%in));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="unregisterResource(const unsigned char *, const QString &amp;)">
            <inject-code class="java" position="beginning">
                <argument-map index="1" meta-name="%1"/>
                if(!%1.isDirect()){
                    throw new IllegalArgumentException("Only direct buffers allowed.");
                }
            </inject-code>
            <inject-code class="java" position="end">
                <argument-map index="0" meta-name="%0"/>
                <argument-map index="1" meta-name="%1"/>
                if(%0){
                    registeredBuffers.remove(%1);
                }
            </inject-code>
            <modify-argument index="1">
                <replace-type modified-type="java.nio.ByteBuffer"/>
                <conversion-rule class="native">
                    const unsigned char * %out = reinterpret_cast&lt;const unsigned char *>(%env->GetDirectBufferAddress(%in));
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QStringConverter">
        <modify-function signature="name() const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="QStringConverter(const char *, QFlags&lt;QStringConverterBase::Flag>)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="encodingForName(const char *)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="nameForEncoding(QStringConverter::Encoding)">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <inject-code since="6.0.0">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QStringConverter___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <value-type name="QUuid">
        <inject-code since="6.3.0">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QUuid_63__" quote-before-line="}// class"/>
        </inject-code>
    </value-type>
    <object-type name="QPropertyObserver">
        <extra-includes>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="setSource(QtPrivate::QPropertyBindingData)" access="friendly"/>
        <inject-code class="native">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QPropertyObserver_native__" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="shell-declaration" position="end">
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QPropertyObserver_shell__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QtPrivate::QBindableInterface" java-name="QBindableInterface" force-friendly="yes">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QBindableInterface__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QtPrivate::QPropertyBindingData" java-name="QPropertyBindingData" force-friendly="yes">
        <extra-includes>
            <include file-name="qtjambi_core_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="setBinding(QUntypedPropertyBinding, QUntypedPropertyData *, QtPrivate::QPropertyObserverCallback, QtPrivate::QPropertyBindingWrapper)">
            <modify-argument index="2">
                <reference-count action="ignore"/>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                QtPrivate::QPropertyObserverCallback %out = qtjambi_get_signal_callback(%env, __qt_%2);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                QtPrivate::QPropertyBindingWrapper %out = nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QUntypedBindable">
        <modify-field name="data">
            <reference-count action="ignore" />
        </modify-field>
        <modify-field name="iface">
            <reference-count action="ignore" />
        </modify-field>
        <modify-function signature="setBinding(QUntypedPropertyBinding)">
            <inject-code class="java" position="beginning"><argument-map index="1" meta-name="%1"/>
                if(iface()!=null &amp;&amp; %1!=null &amp;&amp; !io.qt.core.QProperty.checkType(iface().metaType(), %1.valueMetaType()))
                    return false;
            </inject-code>
        </modify-function>
        <modify-function signature="makeBinding(QPropertyBindingSourceLocation)" access="non-final" until="6.1">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                QPropertyBindingSourceLocation %out = QT_PROPERTY_DEFAULT_BINDING_LOCATION;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="makeBinding(QPropertyBindingSourceLocation)const" access="non-final" since="6.2.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                QPropertyBindingSourceLocation %out = QT_PROPERTY_DEFAULT_BINDING_LOCATION;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="binding()const" access="non-final"/>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QUntypedBindable_java__" quote-before-line="}// class"/>
        </inject-code>
    </value-type>
    <value-type name="QUntypedPropertyBinding">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QUntypedPropertyBinding_java__" quote-before-line="}// class"/>
        </inject-code>
    </value-type>
    <value-type name="QModelRoleDataSpan">
    </value-type>
    <object-type name="QLoggingCategory">
        <modify-function signature="QLoggingCategory(const char *, QtMsgType)" access="private">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <conversion-rule class="native">
                    QByteArray* _byte_%out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                    const char* %out = _byte_%out ? _byte_%out->data() : nullptr;
                </conversion-rule>
            </modify-argument>
            <inject-code class="java" position="end"><argument-map index="1" meta-name="%1"/>
                QtJambi_LibraryUtilities.internal.registerDependentObject(%1, this);
            </inject-code>
        </modify-function>
        <modify-function signature="QLoggingCategory(const char *)" access="private" until="5.*">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <conversion-rule class="native">
                    QByteArray* _byte_%out = qtjambi_cast&lt;QByteArray*>(%env, %in);
                    const char* %out = _byte_%out ? _byte_%out->data() : nullptr;
                </conversion-rule>
            </modify-argument>
            <inject-code class="java" position="end"><argument-map index="1" meta-name="%1"/>
                QtJambi_LibraryUtilities.internal.registerDependentObject(%1, this);
            </inject-code>
        </modify-function>
        <modify-function signature="categoryName() const">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QLoggingCategory__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QMessageLogContext">
        <modify-function signature="QMessageLogContext(const char *, int, const char *, const char *)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-field name="file" write="no">
            <replace-type modified-type="java.lang.String"/>
        </modify-field>
        <modify-field name="function" write="no">
            <replace-type modified-type="java.lang.String"/>
        </modify-field>
        <modify-field name="category" write="no">
            <replace-type modified-type="java.lang.String"/>
        </modify-field>
        <modify-field name="line" write="no"/>
        <modify-field name="version" read="no" write="no"/>
    </object-type>
    <object-type name="QRandomGenerator">
        <modify-function signature="securelySeeded()">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QRandomGenerator"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    jobject %out = qtjambi_from_object(%env, new QRandomGenerator(%in), false, false);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QDebugStateSaver" implements="java.lang.AutoCloseable">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class autoclosedelete" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="QDebugStateSaver(QDebug&amp;)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.core.QDebug"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    QDebug* _%out = qtjambi_cast&lt;QDebug*>(%env, %in);
                    QDebug&amp; %out = *_%out;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QDebug" implements="java.lang.AutoCloseable">
        <inject-code>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class autoclosedelete" quote-before-line="}// class"/>
            <import-file name="typesystem/java/typesystem_core-java.java" quote-after-line="class QDebug___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="QDebug(QIODevice *)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevice"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="QDebug(QDebug)">
            <inject-code>
                __rcDevice = o.__rcDevice;
            </inject-code>
        </modify-function>
        <modify-function signature="swap(QDebug&amp;)">
            <inject-code>
                Object __rcDevice = this.__rcDevice;
                this.__rcDevice = other.__rcDevice;
                other.__rcDevice = __rcDevice;
            </inject-code>
        </modify-function>
        <modify-function signature="maybeQuote(char)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="maybeSpace()">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="noquote()">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="nospace()">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(QChar)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(const char*)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(bool)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(char)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(QByteArray)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(QByteArrayView)" rename="append" since="6.0.0">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(double)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(float)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(long long)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(signed short)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(signed int)" rename="append">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="quote()">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="resetFormat()">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="space()">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
        <modify-function signature="verbosity(int)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.core.QDebug" />
            </modify-argument>
        </modify-function>
    </value-type>
<!--    <object-type name="QFSFileEngine" package="io.qt.internal.fileengine"/>
    <object-type name="QAbstractFileEngine" package="io.qt.internal.fileengine"/>
    <object-type name="QAbstractFileEngineHandler" package="io.qt.internal.fileengine"/>
    <object-type name="QAbstractFileEngineIterator" package="io.qt.internal.fileengine"/>-->
    <interface-type name="QNativeInterface::QAndroidApplication" java-name="QAndroidApplication" package="io.qt.core.nativeinterface" is-native-interface="yes">
    </interface-type>
</typesystem>
