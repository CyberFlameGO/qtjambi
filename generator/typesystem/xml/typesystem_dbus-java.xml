<?xml version="1.0"?>
<typesystem package="io.qt.dbus" module="qtjambi.dbus" default-superclass="io.qt.QtObject">
    <inject-code class="metainfo" position="1">
    void initialize_meta_info_QtDBus();
    </inject-code>
    <inject-code class="metainfo">
    initialize_meta_info_QtDBus();
    </inject-code>
    <value-type name="QDBusConnection">
        <modify-function signature="asyncCall(const QDBusMessage &amp;, int) const">
            <modify-argument index="return">
                <replace-type modified-type="io.qt.dbus.QDBusPendingCall" />
                <conversion-rule class="native">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="callWithCallback(const QDBusMessage &amp;, QObject *, const char *, const char *, int) const">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
             </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
             </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="2" meta-name="object"/>
                <argument-map index="3" meta-name="member"/>
                <argument-map index="4" meta-name="errorSlot"/>
                if(member!=null &amp;&amp; !member.startsWith("1") &amp;&amp; !member.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(member);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            member = "2" + method.cppMethodSignature();
                        else
                            member = "1" + method.cppMethodSignature();
                    }
                }
                if(errorSlot!=null &amp;&amp; !errorSlot.startsWith("1") &amp;&amp; !errorSlot.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(errorSlot);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            errorSlot = "2" + method.cppMethodSignature();
                        else
                            errorSlot = "1" + method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="callWithCallback(const QDBusMessage &amp;, QObject *, const char *, int) const">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="2" meta-name="object"/>
                <argument-map index="3" meta-name="slot"/>
                if(slot!=null &amp;&amp; !slot.startsWith("1") &amp;&amp; !slot.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(slot);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            slot = "2" + method.cppMethodSignature();
                        else
                            slot = "1" + method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="connect(const QString &amp;, const QString &amp;, const QString &amp;, const QString &amp;, QObject *, const char *)">
            <modify-argument index="6">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="5" meta-name="object"/>
                <argument-map index="6" meta-name="slot"/>
                if(slot!=null &amp;&amp; !slot.startsWith("1") &amp;&amp; !slot.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(slot);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            slot = "2" + method.cppMethodSignature();
                        else
                            slot = "1" + method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="connect(const QString &amp;, const QString &amp;, const QString &amp;, const QString &amp;, const QString &amp;, QObject *, const char *)">
            <modify-argument index="7">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="6" meta-name="object"/>
                <argument-map index="7" meta-name="slot"/>
                if(slot!=null &amp;&amp; !slot.startsWith("1") &amp;&amp; !slot.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(slot);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            slot = "2" + method.cppMethodSignature();
                        else
                            slot = "1" + method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="connect(const QString &amp;, const QString &amp;, const QString &amp;, const QString &amp;, const QStringList &amp;, const QString &amp;, QObject *, const char *)">
            <modify-argument index="8">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="7" meta-name="object"/>
                <argument-map index="8" meta-name="slot"/>
                if(slot!=null &amp;&amp; !slot.startsWith("1") &amp;&amp; !slot.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(slot);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            slot = "2" + method.cppMethodSignature();
                        else
                            slot = "1" + method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="disconnect(const QString &amp;, const QString &amp;, const QString &amp;, const QString &amp;, QObject *, const char *)">
            <modify-argument index="6">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="5" meta-name="object"/>
                <argument-map index="6" meta-name="slot"/>
                if(slot!=null &amp;&amp; !slot.startsWith("1") &amp;&amp; !slot.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(slot);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            slot = "2" + method.cppMethodSignature();
                        else
                            slot = "1" + method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="disconnect(const QString &amp;, const QString &amp;, const QString &amp;, const QString &amp;, const QString &amp;, QObject *, const char *)">
            <modify-argument index="7">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="6" meta-name="object"/>
                <argument-map index="7" meta-name="slot"/>
                if(slot!=null &amp;&amp; !slot.startsWith("1") &amp;&amp; !slot.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(slot);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            slot = "2" + method.cppMethodSignature();
                        else
                            slot = "1" + method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="disconnect(const QString &amp;, const QString &amp;, const QString &amp;, const QString &amp;, const QStringList &amp;, const QString &amp;, QObject *, const char *)">
            <modify-argument index="8">
                <replace-type modified-type="java.lang.String"/>
           </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="7" meta-name="object"/>
                <argument-map index="8" meta-name="slot"/>
                if(slot!=null &amp;&amp; !slot.startsWith("1") &amp;&amp; !slot.startsWith("2")) {
                    io.qt.core.QMetaMethod method = object.metaObject().method(slot);
                    if(method!=null &amp;&amp; method.isValid()) {
                        if(method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            slot = "2" + method.cppMethodSignature();
                        else
                            slot = "1" + method.cppMethodSignature();
                    }
                }
            </inject-code>
         </modify-function>
    </value-type>
    <value-type name="QDBusArgument">
        <inject-code class="native" position="beginning">
              void qtjambi_dbus_check_write_argument(JNIEnv *,const QDBusArgument *);
              void qtjambi_dbus_check_read_argument(JNIEnv *,const QDBusArgument *);
              bool qtjambi_dbus_is_read_argument(const QDBusArgument *);
        </inject-code>
        <modify-function signature="beginMapEntry()">
            <inject-code class="native" position="beginning">
                if(qtjambi_dbus_is_read_argument(__qt_this)){
                    const_cast&lt;const QDBusArgument *>(__qt_this)->beginMapEntry();
                    return;
                }
            </inject-code>
        </modify-function>
        <modify-function signature="beginStructure()">
            <inject-code class="native" position="beginning">
                if(qtjambi_dbus_is_read_argument(__qt_this)){
                    const_cast&lt;const QDBusArgument *>(__qt_this)->beginStructure();
                    return;
                }
            </inject-code>
        </modify-function>
        <modify-function signature="endStructure()">
            <inject-code class="native" position="beginning">
                if(qtjambi_dbus_is_read_argument(__qt_this)){
                    const_cast&lt;const QDBusArgument *>(__qt_this)->endStructure();
                    return;
                }
            </inject-code>
        </modify-function>
        <modify-function signature="endArray()">
            <inject-code class="native" position="beginning">
                if(qtjambi_dbus_is_read_argument(__qt_this)){
                    const_cast&lt;const QDBusArgument *>(__qt_this)->endArray();
                    return;
                }
            </inject-code>
        </modify-function>
        <modify-function signature="endMap()">
            <inject-code class="native" position="beginning">
                if(qtjambi_dbus_is_read_argument(__qt_this)){
                    const_cast&lt;const QDBusArgument *>(__qt_this)->endMap();
                    return;
                }
            </inject-code>
        </modify-function>
        <modify-function signature="endMapEntry()">
            <inject-code class="native" position="beginning">
                if(qtjambi_dbus_is_read_argument(__qt_this)){
                    const_cast&lt;const QDBusArgument *>(__qt_this)->endMapEntry();
                    return;
                }
            </inject-code>
        </modify-function>
        <modify-function signature="asVariant() const">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_read_argument(%env, __qt_this);
            </inject-code>
        </modify-function>
        <modify-function signature="atEnd() const">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_read_argument(%env, __qt_this);
            </inject-code>
        </modify-function>
        <modify-function signature="appendVariant(QVariant)">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
        </modify-function>
        <modify-function signature="beginArray(int)">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
        </modify-function>
        <modify-function signature="beginArray(QMetaType)" since="6.0.0">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
        </modify-function>
        <modify-function signature="beginMap(int,int)">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
        </modify-function>
        <modify-function signature="beginMap(QMetaType,QMetaType)" since="6.0.0">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(int)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(long long)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(short)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(unsigned char)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(bool)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(double)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(const QString &amp;)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(const QDBusVariant &amp;)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(const QStringList &amp;)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(const QByteArray &amp;)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(const QDBusObjectPath &amp;)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(const QDBusSignature &amp;)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator&lt;&lt;(const QDBusUnixFileDescriptor &amp;)" rename="append">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_write_argument(%env, __qt_this);
            </inject-code>
            <modify-argument index="0" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator>>(unsigned char &amp;)const" rename="extractByte">
            <inject-code class="native" position="beginning">
                qtjambi_dbus_check_read_argument(%env, __qt_this);
            </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="byte"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    jbyte __java_return_value;
                    unsigned char&amp; %out = *reinterpret_cast&lt;unsigned char*>(&amp;__java_return_value);
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(bool &amp;)const" rename="extractBoolean">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="boolean"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool __java_return_value;
                    bool&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(short &amp;)const" rename="extractShort">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="short"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    jshort __java_return_value;
                    short&amp; %out = *reinterpret_cast&lt;short*>(&amp;__java_return_value);
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(int &amp;)const" rename="extractInt">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="int"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    int __java_return_value;
                    int&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(long long &amp;)const" rename="extractLong">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="long"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    jlong __java_return_value;
                    long long&amp; %out = *reinterpret_cast&lt;long long*>(&amp;__java_return_value);
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(double &amp;)const" rename="extractDouble">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="double"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    jdouble __java_return_value;
                    double&amp; %out = __java_return_value;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(QString &amp;)const" rename="extractString">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    %out = qtjambi_cast&lt;jstring>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %out;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(QDBusVariant &amp;)const" rename="extractVariant">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="io.qt.dbus.QDBusVariant"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    %out = qtjambi_cast&lt;jobject>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QDBusVariant %out;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(QDBusObjectPath &amp;)const" rename="extractObjectPath">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="io.qt.dbus.QDBusObjectPath"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    %out = qtjambi_cast&lt;jobject>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QDBusObjectPath %out;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(QDBusSignature &amp;)const" rename="extractSignature">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="io.qt.dbus.QDBusObjectPath"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    %out = qtjambi_cast&lt;jobject>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QDBusObjectPath %out;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(QDBusUnixFileDescriptor &amp;)const" rename="extractUnixFileDescriptor">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="io.qt.dbus.QDBusUnixFileDescriptor"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    %out = qtjambi_cast&lt;jobject>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QDBusUnixFileDescriptor %out;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(QStringList &amp;)const" rename="extractStrings">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="java.util.List&lt;java.lang.String>"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    %out = qtjambi_cast&lt;jobject>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QStringList %out;
                </conversion-rule>
          </modify-argument>
        </modify-function>
        <modify-function signature="operator>>(QByteArray &amp;)const" rename="extractBytes">
          <inject-code class="native" position="beginning">
              qtjambi_dbus_check_read_argument(%env, __qt_this);
          </inject-code>
          <modify-argument index="0">
                <replace-type modified-type="io.qt.core.QByteArray"/>
                <conversion-rule class="native">
                    Q_UNUSED(__qt_return_value)
                    %out = qtjambi_cast&lt;jobject>(%env, __qt_%1);
                </conversion-rule>
          </modify-argument>
          <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QByteArray %out;
                </conversion-rule>
          </modify-argument>
        </modify-function>
    </value-type>
    <interface-type name="QDBusContext">
        <inject-code class="java" position="beginning">
            private static void checkCalledFromDBus(QDBusContext instance){
                if(!instance.calledFromDBus())
                    throw new IllegalStateException("QDBusContext has not ben called from DBus.");
            }
        </inject-code>
        <modify-function signature="connection() const">
            <inject-code class="java" position="beginning">
                QDBusContext.Impl.checkCalledFromDBus(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="message() const">
            <inject-code class="java" position="beginning">
                QDBusContext.Impl.checkCalledFromDBus(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="isDelayedReply() const">
            <inject-code class="java" position="beginning">
                QDBusContext.Impl.checkCalledFromDBus(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="setDelayedReply(bool)const">
            <inject-code class="java" position="beginning">
                QDBusContext.Impl.checkCalledFromDBus(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="sendErrorReply(const QString &amp;, const QString &amp;) const">
            <inject-code class="java" position="beginning">
                QDBusContext.Impl.checkCalledFromDBus(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="sendErrorReply(QDBusError::ErrorType, const QString &amp;) const">
            <inject-code class="java" position="beginning">
                QDBusContext.Impl.checkCalledFromDBus(%this);
            </inject-code>
        </modify-function>
    </interface-type>
    <object-type name="QDBusAbstractInterface"><!-- since 4.2, looks like interface -->
        <modify-function signature="asyncCall(const QString &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;)" remove="all" until="5.*"/>
        <modify-function signature="call(const QString &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;)" remove="all" until="5.*"/>
        <modify-function signature="call(const QString &amp;)" remove="all"/>
        <modify-function signature="call(QDBus::CallMode, const QString &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;, const QVariant &amp;)" remove="all" until="5.*"/>
        <modify-function signature="call(QDBus::CallMode, const QString &amp;)" remove="all"/>
        <modify-function signature="asyncCallWithArgumentList(const QString &amp;, const QList&lt;QVariant > &amp;)">
            <modify-argument index="return">
                    <replace-type modified-type="io.qt.dbus.QDBusPendingCall" />
                    <conversion-rule class="native">
                        %out = qtjambi_cast&lt;jobject>(%env, %in);
                    </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="QDBusAbstractInterface(const QString &amp;, const QString &amp;, const char *, const QDBusConnection &amp;, QObject *)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="internalPropSet(const char *,const QVariant &amp;)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="internalPropGet(const char *)const">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
        </modify-function>
        <modify-function signature="callWithCallback(const QString &amp;,const QList&lt;QVariant> &amp;,QObject *, const char *)">
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="3" meta-name="object"/>
                <argument-map index="4" meta-name="member"/>
                if(member!=null &amp;&amp; !member.startsWith("1") &amp;&amp; !member.startsWith("2")) {
                    io.qt.core.QMetaMethod _method = object.metaObject().method(member);
                    if(_method!=null &amp;&amp; _method.isValid()) {
                        if(_method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            member = "2" + _method.cppMethodSignature();
                        else
                            member = "1" + _method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <modify-function signature="callWithCallback(const QString &amp;,const QList&lt;QVariant> &amp;,QObject *, const char *, const char *)">
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <inject-code class="java" position="beginning">
                <argument-map index="3" meta-name="object"/>
                <argument-map index="4" meta-name="member"/>
                <argument-map index="5" meta-name="errorSlot"/>
                if(member!=null &amp;&amp; !member.startsWith("1") &amp;&amp; !member.startsWith("2")) {
                    io.qt.core.QMetaMethod _method = object.metaObject().method(member);
                    if(_method!=null &amp;&amp; _method.isValid()) {
                        if(_method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            member = "2" + _method.cppMethodSignature();
                        else
                            member = "1" + _method.cppMethodSignature();
                    }
                }
                if(errorSlot!=null &amp;&amp; !errorSlot.startsWith("1") &amp;&amp; !errorSlot.startsWith("2")) {
                    io.qt.core.QMetaMethod _method = object.metaObject().method(errorSlot);
                    if(_method!=null &amp;&amp; _method.isValid()) {
                        if(_method.methodType()==io.qt.core.QMetaMethod.MethodType.Signal)
                            errorSlot = "2" + _method.cppMethodSignature();
                        else
                            errorSlot = "1" + _method.cppMethodSignature();
                    }
                }
            </inject-code>
        </modify-function>
        <inject-code>
        @io.qt.QtUninvokable
        public final io.qt.dbus.QDBusPendingCall asyncCall(java.lang.String method, java.lang.Object... args){
            return asyncCallWithArgumentList(method, java.util.Arrays.asList(args));
        }
        
        @io.qt.QtUninvokable
        public final io.qt.dbus.QDBusMessage call(io.qt.dbus.QDBus.CallMode mode, java.lang.String method, java.lang.Object... args){
            return callWithArgumentList(mode, method, java.util.Arrays.asList(args));
        }
        
        @io.qt.QtUninvokable
        public final io.qt.dbus.QDBusMessage call(java.lang.String method, java.lang.Object... args){
            return callWithArgumentList(io.qt.dbus.QDBus.CallMode.AutoDetect, method, java.util.Arrays.asList(args));
        }
        </inject-code>
    </object-type>
    <object-type name="QDBusPendingReplyData" java-name="QDBusPendingReplyBase" force-friendly="yes">
        <modify-function signature="setMetaTypes(int, const int *)" access="private">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    int __qt_%in(0);
                    int&amp; %in = __qt_%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <no-null-pointer/>
                <array-type length-parameter="1"/>
            </modify-argument>
        </modify-function>
        <inject-code>
        @io.qt.QtUninvokable
        final void setMetaTypes(io.qt.core.QMetaType[] metaTypes){
            int[] metaTypeIDs = new int[metaTypes.length];
            for(int i=0; i&lt;metaTypes.length; ++i){
                metaTypeIDs[i] = metaTypes[i].id();
            }
            setMetaTypes(metaTypeIDs);
        }
        </inject-code>
    </object-type>
    <object-type name="QDBusPendingReplyBase" force-friendly="yes">
        <modify-function signature="setMetaTypes(int, const QMetaType *)" access="friendly">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    int __qt_%in(0);
                    int&amp; %in = __qt_%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <no-null-pointer/>
                <array-type length-parameter="1"/>
            </modify-argument>
        </modify-function>
    </object-type>
</typesystem>
