<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.test" module="qtjambi.test" default-superclass="io.qt.QtObject">
    <namespace-type name="QTest">
      <modify-function signature="failOnWarning(const char*)" since="6.3.0">
          <modify-argument index="1">
              <replace-type modified-type="java.lang.String"/>
          </modify-argument>
      </modify-function>
      <modify-function signature="qCaught(const char*,const char*,const char*,int)" since="6.3.0">
          <modify-argument index="1">
              <replace-type modified-type="java.lang.String"/>
          </modify-argument>
          <modify-argument index="2">
              <replace-type modified-type="java.lang.String"/>
          </modify-argument>
          <modify-argument index="3">
              <replace-type modified-type="java.lang.String"/>
          </modify-argument>
      </modify-function>
        <modify-function signature="createTouchDevice(QInputDevice::DeviceType,QFlags&lt;QInputDevice::Capability>)" since="6.0.0">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
        </modify-function>
        <modify-function signature="createTouchDevice(QTouchDevice::DeviceType)" until="5.*">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
        </modify-function>
        <modify-function signature="qInit(QObject *, int, char **)">
           <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    int %out = 0;
                </conversion-rule>
            </modify-argument>
           <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    char ** %out = nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="qExec(QObject *, int, char **)">
           <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    int %out = 0;
                </conversion-rule>
            </modify-argument>
           <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    char ** %out = nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="qFail(const char *,const char *,int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="currentTestFunction()">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="ignoreMessage(QtMsgType,const char *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setMainSourcePath(const char *, const char *)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qFindTestData(const QString&amp;, const char*, int, const char*)" until="5.*">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qFindTestData(const QString&amp;, const char*, int, const char*, const char*)" since="6.0.0">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qVerify(bool,const char *,const char *,const char *,int)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qSkip(const char*,const char*,int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qWarn(const char *,const char *,int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(int, int, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(double, double, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(float, double, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(float, float, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(double, float, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(QPixmap, QPixmap, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(QIcon, QIcon, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(QImage, QImage, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qCompare(QStringView, QStringView, const char *, const char *, const char *, int)">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="compare_helper(bool,const char *,char *,char *,const char *,const char *,const char *,int)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    jsize %in_length = %env->GetStringUTFLength(%in);
                    char* %out = new char[size_t(%in_length)];
                    %env->GetStringUTFRegion(%in, 0, %in_length, %out);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    jsize %in_length = %env->GetStringUTFLength(%in);
                    char* %out = new char[size_t(%in_length)];
                    %env->GetStringUTFRegion(%in, 0, %in_length, %out);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="6">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="7">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qExpectFail(const char *,const char *,QTest::TestFailMode,const char *,int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="currentAppName()">
            <modify-argument index="return">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="currentDataTag()">
            <modify-argument index="return">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="currentTestFunction()">
            <modify-argument index="return">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="qData(const char *,int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="return">
                <replace-type modified-type="java.lang.Object" />
                <conversion-rule class="native" until="5.*">
                    QVariant variant_%in(%2, %in);
                    %out = qtjambi_cast&lt;jobject>(%env, variant_%in);
                </conversion-rule>
                <conversion-rule class="native" since="6.0.0">
                    QVariant variant_%in(QMetaType(%2), %in);
                    %out = qtjambi_cast&lt;jobject>(%env, variant_%in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="qElementData(const char *,int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="return">
                <replace-type modified-type="java.lang.Object" />
                <conversion-rule class="native" until="5.*">
                    QVariant variant_%in(%2, %in);
                    %out = qtjambi_cast&lt;jobject>(%env, variant_%in);
                </conversion-rule>
                <conversion-rule class="native" since="6.0.0">
                    QVariant variant_%in(QMetaType(%2), %in);
                    %out = qtjambi_cast&lt;jobject>(%env, variant_%in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="qGlobalData(const char *,int)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="return">
                <replace-type modified-type="java.lang.Object" />
                <conversion-rule class="native" until="5.*">
                    QVariant variant_%in(%2, %in);
                    %out = qtjambi_cast&lt;jobject>(%env, variant_%in);
                </conversion-rule>
                <conversion-rule class="native" since="6.0.0">
                    QVariant variant_%in(QMetaType(%2), %in);
                    %out = qtjambi_cast&lt;jobject>(%env, variant_%in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="addColumnInternal(int,const char *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="asciiToKey(char)">
            <modify-argument index="1">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyClick(QWindow *, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="2">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyClick(QWidget *, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="2">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyPress(QWindow *, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="2">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyPress(QWidget *, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="2">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyRelease(QWindow *, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="2">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyRelease(QWidget *, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="2">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyEvent(QTest::KeyAction, QWindow *, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="3">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="keyEvent(QTest::KeyAction, QWidget *, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="3">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="sendKeyEvent(QTest::KeyAction, QWidget *, Qt::Key, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="4">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="sendKeyEvent(QTest::KeyAction, QWindow *, Qt::Key, char, QFlags&lt;Qt::KeyboardModifier>, int)">
            <modify-argument index="4">
                <replace-type modified-type="char"/>
                <conversion-rule class="native">
                    char %out = QChar(%in).toLatin1();
                    if(%in!=%out)
                        JavaException::raiseIllegalArgumentException(%env, qPrintable(QString("Not an ASCII character: '%""1'").arg(QChar(%in))) QTJAMBI_STACKTRACEINFO );
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_test-java.java" quote-after-line="class QTest__" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="java" until="5.*">
            <import-file name="typesystem/java/typesystem_test-java.java" quote-after-line="class QTest_5__" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="java" since="6.0.0">
            <import-file name="typesystem/java/typesystem_test-java.java" quote-after-line="class QTest_6__" quote-before-line="}// class"/>
        </inject-code>
    </namespace-type>
    <object-type name="QTest::QTouchEventSequence">
        <modify-function signature="QTouchEventSequence(QWindow *, QPointingDevice *, bool)" access="friendly" since="6.0.0"/>
        <modify-function signature="stationary(int)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventSequence" />
            </modify-argument>
        </modify-function>
        <modify-function signature="point(int)">
            <modify-argument index="return">
                <replace-type modified-type="io.qt.gui.QEventPoint" since="6.0.0"/>
                <replace-type modified-type="io.qt.gui.QTouchEvent$TouchPoint" until="5.*"/>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, &amp;%in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="pointOrPreviousPoint(int)">
            <modify-argument index="return">
                <replace-type modified-type="io.qt.gui.QEventPoint" since="6.0.0"/>
                <replace-type modified-type="io.qt.gui.QTouchEvent$TouchPoint" until="5.*"/>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, &amp;%in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="move(int, QPoint, QWindow *)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventSequence" />
            </modify-argument>
        </modify-function>
        <modify-function signature="press(int, QPoint, QWindow *)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventSequence" />
            </modify-argument>
        </modify-function>
        <modify-function signature="release(int, QPoint, QWindow *)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventSequence" />
            </modify-argument>
        </modify-function>
        <modify-function signature="move(int, QPoint, QWidget *)" until="5.*">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventSequence" />
            </modify-argument>
            <modify-argument index="3">
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="press(int, QPoint, QWidget *)" until="5.*">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventSequence" />
            </modify-argument>
            <modify-argument index="3">
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="release(int, QPoint, QWidget *)" until="5.*">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventSequence" />
            </modify-argument>
            <modify-argument index="3">
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-field name="device">
            <reference-count action="set" variable-name="__rcDevice" />
        </modify-field>
        <modify-field name="targetWindow">
            <reference-count action="set" variable-name="__rcTargetWindow" />
        </modify-field>
    </object-type>
    <object-type name="QTest::QTouchEventWidgetSequence" since="6.0.0">
        <modify-function signature="stationary(int)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventWidgetSequence" />
            </modify-argument>
        </modify-function>
        <modify-function signature="move(int, QPoint, QWidget *)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventWidgetSequence" />
            </modify-argument>
            <modify-argument index="3">
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="press(int, QPoint, QWidget *)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventWidgetSequence" />
            </modify-argument>
            <modify-argument index="3">
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="release(int, QPoint, QWidget *)">
            <modify-argument index="return" replace-value="this">
                <replace-type modified-type="io.qt.test.QTest$QTouchEventWidgetSequence" />
            </modify-argument>
            <modify-argument index="3">
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QSignalSpy" implements="List&lt;java.util.List&lt;java.lang.Object>>">
        <extra-includes>
        <include file-name="java.util.*" location="java"/>
        <include file-name="java.util.function.*" location="java"/>
        <include file-name="java.util.stream.Stream" location="java"/>
        <include file-name="io.qt.core.*" location="java"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_test-java.java" quote-after-line="class QSignalSpy__" quote-before-line="}// class"/>
            <import-file name="typesystem/java/typesystem_test-java.java" quote-after-line="class QSignalSpy_5_" quote-before-line="}// class" until="5.*"/>
            <import-file name="typesystem/java/typesystem_test-java.java" quote-after-line="class QSignalSpy_6_" quote-before-line="}// class" since="6.0.0"/>
        </inject-code>
    </object-type>
 </typesystem>
