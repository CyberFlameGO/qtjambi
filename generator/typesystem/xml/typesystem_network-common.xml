<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 1992-2009 Nokia. All rights reserved.
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtNetwork" description="Classes to make network programming easier and more portable.">
    <required-library name="QtDBus" mode="provide-only" platforms="macos,linux"/>
    <rejection class="QSslKey" function-name="backendImplementation"/>
    <rejection class="QSslCertificate" function-name="backendImplementation"/>
    <rejection class="sockaddr"/>
    <namespace-type name="QSsl">
        <include file-name="qssl.h" location="global" />
    </namespace-type>

  <enum-type name="QSsl::SslOption" flags="QSsl::SslOptions"/>
  <enum-type name="QSsl::SupportedFeature" since="6.1.0"/>
  <enum-type name="QSsl::ImplementedClass" since="6.1.0"/>
    <enum-type name="QNetworkProxy::Capability" flags="QNetworkProxy::Capabilities" />
    <enum-type name="QAbstractSocket::NetworkLayerProtocol" />
    <enum-type name="QNetworkProxyQuery::QueryType" />
    <enum-type name="QAbstractSocket::SocketError" />
    <enum-type name="QAbstractSocket::SocketState" />
    <enum-type name="QAbstractSocket::SocketType" />
    <enum-type name="QAbstractSocket::BindFlag" flags="QAbstractSocket::BindMode" />
    <enum-type name="QAbstractSocket::PauseMode" flags="QAbstractSocket::PauseModes" />
    <enum-type name="QAbstractSocket::SocketOption" />
    <!--enum-type name="QFtp::Command" />
    <enum-type name="QFtp::Error" />
    <enum-type name="QFtp::State" />
    <enum-type name="QFtp::TransferMode" />
    <enum-type name="QFtp::TransferType" /-->
    <enum-type name="QHostAddress::SpecialAddress" />
    <!--enum-type name="QHttp::Error" />
    <enum-type name="QHttp::State" />
    <enum-type name="QHttp::ConnectionMode" /-->
    <enum-type name="QHttpMultiPart::ContentType" /><!-- since 4.8 -->
    <enum-type name="QNetworkInterface::InterfaceFlag" flags="QNetworkInterface::InterfaceFlags"/>
    <enum-type name="QNetworkProxy::ProxyType" />
    <!--enum-type name="QUrlInfo::PermissionSpec" /-->
    <enum-type name="QHostInfo::HostInfoError" />
    <enum-type name="QSsl::KeyType" />
    <enum-type name="QSsl::EncodingFormat" />
    <enum-type name="QSsl::KeyAlgorithm"/>
    <enum-type name="QSsl::SslProtocol" />
    <enum-type name="QSsl::AlternativeNameEntryType" />
    <enum-type name="QSsl::AlertType" />
    <enum-type name="QSsl::AlertLevel" />
    <enum-type name="QLocalSocket::LocalSocketError" />
    <enum-type name="QLocalSocket::LocalSocketState" />
    <enum-type name="QLocalSocket::SocketOption" flags="QLocalSocket::SocketOptions" since="6.2.0"/>
    <enum-type name="QLocalServer::SocketOption" flags="QLocalServer::SocketOptions" />
    <enum-type name="QNetworkAccessManager::Operation" />
    <enum-type name="QNetworkCookie::RawForm" />
    <enum-type name="QNetworkCookie::SameSite" since="6.1.0"/>
    <enum-type name="QNetworkReply::NetworkError" />
    <enum-type name="QNetworkRequest::Attribute" extensible="yes">
        <reject-enum-value name="HTTP2AllowedAttribute" since="5.15.0"/>
        <reject-enum-value name="HTTP2WasUsedAttribute" since="5.15.0"/>
    </enum-type>
    <enum-type name="QNetworkRequest::CacheLoadControl" />
    <enum-type name="QNetworkRequest::KnownHeaders" />
    <enum-type name="QNetworkAccessManager::NetworkAccessibility"/>
    <enum-type name="QNetworkRequest::LoadControl"/>
    <enum-type name="QNetworkRequest::Priority"/>
    <enum-type name="QNetworkRequest::RedirectPolicy" since="5.9.0"/>
    <enum-type name="QNetworkRequest::TransferTimeoutConstant" since="5.15.0"/>
    <enum-type name="QNetworkConfiguration::BearerType" until="5.*"/>
    <enum-type name="QNetworkConfiguration::Purpose" until="5.*"/>
    <enum-type name="QNetworkConfiguration::StateFlag" flags="QNetworkConfiguration::StateFlags" until="5.*"/>
    <enum-type name="QNetworkConfiguration::Type" until="5.*"/>
    <enum-type name="QNetworkConfigurationManager::Capability" flags="QNetworkConfigurationManager::Capabilities" until="5.*"/>
    <enum-type name="QNetworkSession::SessionError" until="5.*"/>
    <enum-type name="QNetworkSession::State" until="5.*"/>
    <enum-type name="QNetworkSession::UsagePolicy" flags="QNetworkSession::UsagePolicies" until="5.*"/>
    <enum-type name="QDnsLookup::Error"/>
    <enum-type name="QDnsLookup::Type"/>
    <enum-type name="QNetworkAddressEntry::DnsEligibilityStatus"/>
    <enum-type name="QNetworkInterface::InterfaceType">
        <reject-enum-value name="Ieee80211"/>
    </enum-type>
    <enum-type name="QHostAddress::ConversionModeFlag" flags="QHostAddress::ConversionMode" since="5.8.0" />
    <enum-type name="QHostAddress::NetworkLayerProtocol" since="7.0.0" />
    <rejection class="QHostAddress" field-name="IPv4Protocol" since="6.2.0"/>
    <rejection class="QHostAddress" field-name="IPv6Protocol" since="6.2.0"/>
    <rejection class="QHostAddress" field-name="AnyIPProtocol" since="6.2.0"/>
    <rejection class="QHostAddress" field-name="UnknownNetworkLayerProtocol" since="6.2.0"/>
    <enum-type name="QHstsPolicy::PolicyFlag" flags="QHstsPolicy::PolicyFlags" since="5.9.0" />
    <enum-type name="QAlertLevel" since="6.0.0" />
    <enum-type name="QAlertType" since="6.0.0" />
    
    <namespace-type name="QPasswordDigestor">
    </namespace-type>

    <enum-type name="QNetworkInformation::Reachability" since="6.1.0" />
    <enum-type name="QNetworkInformation::TransportMedium" since="6.3.0" />
    <enum-type name="QNetworkInformation::Feature" flags="QNetworkInformation::Features" since="6.1.0" />
    <object-type name="QNetworkInformation" since="6.1.0"/>
    <object-type name="QAbstractNetworkCache">
        <modify-function signature="insert(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="ignore" /> <!-- function only has effect on devices retrieved using prepare() -->
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QNetworkDiskCache">
        <modify-function signature="insert(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="ignore" /> <!-- function only has effect on devices retrieved using prepare() -->
            </modify-argument>
        </modify-function>
    </object-type>

    <value-type name="QNetworkCacheMetaData">
        <modify-function signature="operator=(QNetworkCacheMetaData)" remove="all" />
    </value-type>

    <object-type name="QNetworkProxyFactory">
        <modify-function signature="setApplicationProxyFactory(QNetworkProxyFactory*)">
            <modify-argument index="1">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QNetworkProxyQuery" >
        <modify-function signature="operator=(QNetworkProxyQuery)" remove="all" />
    </value-type>

    <object-type name="QAbstractSocket">
        <modify-function signature="setSocketOption(QAbstractSocket::SocketOption, const QVariant)" remove="all" />
        <modify-function signature="socketOption(QAbstractSocket::SocketOption)" remove="all"/>
    </object-type>
    <!--object-type name="QFtp" /-->

    <!--object-type name="QHttp">
        <modify-function signature="closeConnection()" remove="all"/>
    </object-type-->
    <object-type name="QTcpServer">
        <modify-function signature="addPendingConnection(QTcpSocket*)">
            <modify-argument index="1">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QTcpSocket" />
    <object-type name="QSslServer" since="6.4"/>
    <object-type name="QUdpSocket" />
    <object-type name="QHttpPart">
        <modify-function signature="operator=(const QHttpPart &amp;)" rename="set">
            <modify-argument index="0" replace-value="this"/>
            <modify-argument index="1">
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setBodyDevice(QIODevice*)">
            <modify-argument index="1">
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type><!-- since 4.8 -->
    <object-type name="QHttpMultiPart" /><!-- since 4.8 -->

    <!--object-type name="QHttpHeader">
        <modify-function signature="operator=(QHttpHeader)" remove="all"/>
    </object-type-->
    <object-type name="QLocalServer" />
    <object-type name="QLocalSocket" />
    <object-type name="QBearerEnginePlugin" />
    <object-type name="QNetworkAccessManager">
        <modify-function signature="encrypted(QNetworkReply *)" pp-condition="!defined(QT_NO_SSL)"/>
        <modify-function signature="sslErrors(QNetworkReply *, const QList&lt;QSslError> &amp;)" pp-condition="!defined(QT_NO_SSL)"/>
        <modify-function signature="preSharedKeyAuthenticationRequired(QNetworkReply *,QSslPreSharedKeyAuthenticator*)" pp-condition="!defined(QT_NO_SSL)"/>
        <modify-function signature="connectToHostEncrypted(const QString &amp;, unsigned short, const QSslConfiguration &amp;)" pp-condition="!defined(QT_NO_SSL)"/>
        <modify-function signature="setCookieJar(QNetworkCookieJar*)">
            <modify-argument index="1">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setCache(QAbstractNetworkCache*)">
            <modify-argument index="1">
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setProxyFactory(QNetworkProxyFactory*)">
            <modify-argument index="1">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="createRequest(QNetworkAccessManager::Operation, const QNetworkRequest&amp;, QIODevice*)">
            <modify-argument index="return">
                <define-ownership class="native" owner="java"/>
                <define-ownership class="shell" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QNetworkCookieJar">
        <extra-includes>
            <include file-name="qtjambi_network/qtjambi_network.h" location="global"/>
        </extra-includes>
    </object-type>
    <object-type name="QNetworkReply">
        <modify-function signature="encrypted()" pp-condition="!defined(QT_NO_SSL)"/>
    </object-type>
    
    <value-type name="QHostAddress">
        <modify-function signature="QHostAddress(unsigned char*)" remove="all" until="5.*"/>
        <modify-function signature="QHostAddress(const unsigned char*)" remove="all"/>
        <modify-function signature="setAddress(unsigned char*)" remove="all" until="5.*"/>
        <modify-function signature="setAddress(const unsigned char*)" remove="all"/>
        <modify-function signature="operator=(QString)" remove="all" until="5.*"/>
        <modify-function signature="operator=(QHostAddress)" remove="all"/>
        <modify-function signature="operator=(const QHostAddress &amp;)" remove="all"/>
        <modify-function signature="operator=(QHostAddress::SpecialAddress)" remove="all"/>
    </value-type>

    <value-type name="QHostInfo">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_jobjectwrapper.h" location="global"/>
        </extra-includes>
        <modify-function signature="operator=(QHostInfo)" remove="all"/>
    </value-type>

    <!--value-type name="QHttpRequestHeader">
        <modify-function signature="operator=(QHttpRequestHeader)" remove="all"/>
    </value-type-->

    <!--value-type name="QHttpResponseHeader">
        <modify-function signature="operator=(QHttpResponseHeader)" remove="all"/>
    </value-type-->

    <value-type name="QNetworkAddressEntry">
        <modify-function signature="operator=(QNetworkAddressEntry)" remove="all"/>
    </value-type>

    <value-type name="QNetworkInterface">
        <modify-function signature="operator=(QNetworkInterface)" remove="all"/>
    </value-type>

    <value-type name="QNetworkProxy">
        <modify-function signature="operator=(QNetworkProxy)" remove="all"/>
    </value-type>

    <!--value-type name="QUrlInfo">
        <modify-function signature="operator=(QUrlInfo)" remove="all"/>
    </value-type-->

    <value-type name="QIPv6Address">
        <modify-function signature="operator[](int)const">
            <remove/>
        </modify-function>
        <modify-function signature="operator[](int)">
            <remove/>
        </modify-function>
    </value-type>

    <value-type name="QAuthenticator">
        <modify-function signature="operator=(QAuthenticator)" rename="set">
            <modify-argument index="0">
                <no-null-pointer/>
                <replace-type modified-type="void" />
            </modify-argument>
        </modify-function>
    </value-type>

    <value-type name="QNetworkCookie">
        <modify-function signature="operator=(QNetworkCookie)" remove="all" />
    </value-type>

    <value-type name="QNetworkRequest">
        <modify-function signature="operator=(QNetworkRequest)" remove="all" />
        <modify-function signature="setOriginatingObject(QObject*)">
            <modify-argument index="1">
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </value-type>


    <enum-type name="QSslError::SslError"/>
    <enum-type name="QSslCertificate::SubjectInfo" />
    <enum-type name="QSslCertificate::PatternSyntax" />
    <enum-type name="QSslSocket::SslMode" />
    <enum-type name="QSslSocket::PeerVerifyMode" />
    <enum-type name="QSslConfiguration::NextProtocolNegotiationStatus" />
    <enum-type name="QSslDiffieHellmanParameters::Error" />

    <value-type name="QSslCipher" pp-condition="!defined(QT_NO_SSL)"/>
    <value-type name="QSslPreSharedKeyAuthenticator" pp-condition="!defined(QT_NO_SSL)">
        <modify-function signature="operator=(QSslPreSharedKeyAuthenticator)" rename="set">
            <modify-argument index="0">
                <no-null-pointer/>
                <replace-type modified-type="void" />
            </modify-argument>
        </modify-function>
        <!--modify-function signature="swap(QSslPreSharedKeyAuthenticator &amp;)" remove="all" /-->
    </value-type>
    <value-type name="QSslEllipticCurve" pp-condition="!defined(QT_NO_SSL)">
        <!--modify-function signature="isValid() const" remove="all" /-->
    </value-type>
<!--
-->
    <value-type name="QSslError" pp-condition="!defined(QT_NO_SSL)" />
    <value-type name="QSslKey" pp-condition="!defined(QT_NO_SSL)" />
    <value-type name="QSslCertificate" pp-condition="!defined(QT_NO_SSL)" />
    <value-type name="QSslCertificateExtension" pp-condition="!defined(QT_NO_SSL)">
        <modify-function signature="operator=(QSslCertificateExtension)" remove="all" />
    </value-type>
    <value-type name="QSslConfiguration" pp-condition="!defined(QT_NO_SSL)">
        <modify-function signature="dtlsCookieVerificationEnabled() const" pp-condition="QT_CONFIG(dtls)"/>
        <modify-function signature="setDtlsCookieVerificationEnabled(bool)" pp-condition="QT_CONFIG(dtls)"/>
        <modify-function signature="defaultDtlsConfiguration()" pp-condition="QT_CONFIG(dtls)"/>
        <modify-function signature="setDefaultDtlsConfiguration(const QSslConfiguration &amp;)" pp-condition="QT_CONFIG(dtls)"/>
    </value-type>
    <value-type name="QSslDiffieHellmanParameters" pp-condition="!defined(QT_NO_SSL)">
        <modify-function signature="operator=(QSslDiffieHellmanParameters)" remove="all" />
    </value-type>
    <object-type name="QSslSocket" pp-condition="!defined(QT_NO_SSL)" />
    <value-type name="QNetworkConfiguration" until="5.*">
        <modify-function signature="operator=(QNetworkConfiguration)" remove="all" />
    </value-type>

    <object-type name="QNetworkConfigurationManager" until="5.*"/>

    <object-type name="QNetworkSession" until="5.*">
        <modify-function signature="interface()const" rename="getInterface"/>
    </object-type>

    <object-type name="QDnsLookup">
        <modify-function signature="QDnsLookup(QDnsLookup::Type, QString const&amp;, QHostAddress const&amp;, QObject*)" remove="all"/><!-- not sure why this function does not link -->
    </object-type>
    <value-type name="QDnsDomainNameRecord">
        <modify-function signature="operator=(const QDnsDomainNameRecord&amp;)" remove="all"/>
    </value-type>
    <value-type name="QDnsHostAddressRecord">
        <modify-function signature="operator=(const QDnsHostAddressRecord&amp;)" remove="all"/>
    </value-type>
    <value-type name="QDnsMailExchangeRecord">
        <modify-function signature="operator=(const QDnsMailExchangeRecord&amp;)" remove="all"/>
    </value-type>
    <value-type name="QDnsServiceRecord">
        <modify-function signature="operator=(const QDnsServiceRecord&amp;)" remove="all"/>
    </value-type>
    <value-type name="QDnsTextRecord">
        <modify-function signature="operator=(const QDnsTextRecord&amp;)" remove="all"/>
    </value-type>
    <value-type name="QNetworkDatagram">
        <modify-function signature="operator=(const QNetworkDatagram&amp;)" remove="all"/>
    </value-type>
    <value-type name="QHstsPolicy" since="5.9.0">
        <modify-function signature="operator=(const QHstsPolicy&amp;)" remove="all"/>
    </value-type>
    <value-type name="QOcspResponse" since="5.13.0">
        <modify-function signature="operator=(const QOcspResponse&amp;)" remove="all"/>
    </value-type>
    <enum-type name="QDtlsError" since="5.12.0">
	</enum-type>
    <enum-type name="QOcspCertificateStatus" since="5.12.0"/>
    <enum-type name="QOcspRevocationReason" since="5.12.0"/>
    <enum-type name="QDtls::HandshakeState" since="5.12.0"/>
    <object-type name="QDtls" since="5.12.0">
		<!--extra-includes>
		<include file-name="qdtls.h" location="global" suppressed="yes"/>
			<include file-name="QtNetwork/qtnetworkglobal.h" location="global"/>
			<include file-name="QtNetwork/qdtls.h" location="global"/>
		</extra-includes-->
        <modify-function signature="handleTimeout(QUdpSocket *)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="abortHandshake(QUdpSocket *)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="doHandshake(QUdpSocket *, const QByteArray &amp;)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="shutdown(QUdpSocket *)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="writeDatagramEncrypted(QUdpSocket *, const QByteArray &amp;)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QDtlsClientVerifier::GeneratorParameters" since="5.12.0">
    </value-type>
    <value-type name="QDtls::GeneratorParameters" generate="false" java-name="QDtlsClientVerifier.GeneratorParameters" since="5.12.0">
    </value-type>
    <object-type name="QDtlsClientVerifier" since="5.12.0">
        <modify-function signature="verifyClient(QUdpSocket *, const QByteArray &amp;, const QHostAddress &amp;, unsigned short)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QHttp2Configuration" since="5.14.0">
        <modify-function signature="operator=(const QHttp2Configuration &amp;)" remove="all"/>
    </value-type>

    <!--object-type name="QNetworkAccessBackend"/>
    <object-type name="QNetworkAccessBackendFactory"/-->

    <suppress-warning text="*unmatched parameter type 'const sockaddr*" />
    <!-- For people building without SSL support -->
    <suppress-warning text="WARNING(MetaJavaBuilder) :: namespace 'io.qt.network.QSslSocket' for enum 'SslMode' is not declared" />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: type 'QSslError' is specified in typesystem, but not defined. This could potentially lead to compilation errors." />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: type 'QSslCipher' is specified in typesystem, but not defined. This could potentially lead to compilation errors." />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: type 'QSslKey' is specified in typesystem, but not defined. This could potentially lead to compilation errors." />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: namespace 'io.qt.network.QSslError' for enum 'SslError' is not declared" />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: type 'QSslCertificate' is specified in typesystem, but not defined. This could potentially lead to compilation errors." />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: namespace 'io.qt.network.QSslSocket' for enum 'PeerVerifyMode' is not declared"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: namespace 'io.qt.network.QSslCertificate' for enum 'SubjectInfo' is not declared"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: type 'QSslConfiguration' is specified in typesystem, but not defined. This could potentially lead to compilation errors."/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: type 'QSslSocket' is specified in typesystem, but not defined. This could potentially lead to compilation errors."/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: namespace 'io.qt.network.QSsl*' for enum '*' is not declared"/>
    <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QDns*Record."/>
    <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QDtlsClientVerifier::GeneratorParameters."/>
    <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QHostInfo."/>
    <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QIPv6Address."/>
    <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QNetworkDatagram."/>
    <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QNetworkInterface."/>
    <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QSslCertificateExtension."/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function '*', unmatched *type 'QNetworkInformationBackend*'"/>

</typesystem>
