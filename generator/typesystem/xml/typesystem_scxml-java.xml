<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2019 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.scxml" module="qtjambi.scxml" default-superclass="io.qt.QtObject">
    <template name="scxml.AtomicBoolean_to_bool_ptr">
    bool* %out = nullptr;
    if(%in){
        bool b = Java::Runtime::AtomicBoolean.get(%env, %in);
        JavaException::check(%env QTJAMBI_STACKTRACEINFO );
        %out = new bool(b);
        %scope.addFinalAction([%env,%in,%out](){
                                jboolean bval = *%out;
                                delete %out;
                                Java::Runtime::AtomicBoolean.set(%env, %in, bval);
                              });
    }
    </template>
    <template name="scxml.bool_ptr_to_AtomicBoolean">
    if(%in){
        %out = Java::Runtime::AtomicBoolean::newInstance(%env, *%in);
        %scope.addFinalAction([%env,%in,%out](){
                                *%in = Java::Runtime::AtomicBoolean.get(%env, %out);
                              });
    }
    </template>
    <inject-code class="metainfo" position="1" until="5.11">
    void initialize_meta_info_ForeachLoopBody();
    </inject-code>
    <inject-code class="metainfo" until="5.11">
    initialize_meta_info_ForeachLoopBody();
    </inject-code>
    <value-type name="QScxmlExecutableContent::InvokeInfo">
        <modify-field name="finalize" rename="finalizeId" />
    </value-type>
    <value-type name="QScxmlEvent">
    </value-type>
    <namespace-type name="QScxmlExecutableContent">
        <inject-code>
            <import-file name="typesystem/java/typesystem_scxml-java.java" quote-after-line="class QScxmlExecutableContent___" quote-before-line="}// class"/>
        </inject-code>
    </namespace-type>
  <object-type name="QScxmlDataModel::ForeachLoopBody" until="5.11">
        <modify-function signature="run(bool*)">
            <modify-argument index="1">
                <replace-type modified-type="boolean[]"/>
                <conversion-rule class="native">
                    JBooleanArrayPointer %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
  </object-type>
  <interface-type name="QScxmlDataModel::ForeachLoopBody" since="5.12">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="run(bool*)">
            <modify-argument index="0">
                <replace-type modified-type="boolean" />
                <conversion-rule class="native">
                    jboolean %out = %1;
                </conversion-rule>
                <conversion-rule class="shell">
                    if(%1){
                        *%1 = %in;
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
                <!--replace-type modified-type="java.util.concurrent.atomic.AtomicBoolean" />
                <conversion-rule class="native">
                    <insert-template name="scxml.AtomicBoolean_to_bool_ptr"/>
                </conversion-rule>
                <conversion-rule class="shell">
                    <insert-template name="scxml.bool_ptr_to_AtomicBoolean"/>
                </conversion-rule-->
                <conversion-rule class="native">
                    bool %in = false;
                    bool* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
        </modify-function>
  </interface-type>
  <object-type name="QScxmlInvokableService">
        <modify-function signature="postEvent(QScxmlEvent *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.scxml.QScxmlEvent"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QScxmlEvent *%out = qtjambi_cast&lt;QScxmlEvent *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
  </object-type>
  <object-type name="QScxmlDataModel">
        <modify-function signature="evaluateToString(int, bool *)">
            <modify-argument index="2">
                <replace-type modified-type="boolean[]"/>
                <conversion-rule class="shell">
                    BoolPointerArray %inArray(%env, %in, %in ? 1 : 0);
                    jbooleanArray %out = %inArray.array();
                </conversion-rule>
                <conversion-rule class="native">
                    JBooleanArrayPointer %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateToBool(int, bool *)">
            <modify-argument index="2">
                <replace-type modified-type="boolean[]"/>
                <conversion-rule class="shell">
                    BoolPointerArray %inArray(%env, %in, %in ? 1 : 0);
                    jbooleanArray %out = %inArray.array();
                </conversion-rule>
                <conversion-rule class="native">
                    JBooleanArrayPointer %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateToVariant(int, bool *)">
            <modify-argument index="2">
                <replace-type modified-type="boolean[]"/>
                <conversion-rule class="shell">
                    BoolPointerArray %inArray(%env, %in, %in ? 1 : 0);
                    jbooleanArray %out = %inArray.array();
                </conversion-rule>
                <conversion-rule class="native">
                    JBooleanArrayPointer %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateToVoid(int, bool *)">
            <modify-argument index="2">
                <replace-type modified-type="boolean[]"/>
                <conversion-rule class="shell">
                    BoolPointerArray %inArray(%env, %in, %in ? 1 : 0);
                    jbooleanArray %out = %inArray.array();
                </conversion-rule>
                <conversion-rule class="native">
                    JBooleanArrayPointer %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateAssignment(int, bool *)">
            <modify-argument index="2">
                <replace-type modified-type="boolean[]"/>
                <conversion-rule class="shell">
                    BoolPointerArray %inArray(%env, %in, %in ? 1 : 0);
                    jbooleanArray %out = %inArray.array();
                </conversion-rule>
                <conversion-rule class="native">
                    JBooleanArrayPointer %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateInitialization(int, bool *)">
            <modify-argument index="2">
                <replace-type modified-type="boolean[]"/>
                <conversion-rule class="shell">
                    BoolPointerArray %inArray(%env, %in, %in ? 1 : 0);
                    jbooleanArray %out = %inArray.array();
                </conversion-rule>
                <conversion-rule class="native">
                    JBooleanArrayPointer %out(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateForeach(int,bool*,QScxmlDataModel::ForeachLoopBody*)">
            <modify-argument index="2">
                <replace-type modified-type="boolean[]"/>
                <conversion-rule class="shell">
                    BoolPointerArray %inArray(%env, %in, %in ? 1 : 0);
                    jbooleanArray %out = %inArray.array();
                </conversion-rule>
                <conversion-rule class="native">
                    JBooleanArrayPointer %out(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument invalidate-after-use="yes" index="3" />
        </modify-function>
  </object-type>
  <interface-type name="QScxmlTableData">
         <extra-includes>
             <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
         </extra-includes>
        <modify-function signature="stateMachineTable() const">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.IntBuffer"/>
                <conversion-rule class="shell">
                    int* %out = reinterpret_cast&lt;int*>(%env->GetDirectBufferAddress(%in));
                </conversion-rule>
                <conversion-rule class="native">
                    jobject %out = %env->NewDirectByteBuffer(const_cast&lt;int*>(%in), 1024*1024 /* this number is an assumption */);
                    %out = Java::Runtime::ByteBuffer::asReadOnlyBuffer(%env,%out);
                    %out = Java::Runtime::ByteBuffer::asIntBuffer(%env,%out);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="instructions() const">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.IntBuffer"/>
                <conversion-rule class="shell">
                    int* %out = reinterpret_cast&lt;int*>(%env->GetDirectBufferAddress(%in));
                </conversion-rule>
                <conversion-rule class="native">
                    jobject %out = %env->NewDirectByteBuffer(const_cast&lt;int*>(%in), 1024*1024 /* this number is an assumption */);
                    %out = Java::Runtime::ByteBuffer::asReadOnlyBuffer(%env,%out);
                    %out = Java::Runtime::ByteBuffer::asIntBuffer(%env,%out);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="dataNames(int *) const">
            <modify-argument index="0">
                <replace-type modified-type="java.nio.IntBuffer"/>
                <conversion-rule class="shell">
                    int* %out = reinterpret_cast&lt;int*>(%env->GetDirectBufferAddress(%in));
                    if(%1)*%1 = qMax(0, int(%env->GetDirectBufferCapacity(%in)));
                </conversion-rule>
                <conversion-rule class="native">
                    jobject %out = %env->NewDirectByteBuffer(%in, jlong(sizeof(int)) * count);
                    %out = Java::Runtime::ByteBuffer::asIntBuffer(%env,%out);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="shell">
                    //convert shell
                </conversion-rule>
                <conversion-rule class="native">
                    int count = 0;
                    int* %out = &amp;count;
                </conversion-rule>
            </modify-argument>
        </modify-function>
  </interface-type>
  <object-type name="QScxmlStateMachine">
        <modify-function signature="connectToEvent(QString,const QObject*,const char*,Qt::ConnectionType)" access="private">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="int"/>
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="connectToState(QString,const QObject*,const char*,Qt::ConnectionType)" access="private">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="int"/>
                <remove-default-expression/>
            </modify-argument>
        </modify-function>
        <modify-function signature="submitEvent(QScxmlEvent *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.scxml.QScxmlEvent"/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QScxmlEvent *%out = qtjambi_cast&lt;QScxmlEvent *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code class="java">
            <import-file name="typesystem/java/typesystem_scxml-java.java" quote-after-line="class QScxmlStateMachine___" quote-before-line="}// class"/>
        </inject-code>
  </object-type>
</typesystem>
