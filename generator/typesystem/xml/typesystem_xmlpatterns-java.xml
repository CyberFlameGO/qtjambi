<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 1992-2009 Nokia. All rights reserved.
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.xmlpatterns" module="qtjambi.xmlpatterns" default-superclass="io.qt.QtObject">
    <value-type name="QXmlName">
        <modify-function signature="QXmlName(QXmlNamePool&amp;,QString,QString,QString)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.xmlpatterns.QXmlNamePool"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    QXmlNamePool&amp; %out = qtjambi_cast&lt;QXmlNamePool&amp;>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>

    <object-type name="QXmlQuery">
        <modify-function signature="evaluateTo(QString*)const">
            <rename to="evaluateToString" />
            <modify-argument index="1">
                <remove-argument/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    QString target;
                    QString* %out = &amp;target;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    %out = %in ? qtjambi_cast&lt;jstring>(%env, target) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateTo(QAbstractXmlReceiver *)const">
            <modify-argument index="1">
                <no-null-pointer/>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateTo(QStringList*)const">
            <modify-argument index="1">
                <replace-type modified-type="java.util.Collection&lt;java.lang.String>"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    QStringList* %out = qtjambi_cast&lt;QStringList*>(%env, %scope, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateTo(QIODevice*)const">
            <modify-argument index="1">
                <no-null-pointer/>
            </modify-argument>
        </modify-function>
        <modify-function signature="evaluateTo(QXmlResultItems*)const">
            <modify-argument index="1">
                <no-null-pointer/>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QAbstractXmlNodeModel" implements="java.lang.Cloneable">
    </object-type>

    <object-type name="QSimpleXmlNodeModel" implements="java.lang.Cloneable">
      <modify-function signature="namePool()const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.xmlpatterns.QXmlNamePool"/>
                <conversion-rule class="native">
                    %out = qtjambi_from_object(%env, &amp;%in, "io/qt/xmlpatterns/QXmlNamePool", false);
                </conversion-rule>
            </modify-argument>
      </modify-function>
    </object-type>
</typesystem>
