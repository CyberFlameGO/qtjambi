<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.webengine.widgets" module="qtjambi.webenginewidgets" default-superclass="io.qt.QtObject">
Â´    <template name="web.comsumer.function">
        std::function&lt;void(%TYPE)> %out;
        if(%in){
            JObjectWrapper wrapper(%env, %in);
            %out = [wrapper](%TYPE value){
                        if(JNIEnv *env = qtjambi_current_environment()){
                            QTJAMBI_JNI_LOCAL_FRAME(env, 200)
                            jobject _value = qtjambi_cast&lt;jobject>(env, value);
                            Java::Runtime::Consumer::accept(env, wrapper.object(), _value);
                        }
                    };
        }
    </template>
    <template name="web.comsumer.QWebEngineCallback">
        QWebEngineCallback&lt;%TYPE> %out;
        if(%in){
            JObjectWrapper wrapper(%env, %in);
            %out = [wrapper](%TYPE value){
                if(JNIEnv *env = qtjambi_current_environment()){
                    QTJAMBI_JNI_LOCAL_FRAME(env, 200)
                    jobject _value = qtjambi_cast&lt;jobject>(env, value);
                    Java::Runtime::Consumer::accept(env, wrapper.object(), _value);
                }
            };
        }
    </template>
    <object-type name="QWebEngineProfile">
        <modify-function signature="installUrlSchemeHandler(QByteArray,QWebEngineUrlSchemeHandler*)">
            <modify-argument index="2">
                <reference-count action="add" variable-name="__rcUrlSchemeHandler"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="removeUrlSchemeHandler(QWebEngineUrlSchemeHandler*)">
            <modify-argument index="1">
                <reference-count action="remove" variable-name="__rcUrlSchemeHandler"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setRequestInterceptor(QWebEngineUrlRequestInterceptor*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcUrlRequestInterceptor"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUrlRequestInterceptor(QWebEngineUrlRequestInterceptor*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcUrlRequestInterceptor"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setNotificationPresenter(std::function&lt;void(std::unique_ptr&lt;QWebEngineNotification>)>)">
            <modify-argument index="1">
                <replace-default-expression with="null"/>
                <replace-type modified-type="java.util.function.Consumer&lt;io.qt.webengine.core.QWebEngineNotification>"/>
                <conversion-rule class="native">
                    std::function&lt;void(std::unique_ptr&lt;QWebEngineNotification>)> %out;
                    if(%in){
                        JObjectWrapper wrapper(%env, %in);
                        %out = [wrapper](std::unique_ptr&lt;QWebEngineNotification> value){
                                    if(JNIEnv *env = qtjambi_current_environment()){
                                        QTJAMBI_JNI_LOCAL_FRAME(env, 200)
                                        QtJambiScope __qtjambi_scope;
                                        jobject _value = qtjambi_cast&lt;jobject>(env, __qtjambi_scope, value);
                                        Java::Runtime::Consumer::accept(env, wrapper.object(), _value);
                                    }
                                };
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QWebEnginePage">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_jobjectwrapper.h" location="global"/>
            <include file-name="qtjambi_webenginewidgets_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="setDevToolsPage(QWebEnginePage*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcDevToolsPage"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setInspectedPage(QWebEnginePage*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcInspectedPage"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setUrlRequestInterceptor(QWebEngineUrlRequestInterceptor*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcUrlRequestInterceptor"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setWebChannel(QWebChannel*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcWebChannel"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setWebChannel(QWebChannel*,uint)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcWebChannel"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="fullScreenRequested(QWebEngineFullScreenRequest)">
            <modify-argument index="1">
                <replace-type modified-type="QWebEngineFullScreenRequest" />
                <no-null-pointer/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, &amp;%in);
                </conversion-rule>
                <conversion-rule class="native">
                    QWebEngineFullScreenRequest&amp; %out  = *qtjambi_cast&lt;QWebEngineFullScreenRequest*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="authenticationRequired(const QUrl&amp;,QAuthenticator*)">
            <modify-argument index="2">
                <replace-type modified-type="io.qt.network.QAuthenticator" />
                <no-null-pointer/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QAuthenticator* %out  = qtjambi_cast&lt;QAuthenticator*>(%env, %scope, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="proxyAuthenticationRequired(const QUrl&amp;,QAuthenticator*, const QString&amp;)">
            <modify-argument index="2">
                <replace-type modified-type="io.qt.network.QAuthenticator" />
                <no-null-pointer/>
                <conversion-rule class="shell">
                    %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QAuthenticator* %out  = qtjambi_cast&lt;QAuthenticator*>(%env, %scope, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="javaScriptPrompt(const QUrl &amp;, const QString &amp;, const QString &amp;, QString *)">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
					jstring %out = nullptr;
                    if(%in){
                        %out = qtjambi_cast&lt;jstring>(%env, %4);
                    }
                </conversion-rule>
                <conversion-rule class="shell">
                    bool %out = %in;
                    if(%out &amp;&amp; %in){
                        qtjambi_to_qstring(*%4, %env, %in);
                    }
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="shell">
                </conversion-rule>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="printToPdf(const QString &amp;, const QPageLayout &amp;)">
            <modify-argument index="2">
                <replace-default-expression with="new io.qt.gui.QPageLayout(new io.qt.gui.QPageSize(io.qt.gui.QPageSize.PageSizeId.A4), io.qt.gui.QPageLayout.Orientation.Portrait, new io.qt.core.QMarginsF())"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="printToPdf(QWebEngineCallback, const QPageLayout &amp;)">
            <modify-argument index="1">
                <replace-type modified-type="java.util.function.Consumer&lt;io.qt.core.QByteArray>"/>
                <no-null-pointer/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.QWebEngineCallback">
                        <replace from="%TYPE" to="const QByteArray &amp;"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <replace-default-expression with="new io.qt.gui.QPageLayout(new io.qt.gui.QPageSize(io.qt.gui.QPageSize.PageSizeId.A4), io.qt.gui.QPageLayout.Orientation.Portrait, new io.qt.core.QMarginsF())"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="findText(const QString &amp;, QFlags&lt;QWebEnginePage::FindFlag>, QWebEngineCallback)">
            <modify-argument index="3">
                <replace-default-expression with="null"/>
                <replace-type modified-type="java.util.function.Consumer&lt;Boolean>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.QWebEngineCallback">
                        <replace from="%TYPE" to="bool"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="toHtml(QWebEngineCallback)const">
            <modify-argument index="1">
                <no-null-pointer/>
                <replace-type modified-type="java.util.function.Consumer&lt;String>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.QWebEngineCallback">
                        <replace from="%TYPE" to="const QString &amp;"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="toPlainText(QWebEngineCallback)const">
            <modify-argument index="1">
                <no-null-pointer/>
                <replace-type modified-type="java.util.function.Consumer&lt;String>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.QWebEngineCallback">
                        <replace from="%TYPE" to="const QString &amp;"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="runJavaScript(const QString&amp;,QWebEngineCallback)">
            <modify-argument index="2">
                <no-null-pointer/>
                <replace-type modified-type="java.util.function.Consumer&lt;Object>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.QWebEngineCallback">
                        <replace from="%TYPE" to="const QVariant &amp;"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="runJavaScript(const QString&amp;,uint,QWebEngineCallback)">
            <modify-argument index="3">
                <no-null-pointer/>
                <replace-type modified-type="java.util.function.Consumer&lt;Object>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.QWebEngineCallback">
                        <replace from="%TYPE" to="const QVariant &amp;"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="print(QPrinter *,QWebEngineCallback)">
            <modify-argument index="2">
                <replace-type modified-type="java.util.function.Consumer&lt;Boolean>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.QWebEngineCallback">
                        <replace from="%TYPE" to="bool"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QWebEngineView">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_jobjectwrapper.h" location="global"/>
            <include file-name="qtjambi_webenginewidgets_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="findText(QString, QFlags&lt;QWebEnginePage::FindFlag>, std::function&lt;void(QWebEngineFindTextResult)>)" since="6.2.0">
            <modify-argument index="3">
                <replace-default-expression with="null"/>
                <replace-type modified-type="java.util.function.Consumer&lt;io.qt.webengine.core.QWebEngineFindTextResult>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.function">
                        <replace from="%TYPE" to="const QWebEngineFindTextResult &amp;"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="findText(const QString &amp;, QFlags&lt;QWebEnginePage::FindFlag>, QWebEngineCallback)" until="5.*">
            <modify-argument index="3">
                <replace-default-expression with="null"/>
                <replace-type modified-type="java.util.function.Consumer&lt;Boolean>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.QWebEngineCallback">
                        <replace from="%TYPE" to="bool"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="printToPdf(const QString &amp;, const QPageLayout &amp;,QPageRanges)" since="6.2.0">
            <modify-argument index="2">
                <replace-default-expression with="new io.qt.gui.QPageLayout(new io.qt.gui.QPageSize(io.qt.gui.QPageSize.PageSizeId.A4), io.qt.gui.QPageLayout.Orientation.Portrait, new io.qt.core.QMarginsF())"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="printToPdf(std::function&lt;void(const QByteArray&amp;)>, const QPageLayout &amp;,QPageRanges)" since="6.2.0">
            <modify-argument index="1">
                <replace-type modified-type="java.util.function.Consumer&lt;io.qt.core.QByteArray>"/>
                <conversion-rule class="native">
                    <insert-template name="web.comsumer.function">
                        <replace from="%TYPE" to="const QByteArray &amp;"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <replace-default-expression with="new io.qt.gui.QPageLayout(new io.qt.gui.QPageSize(io.qt.gui.QPageSize.PageSizeId.A4), io.qt.gui.QPageLayout.Orientation.Portrait, new io.qt.core.QMarginsF())"/>
            </modify-argument>
        </modify-function>
    </object-type>
</typesystem>
