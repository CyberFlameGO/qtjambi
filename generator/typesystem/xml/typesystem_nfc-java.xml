<?xml version="1.0"?>
<typesystem package="io.qt.nfc" module="qtjambi.nfc" default-superclass="io.qt.QtObject">
    <inject-code class="metainfo" position="1">
    void initialize_meta_info_QtNfc();
    </inject-code>
    <inject-code class="metainfo">
    initialize_meta_info_QtNfc();
    </inject-code>
    <value-type name="QNdefFilter">
        <inject-code>
        @io.qt.QtUninvokable
        public final void appendRecord(Class&lt;? extends QNdefRecord> type) {
            appendRecord(type, 1, 1);
        }
        
        @io.qt.QtUninvokable
        public final void appendRecord(Class&lt;? extends QNdefRecord> type, int min) {
            appendRecord(type, min, 1);
        }
        
        @io.qt.QtUninvokable
        public final void appendRecord(Class&lt;? extends QNdefRecord> type, int min, int max) {
            if(type==QNdefRecord.class) {
                QNdefRecord record = new QNdefRecord();
                appendRecord(record.typeNameFormat(), record.type(), min, max);
            }else if(type==QNdefNfcSmartPosterRecord.class) {
                QNdefNfcSmartPosterRecord record = new QNdefNfcSmartPosterRecord();
                appendRecord(record.typeNameFormat(), record.type(), min, max);
            }else if(type==QNdefNfcTextRecord.class) {
                QNdefNfcTextRecord record = new QNdefNfcTextRecord();
                appendRecord(record.typeNameFormat(), record.type(), min, max);
            }else if(type==QNdefNfcUriRecord.class) {
                QNdefNfcUriRecord record = new QNdefNfcUriRecord();
                appendRecord(record.typeNameFormat(), record.type(), min, max);
            }else if(type==QNdefNfcIconRecord.class) {
                QNdefNfcIconRecord record = new QNdefNfcIconRecord();
                appendRecord(record.typeNameFormat(), record.type(), min, max);
            }else {
                try {
                    QNdefRecord record = type.getConstructor().newInstance();
                    appendRecord(record.typeNameFormat(), record.type(), min, max);
                } catch (RuntimeException | Error e) {
                    throw e;
                } catch (InstantiationException | IllegalAccessException
                        | java.lang.reflect.InvocationTargetException | NoSuchMethodException e) {
                    throw new RuntimeException(e);
                }
            }
        }
        </inject-code>
    </value-type>
    <object-type name="QNearFieldTarget">
        <inject-code class="native" position="beginning">
        namespace QtJambiPrivate{
            template&lt;>
            struct supports_less_than&lt;QNdefMessage> : std::false_type{};
            template&lt;>
            struct supports_stream_operators&lt;QNdefMessage> : std::false_type{};
            template&lt;>
            struct supports_debugstream&lt;QNdefMessage> : std::false_type{};
        }
        </inject-code>
    </object-type>
    <value-type name="QNdefMessage">
        <inject-code class="native" position="beginning">
        namespace QtJambiPrivate{
            template&lt;>
            struct supports_less_than&lt;QNdefMessage> : std::false_type{};
            template&lt;>
            struct supports_stream_operators&lt;QNdefMessage> : std::false_type{};
            template&lt;>
            struct supports_debugstream&lt;QNdefMessage> : std::false_type{};
        }
        </inject-code>
    </value-type>
</typesystem>
