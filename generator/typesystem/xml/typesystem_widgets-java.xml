<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 1992-2009 Nokia. All rights reserved.
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem package="io.qt.widgets" default-superclass="io.qt.QtObject" module="qtjambi">

    <template name="gui.addAction">
        public final QAction addAction(%EXTRA String text %INFIX_EXTRA, Object receiver, String method %END_EXTRA %CONNECTION_TYPE) {
            QAction returned = addAction(%CALL_EXTRA text %END_CALL_EXTRA);
            %POST_CALL
            returned.triggered.connect(receiver, method %USE_CONNECTION_TYPE);
            return returned;
        }

        public final QAction addAction(%EXTRA String text %INFIX_EXTRA, io.qt.core.QMetaObject.Slot0 slot %END_EXTRA %CONNECTION_TYPE) {
            QAction returned = addAction(%CALL_EXTRA text %END_CALL_EXTRA);
            %POST_CALL
            returned.triggered.connect(slot %USE_CONNECTION_TYPE);
            return returned;
        }

        public final QAction addAction(%EXTRA String text %INFIX_EXTRA, io.qt.core.QMetaObject.Slot1&lt;? super Boolean> slot %END_EXTRA %CONNECTION_TYPE) {
            QAction returned = addAction(%CALL_EXTRA text %END_CALL_EXTRA);
            %POST_CALL
            returned.triggered.connect(slot %USE_CONNECTION_TYPE);
            return returned;
        }

        public final QAction addAction(%EXTRA String text %INFIX_EXTRA, io.qt.core.QMetaObject.Connectable1&lt;? super Boolean> signal %END_EXTRA %CONNECTION_TYPE) {
            QAction returned = addAction(%CALL_EXTRA text %END_CALL_EXTRA);
            %POST_CALL
            returned.triggered.connect(signal %USE_CONNECTION_TYPE);
            return returned;
        }
    </template>

    <template name="gui.addAction_with_shortcut">
        <insert-template name="gui.addAction">
            <replace from="%POST_CALL" to="returned.setShortcut(shortcut);"/>
            <replace from=" %END_EXTRA" to=", QKeySequence shortcut"/>
            <replace from=" %END_CALL_EXTRA" to=""/>
            <replace from=" %INFIX_EXTRA" to=""/>
            <replace from=" %CONNECTION_TYPE" to=""/>
            <replace from=" %USE_CONNECTION_TYPE" to=""/>
        </insert-template>
        <insert-template name="gui.addAction">
            <replace from="%POST_CALL" to=""/>
            <replace from=" %END_EXTRA" to=""/>
            <replace from=" %END_CALL_EXTRA" to=""/>
            <replace from=" %INFIX_EXTRA" to=""/>
            <replace from=" %CONNECTION_TYPE" to=""/>
            <replace from=" %USE_CONNECTION_TYPE" to=""/>
        </insert-template>
    </template>

    <template name="widget.addAction_with_shortcut">
        <insert-template name="gui.addAction">
            <replace from="%POST_CALL" to="returned.setShortcut(shortcut);"/>
            <replace from=" %END_EXTRA" to=""/>
            <replace from=" %END_CALL_EXTRA" to=""/>
            <replace from=" %INFIX_EXTRA" to=", QKeySequence shortcut"/>
            <replace from=" %CONNECTION_TYPE" to=", Qt.ConnectionType... connectionType"/>
            <replace from=" %USE_CONNECTION_TYPE" to=", connectionType"/>
        </insert-template>
        <insert-template name="gui.addAction">
            <replace from="%POST_CALL" to=""/>
            <replace from=" %END_EXTRA" to=""/>
            <replace from=" %END_CALL_EXTRA" to=""/>
            <replace from=" %INFIX_EXTRA" to=""/>
            <replace from=" %CONNECTION_TYPE" to=", Qt.ConnectionType... connectionType"/>
            <replace from=" %USE_CONNECTION_TYPE" to=", connectionType"/>
        </insert-template>
    </template>
    <value-type name="QPainterPath">
       <modify-function signature="operator&amp;=(QPainterPath)" remove="all" />
        <modify-function signature="operator+=(QPainterPath)" remove="all" />
        <modify-function signature="operator-=(QPainterPath)" remove="all" />
        <modify-function signature="operator|=(QPainterPath)" remove="all" />
    </value-type>

    <object-type name="QFileSystemModel" until="5.*">
        <modify-function signature="setIconProvider(QFileIconProvider*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcIconProvider"/>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QTreeWidget" implements="Iterable&lt;io.qt.widgets.QTreeWidgetItem>">
        <inject-code>
            <insert-template name="core.to_iterator">
                <replace from="%ITERATOR_TYPE" to="io.qt.widgets.QTreeWidgetItemIterator"/>
            </insert-template>
        </inject-code>
    </object-type>

    <object-type name="QTreeWidgetItem" implements="Iterable&lt;io.qt.widgets.QTreeWidgetItem>">
        <inject-code>
            <insert-template name="core.to_iterator">
                <replace from="%ITERATOR_TYPE" to="io.qt.widgets.QTreeWidgetItemIterator"/>
            </insert-template>
        </inject-code>
    </object-type>

    <object-type name="QTreeWidgetItemIterator" implements="Iterable&lt;io.qt.widgets.QTreeWidgetItem>, java.util.Iterator&lt;io.qt.widgets.QTreeWidgetItem>">
        <inject-code>
            <insert-template name="core.self_iterator">
                <replace from="%ELEMENT_TYPE" to="io.qt.widgets.QTreeWidgetItem"/>
            </insert-template>
        </inject-code>
        <modify-function signature="QTreeWidgetItemIterator(QTreeWidget *,QFlags&lt;QTreeWidgetItemIterator::IteratorFlag>)">
            <modify-argument index="1">
                <no-null-pointer/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                QtJambi_LibraryUtilities.internal.registerDependentObject(this, %1);
            </inject-code>
        </modify-function>
        <modify-function signature="QTreeWidgetItemIterator(QTreeWidgetItem *,QFlags&lt;QTreeWidgetItemIterator::IteratorFlag>)">
            <inject-code position="begin">
                <argument-map index="1" meta-name="%1"/>
                if (%1 == null)
                    throw new NullPointerException("Argument '%1': null not expected.");
                else if(%1.treeWidget()==null)
                    throw new IllegalArgumentException("Item does not belong to a tree widget.");
            </inject-code>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                QtJambi_LibraryUtilities.internal.registerDependentObject(this, %1.treeWidget());
            </inject-code>
        </modify-function>
        <modify-function signature="operator++()" rename="next">
            <inject-code position="begin" class="native">
            QTreeWidgetItem * current = *(*__qt_this);
            </inject-code>
            <modify-argument index="return">
                <replace-type modified-type="io.qt.widgets.QTreeWidgetItem" />
                <conversion-rule class="native">
                    Q_UNUSED(%in)
                    %out = qtjambi_cast&lt;jobject>(%env, current);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="operator*()const" rename="hasNext">
            <modify-argument index="return">
                <replace-type modified-type="boolean" />
                <conversion-rule class="native">
                    %out = %in!=nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QPainterPath::Element">
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QPainterPath_Element___" quote-before-line="}// class"/>
        </inject-code>
    </value-type>
    <interface-type name="QGraphicsItem">
        <extra-includes>
            <include file-name="qtjambi_widgets_repository.h" location="local"/>
        </extra-includes>
        <inject-code class="interface">
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QGraphicsItem___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="QGraphicsItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
            if (%1 != null)
                QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>

        <modify-function signature="paint(QPainter *, const QStyleOptionGraphicsItem *, QWidget *)">
            <modify-argument index="2">
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    const QStyleOptionGraphicsItem *%out = qtjambi_cast&lt;QStyleOptionGraphicsItem *>(%env, %in);
                </conversion-rule>
                <replace-type modified-type="io.qt.widgets.QStyleOptionGraphicsItem"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="itemTransform(const QGraphicsItem*,bool*)const">
            <!-- Remove native pointer argument and return null for !ok. We use this pattern
                 so it will be inherited by classes that implement the interface -->
            <modify-argument index="2">
                <remove-argument />
                <conversion-rule class="shell">
                    // nothing
                </conversion-rule>
                <conversion-rule class="native">
                    bool okHolder = false;
                    bool *%out = &amp;okHolder;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="return">
                <conversion-rule class="shell">
                    if (%2 != 0) *%2 = %in != 0;
                </conversion-rule>
                <conversion-rule class="native">
                    %out = !okHolder ? qtjambi_cast&lt;jobject>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="setGroup(QGraphicsItemGroup*)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code position="beginning">
                io.qt.widgets.QGraphicsItemGroup oldGroup = %this.group();
            </inject-code>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 == null &amp;&amp; oldGroup != null &amp;&amp; oldGroup.parentItem() == null)
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%this);
                else
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>

        <modify-function signature="setParentItem(QGraphicsItem*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 == null)
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%this);
                else
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>
        
        <modify-function signature="isBlockedByModalPanel ( QGraphicsItem **) const">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QGraphicsItem * modalPanel = nullptr;
                    QGraphicsItem ** %out = &amp;modalPanel;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QGraphicsItem$BlockedByModalPanelInfo"/>
                <conversion-rule class="native">
                    %out = Java::QtWidgets::QGraphicsItem$BlockedByModalPanelInfo::newInstance(%env, jboolean(%in), qtjambi_cast&lt;jobject>(%env, modalPanel));
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </interface-type>
    
    <object-type name="QGraphicsTextItem">
        <modify-function signature="QGraphicsTextItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsTextItem(const QString &amp;,QGraphicsItem*)">
            <modify-argument index="2" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="2" meta-name="%2"/>
                if (%2 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsObject">
        <modify-function signature="QGraphicsObject(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null &amp;&amp; %1.toGraphicsObject() == null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="setGroup(QGraphicsItemGroup*)">
            <modify-argument index="1">
                <!-- Handled by injected code in QGraphicsItem -->
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setParentItem(QGraphicsItem*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes"/>
            <modify-argument index="1">
                <!-- Handled by injected code in QGraphicsItem -->
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    <modify-function signature="grabGesture(Qt::GestureType, QFlags&lt;Qt::GestureFlag&gt;)">
        <modify-argument index="2">
          <replace-default-expression with="new io.qt.core.Qt.GestureFlag[0]"/>
        </modify-argument>
    </modify-function>
    </object-type>    

    <object-type name="QAbstractGraphicsShapeItem">
        <modify-function signature="QAbstractGraphicsShapeItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
            if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>


    <object-type name="QAbstractItemView">
        <modify-function signature="initViewItemOption(QStyleOptionViewItem *) const" since="6.0.0">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionViewItem"/>
                <conversion-rule class="native">
                    QStyleOptionViewItem* %out = qtjambi_cast&lt;QStyleOptionViewItem*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setIndexWidget(const QModelIndex &amp;,QWidget *)" thread-affine="yes">
            <modify-argument index="2">
                <!-- Safe to ignore because view reparents widget -->
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setItemDelegate(QAbstractItemDelegate *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="set" variable-name="__rcItemDelegate"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setModel(QAbstractItemModel *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="set" variable-name="__rcItemModel"/>
            </modify-argument>
            <inject-code class="java" position="end">
                // setModel() creates a new selection model for the object
                QtJambi_LibraryUtilities.internal.setReferenceCount(this, io.qt.widgets.QAbstractItemView.class, "__rcItemSelectionModel", false, false, null);
            </inject-code>
        </modify-function>
        <modify-function signature="setSelectionModel(QItemSelectionModel *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="set" variable-name="__rcItemSelectionModel"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setItemDelegateForColumn(int,QAbstractItemDelegate*)" thread-affine="yes">
            <modify-argument index="2" thread-affine="yes">
                <reference-count action="put" key-argument="1" variable-name="__rcDelegatesForColumns"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setItemDelegateForRow(int,QAbstractItemDelegate*)" thread-affine="yes">
            <modify-argument index="2" thread-affine="yes">
                <reference-count action="put" key-argument="1" variable-name="__rcDelegatesForRows"/>
            </modify-argument>
        </modify-function>
    </object-type>


    <object-type name="QActionGroup">
        <modify-function signature="addAction(QAction*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="add" variable-name="__rcActions"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                QtJambi_LibraryUtilities.internal.setReferenceCount(%1, QAction.class, "__rcActionGroup", false, false, this);
            </inject-code>
        </modify-function>
        <modify-function signature="removeAction(QAction*)" thread-affine="yes">
            <modify-argument index="1">
                <reference-count action="remove" variable-name="__rcActions"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                QtJambi_LibraryUtilities.internal.setReferenceCount(%1, QAction.class, "__rcActionGroup", false, false, null);
            </inject-code>
        </modify-function>
    </object-type>
    
    <object-type name="QTabWidget">
        <modify-function signature="initStyleOption(QStyleOptionTabWidgetFrame*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionTabWidgetFrame"/>
                <conversion-rule class="native">
                    QStyleOptionTabWidgetFrame* %out = qtjambi_cast&lt;QStyleOptionTabWidgetFrame*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QDockWidget">
        <modify-function signature="initStyleOption(QStyleOptionDockWidget*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionDockWidget"/>
                <conversion-rule class="native">
                    QStyleOptionDockWidget* %out = qtjambi_cast&lt;QStyleOptionDockWidget*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QFocusFrame">
        <modify-function signature="initStyleOption(QStyleOption*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="native">
                    QStyleOption* %out = qtjambi_cast&lt;QStyleOption*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QFrame">
        <modify-function signature="initStyleOption(QStyleOptionFrame*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionFrame"/>
                <conversion-rule class="native">
                    QStyleOptionFrame* %out = qtjambi_cast&lt;QStyleOptionFrame*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QComboBox">
        <modify-function signature="initStyleOption(QStyleOptionComboBox*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionComboBox"/>
                <conversion-rule class="native">
                    QStyleOptionComboBox* %out = qtjambi_cast&lt;QStyleOptionComboBox*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QHeaderView">
        <modify-function signature="initStyleOption(QStyleOptionHeader*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionHeader"/>
                <conversion-rule class="native">
                    QStyleOptionHeader* %out = qtjambi_cast&lt;QStyleOptionHeader*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="initStyleOptionForIndex(QStyleOptionHeader *, int) const" since="6.0.0">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionHeader"/>
                <conversion-rule class="native">
                    QStyleOptionHeader* %out = qtjambi_cast&lt;QStyleOptionHeader*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QCheckBox">
        <modify-function signature="initStyleOption(QStyleOptionButton*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionButton"/>
                <conversion-rule class="native">
                    QStyleOptionButton* %out = qtjambi_cast&lt;QStyleOptionButton*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsEllipseItem">
        <modify-function signature="QGraphicsEllipseItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsEllipseItem(const QRectF &amp;,QGraphicsItem*)">
            <modify-argument index="2" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="2" meta-name="%2"/>
                if (%2 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsEllipseItem(qreal,qreal,qreal,qreal,QGraphicsItem*)">
            <modify-argument index="5" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="5" meta-name="%5"/>
                if (%5 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsItemGroup">
        <modify-function signature="QGraphicsItemGroup(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="addToGroup(QGraphicsItem*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code position="begin">
                <argument-map index="1" meta-name="%1"/>
                boolean _hasParent = %1.parentItem()!=null;
            </inject-code>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (!_hasParent &amp;&amp; (%1.toGraphicsObject()==null || %1.toGraphicsObject().parent() == null) )
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%1);
            </inject-code>
        </modify-function>
        <modify-function signature="removeFromGroup(QGraphicsItem*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1.parentItem() == null &amp;&amp; (%1.toGraphicsObject()==null || %1.toGraphicsObject().parent() == null) )
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%1);
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsLineItem">
        <modify-function signature="QGraphicsLineItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsLineItem(const QLineF &amp;,QGraphicsItem*)">
            <modify-argument index="2" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="2" meta-name="%2"/>
                if (%2 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsLineItem(qreal,qreal,qreal,qreal,QGraphicsItem*)">
            <modify-argument index="5" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="5" meta-name="%5"/>
                if (%5 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsPathItem">
        <modify-function signature="QGraphicsPathItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsPathItem(const QPainterPath &amp;,QGraphicsItem*)">
            <modify-argument index="2" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="2" meta-name="%2"/>
                if (%2 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsPixmapItem">
        <modify-function signature="QGraphicsPixmapItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsPixmapItem(const QPixmap &amp;,QGraphicsItem*)">
            <modify-argument index="2" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="2" meta-name="%2"/>
                if (%2 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsPolygonItem">
        <modify-function signature="QGraphicsPolygonItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsPolygonItem(const QPolygonF &amp;,QGraphicsItem*)">
            <modify-argument index="2" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="2" meta-name="%2"/>
                if (%2 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>


    <object-type name="QGraphicsRectItem">
        <modify-function signature="QGraphicsRectItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsRectItem(qreal,qreal,qreal,qreal,QGraphicsItem*)">
            <modify-argument index="5" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="5" meta-name="%5"/>
                if (%5 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsRectItem(const QRectF &amp;,QGraphicsItem*)">
            <modify-argument index="2" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="2" meta-name="%2"/>
                if (%2 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsSimpleTextItem">
        <modify-function signature="QGraphicsSimpleTextItem(QGraphicsItem*)">
            <modify-argument index="1" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
                if (%1 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsSimpleTextItem(const QString &amp;,QGraphicsItem*)">
            <modify-argument index="2" thread-affine="yes"/>
            <inject-code position="end">
                <argument-map index="2" meta-name="%2"/>
                if (%2 != null) QtJambi_LibraryUtilities.internal.setCppOwnership(this);
            </inject-code>
        </modify-function>
    </object-type>


    <object-type name="QMenu">
        <extra-includes until="6.2.*">
        <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QMenu___" quote-before-line="}// class"/>
        </inject-code>
        <inject-code class="native">
extern "C" Q_DECL_EXPORT void JNICALL QTJAMBI_FUNCTION_PREFIX(Java_io_qt_widgets_QMenu_setAsOSXDockMenu)
(JNIEnv *__jni_env, jobject __this)
{
#ifdef Q_OS_OSX
    QMenu* __qt_this = qtjambi_cast&lt;QMenu*>(__jni_env, __this);
    qtjambi_check_resource(__jni_env, __qt_this);
    __qt_this->setAsDockMenu();
#else
    Q_UNUSED(__jni_env)
    Q_UNUSED(__this)
#endif
}
        </inject-code>

        <inject-code until="6.2.*">
            <insert-template name="gui.addAction_with_shortcut">
                <replace from="%EXTRA " to=""/>
                <replace from="%CALL_EXTRA " to=""/>
            </insert-template>
            <insert-template name="gui.addAction_with_shortcut">
                <replace from="%EXTRA" to="QIcon icon,"/>
                <replace from="%CALL_EXTRA" to="icon,"/>
            </insert-template>
        </inject-code>
        <modify-function signature="clear()">
            <inject-code position="end">
        if(__rcMenus!=null)__rcMenus.clear();
        QtJambi_LibraryUtilities.internal.clearReferenceCount(this, QWidget.class, "__rcActions", false);
            </inject-code>
        </modify-function>
        <modify-function signature="initStyleOption(QStyleOptionMenuItem*,const QAction*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionMenuItem"/>
                <conversion-rule class="native">
                    QStyleOptionMenuItem* %out = qtjambi_cast&lt;QStyleOptionMenuItem*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>


    <object-type name="QMenuBar">
        <extra-includes since="6.0.0" until="6.2.*">
            <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
        <inject-code until="6.2.*">
            <insert-template name="gui.addAction">
                <replace from="%POST_CALL" to=""/>
                <replace from=" %END_EXTRA" to=""/>
                <replace from=" %END_CALL_EXTRA" to=""/>
                <replace from=" %INFIX_EXTRA" to=""/>
                <replace from="%EXTRA " to=""/>
                <replace from="%CALL_EXTRA " to=""/>
                <replace from=" %CONNECTION_TYPE" to=""/>
                <replace from=" %USE_CONNECTION_TYPE" to=""/>
            </insert-template>
        </inject-code>
        <modify-function signature="clear()">
            <inject-code position="end">
        if(__rcMenus!=null)__rcMenus.clear();
        QtJambi_LibraryUtilities.internal.clearReferenceCount(this, QWidget.class, "__rcActions", false);
            </inject-code>
        </modify-function>
        <modify-function signature="initStyleOption(QStyleOptionMenuItem*,const QAction*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionMenuItem"/>
                <conversion-rule class="native">
                    QStyleOptionMenuItem* %out = qtjambi_cast&lt;QStyleOptionMenuItem*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QProgressBar">
        <modify-function signature="initStyleOption(QStyleOptionProgressBar*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionProgressBar"/>
                <conversion-rule class="native">
                    QStyleOptionProgressBar* %out = qtjambi_cast&lt;QStyleOptionProgressBar*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QPushButton">
        <modify-function signature="initStyleOption(QStyleOptionButton*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionButton"/>
                <conversion-rule class="native">
                    QStyleOptionButton* %out = qtjambi_cast&lt;QStyleOptionButton*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>


    <object-type name="QShortcut" until="5.*">
        <modify-function signature="QShortcut(QKeySequence,QWidget*,const char*,const char*,Qt::ShortcutContext)" access="private">
            <modify-argument index="2">
                <no-null-pointer/>
            </modify-argument>
            <modify-argument index="3">
                <remove-default-expression/>
                <replace-type modified-type="java.lang.Object"/>
                <conversion-rule class="native">
                const char* %out = nullptr;
                Q_UNUSED(%in)
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-default-expression/>
                <replace-type modified-type="java.lang.Object"/>
                <conversion-rule class="native">
                const char* %out = nullptr;
                Q_UNUSED(%in)
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QShortcut__" quote-before-line="}// class"/>
        </inject-code>
    </object-type>

    <object-type name="QToolButton">
        <modify-function signature="initStyleOption(QStyleOptionToolButton*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionToolButton"/>
                <conversion-rule class="native">
                    QStyleOptionToolButton* %out = qtjambi_cast&lt;QStyleOptionToolButton*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QUndoStack" until="5.*">
        <modify-function signature="push(QUndoCommand *)">
            <modify-argument index="1">
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>


    <object-type name="QWidgetAction">
        <modify-function signature="setDefaultWidget(QWidget*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>


    <object-type name="QAbstractButton">
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QAbstractButton___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QStyle">
        <extra-includes>
            <include file-name="qtjambi_widgets_repository.h" location="local"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QStyle___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="drawControl(QStyle::ControlElement, const QStyleOption *, QPainter *, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="drawComplexControl(QStyle::ComplexControl, const QStyleOptionComplex *, QPainter *, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOptionComplex"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOptionComplex *%out = qtjambi_cast&lt;QStyleOptionComplex *>(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="drawPrimitive(QStyle::PrimitiveElement, const QStyleOption *, QPainter *, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="hitTestComplexControl(QStyle::ComplexControl, const QStyleOptionComplex *, const QPoint &amp;, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOptionComplex"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOptionComplex *%out = qtjambi_cast&lt;QStyleOptionComplex *>(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QStyle$SubControl"/>
                <conversion-rule class="shell">
                    QStyle::SubControl %out = qtjambi_cast&lt;QStyle::SubControl>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    jobject %out = Java::QtWidgets::QStyle::findSubControl(%env, %1, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="pixelMetric(QStyle::PixelMetric, const QStyleOption *, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="sizeFromContents(QStyle::ContentsType, const QStyleOption *, const QSize &amp;, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="standardIcon(QStyle::StandardPixmap, const QStyleOption *, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="standardPixmap(QStyle::StandardPixmap, const QStyleOption *, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="styleHint(QStyle::StyleHint, const QStyleOption *, const QWidget *, QStyleHintReturn *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4" invalidate-after-use="yes" />
        </modify-function>

        <modify-function signature="subControlRect(QStyle::ComplexControl, const QStyleOptionComplex *, QStyle::SubControl, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOptionComplex"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOptionComplex *%out = qtjambi_cast&lt;QStyleOptionComplex *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="subElementRect(QStyle::SubElement, const QStyleOption *, const QWidget *) const">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="generatedIconPixmap(QIcon::Mode,QPixmap,const QStyleOption*)const">
            <modify-argument index="3" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="polish(QPalette&amp;)">
            <modify-argument index="1" invalidate-after-use="true">
                <replace-type modified-type="io.qt.gui.QPalette"/>
                <no-null-pointer/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %scope, &amp;%in);
                </conversion-rule>
                <conversion-rule class="native">
                    QPalette &amp;%out = qtjambi_cast&lt;QPalette&amp;>(%env, %scope, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <!--modify-function signature="standardIconImplementation(QStyle::StandardPixmap,const QStyleOption*,const QWidget*)const">
            <modify-argument index="2">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function-->

        <modify-function signature="combinedLayoutSpacing(QFlags&lt;QSizePolicy::ControlType&gt;,QFlags&lt;QSizePolicy::ControlType&gt;,Qt::Orientation,QStyleOption*,QWidget*)const">
            <modify-argument index="4">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <modify-function signature="layoutSpacing(QSizePolicy::ControlType,QSizePolicy::ControlType,Qt::Orientation,const QStyleOption*,const QWidget*)const">
            <modify-argument index="4">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>


        <!--modify-function signature="layoutSpacingImplementation(QSizePolicy::ControlType,QSizePolicy::ControlType,Qt::Orientation,const QStyleOption*,const QWidget*)const">
            <modify-argument index="4">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function-->
    </object-type>
    <object-type name="QWidgetItem">
        <modify-function signature="QWidgetItem(QWidget *)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcWidget"/>
            </modify-argument>
        </modify-function>
        <modify-field name="wid" rename="widget" read="no" write="yes">
            <reference-count action="set" variable-name="__rcWidget"/>
        </modify-field>
        <inject-code position="end">
        @io.qt.QtUninvokable
        static native boolean hasWidgetItemV2(QWidget widget);
        </inject-code>
    </object-type>
    <object-type name="QLayout">
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QLayout___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="takeAt(int)">
            <modify-argument index="return">
                <define-ownership class="shell" owner="cplusplus"/>
                <define-ownership class="native" owner="java"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="0" meta-name="%item" />
                if(%item != null){
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%item);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="addWidget(QWidget *)" access="friendly,non-final" rename="add_widget" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count variable-name="__rcLayoutedObjects" action="add" condition="%1.parent()==null"/>
                <!-- A Layout never owns the QWidget* but retains a reference to it -->
            </modify-argument>
            <inject-code position="begin"><argument-map index="1" meta-name="%1" />
            if(QWidgetItem.hasWidgetItemV2(%1))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="addItem(QLayoutItem *)">
            <modify-argument index="1" invalidate-after-use="yes">
                <no-null-pointer/>
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
            <inject-code class="java" position="1">
                <argument-map index="1" meta-name="%1"/>
                QWidget widget = %1.widget();
            </inject-code>
            <inject-code class="java" position="end">
                if(widget!=null &amp;&amp; widget.parent()==null){
                    QtJambi_LibraryUtilities.internal.addReferenceCount(this, io.qt.widgets.QLayout.class, "__rcLayoutedObjects", false, false, widget);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="removeItem(QLayoutItem *)">
            <modify-argument index="1" invalidate-after-use="yes">
                <define-ownership class="java" owner="default"/>
            </modify-argument>
            <inject-code class="java" position="1">
                <argument-map index="1" meta-name="%1"/>
                QWidget widget = %1.widget();
            </inject-code>
            <inject-code class="java" position="end">
                if(widget!=null &amp;&amp; __rcLayoutedObjects!=null){
                    __rcLayoutedObjects.remove(widget);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="addChildLayout(QLayout *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addChildLayout(QLayout *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="getContentsMargins(int*,int*,int*,int*)const">
            <inject-code position="beginning">
                <argument-map index="1" meta-name="%1" />
                if(%1.length&lt;4) throw new IllegalArgumentException("An array of length 4 expected.");
            </inject-code>
            <modify-argument index="1" rename="margins">
                <replace-type modified-type="int[]"/>
                <conversion-rule class="native">
                jsize %out_size = 4;
                int* %out = qtjambi_array_cast&lt;int*>(%env, %scope, %in, %out_size);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                int* %out = __qt_%1+1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                int* %out = __qt_%1+2;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                int* %out = __qt_%1+3;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QBoxLayout">
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QBoxLayout___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="takeAt(int)">
            <modify-argument index="return">
                <define-ownership class="shell" owner="cplusplus"/>
                <define-ownership class="native" owner="java"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="0" meta-name="%item" />
                if(%item != null){
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%item);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="insertItem(int, QLayoutItem *)">
            <modify-argument index="2" invalidate-after-use="yes">
                <no-null-pointer/>
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
            <inject-code class="java" position="1">
                <argument-map index="2" meta-name="%1"/>
                QWidget widget = %1.widget();
            </inject-code>
            <inject-code class="java" position="end">
                if(widget!=null &amp;&amp; widget.parent()==null){
                    QtJambi_LibraryUtilities.internal.addReferenceCount(this, io.qt.widgets.QLayout.class, "__rcLayoutedObjects", false, false, widget);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="addWidget(QWidget *, int, QFlags&lt;Qt::AlignmentFlag&gt;)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count declare-variable="QLayout" action="add" variable-name="__rcLayoutedObjects" condition="%1.parent()==null"/>
                <!-- A Layout never owns the QWidget* but retains a reference to it -->
            </modify-argument>
            <modify-argument index="2">
                <remove-default-expression/>
            </modify-argument>
            <inject-code position="begin"><argument-map index="1" meta-name="%1" />
            if(QWidgetItem.hasWidgetItemV2(%1))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="insertWidget(int,QWidget*,int,QFlags&lt;Qt::AlignmentFlag&gt;)" thread-affine="yes">
            <modify-argument index="2" thread-affine="yes">
                <reference-count declare-variable="QLayout" action="add" variable-name="__rcLayoutedObjects" condition="%2.parent()==null"/>
            </modify-argument>
            <inject-code position="begin"><argument-map index="2" meta-name="%2" />
            if(QWidgetItem.hasWidgetItemV2(%2))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QStackedLayout">
        <modify-function signature="takeAt(int)">
            <modify-argument index="return">
                <define-ownership class="shell" owner="cplusplus"/>
                <define-ownership class="native" owner="java"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="0" meta-name="%item" />
                if(%item != null){
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%item);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="addWidget(QWidget *)" rename="stackWidget" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%1.parent()==null"/>
            </modify-argument>
            <!--inject-code position="begin"><argument-map index="1" meta-name="%1" />
            if(QWidgetItem.hasWidgetItemV2(%1))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code-->
        </modify-function>
        <modify-function signature="insertWidget(int,QWidget*)" thread-affine="yes">
            <modify-argument index="2" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%2.parent()==null"/>
            </modify-argument>
            <inject-code position="begin"><argument-map index="2" meta-name="%2" />
            if(QWidgetItem.hasWidgetItemV2(%2))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="addItem(QLayoutItem *)">
            <modify-argument index="1" invalidate-after-use="yes">
                <no-null-pointer/>
                <define-ownership class="java" owner="invalidate"/>
            </modify-argument>
            <inject-code class="java" position="1"><argument-map index="1" meta-name="%item" />
                if(widget==null){
                    throw new IllegalArgumentException("Only widgets can be added to QStackedLayout. Use QWidgetItem instead.");
                }
            </inject-code>
        </modify-function>
        <inject-code position="end">
            @io.qt.QtUninvokable
            void add_widget(QWidget widget){
                stackWidget(widget);
            }
        </inject-code>
    </object-type>

    <object-type name="QFormLayout">
        <extra-includes>
            <include file-name="qtjambi_widgets_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="takeAt(int)">
            <modify-argument index="return">
                <define-ownership class="shell" owner="cplusplus"/>
                <define-ownership class="native" owner="java"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="0" meta-name="%item" />
                if(%item != null){
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%item);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="addItem(QLayoutItem *)">
            <modify-argument index="1" invalidate-after-use="yes">
                <!-- FIXME: Maybe we should have a use/inherit ownership rule from base-class -->
                <no-null-pointer/>
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="getLayoutPosition(QLayout*,int*,QFormLayout::ItemRole*)const">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    QFormLayout::ItemRole* %out = reinterpret_cast&lt;QFormLayout::ItemRole*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFormLayout$ItemInfo"/>
                <conversion-rule class="native">
                    %out = Java::QtWidgets::QFormLayout$ItemInfo::newInstance(%env, %2, qtjambi_cast&lt;jobject>(%env, %3));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getWidgetPosition(QWidget*,int*,QFormLayout::ItemRole*)const">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    QFormLayout::ItemRole* %out = reinterpret_cast&lt;QFormLayout::ItemRole*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFormLayout$ItemInfo"/>
                <conversion-rule class="native">
                    %out = Java::QtWidgets::QFormLayout$ItemInfo::newInstance(%env, %2, qtjambi_cast&lt;jobject>(%env, %3));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getItemPosition(int,int*,QFormLayout::ItemRole*)const">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    QFormLayout::ItemRole* %out = reinterpret_cast&lt;QFormLayout::ItemRole*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFormLayout$ItemInfo"/>
                <conversion-rule class="native">
                    %out = Java::QtWidgets::QFormLayout$ItemInfo::newInstance(%env, %2, qtjambi_cast&lt;jobject>(%env, %3));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setItem(int,QFormLayout::ItemRole,QLayoutItem*)">
            <modify-argument index="3">
                <no-null-pointer/>
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
            <inject-code class="java" position="1">
                <argument-map index="3" meta-name="%item"/>
                if (itemAt(row, role)!=null)
                    throw new IllegalArgumentException("Cell in form layout is already occupied");
                QWidget widget = %item.widget();
            </inject-code>
            <inject-code class="java" position="end">
                if(widget!=null &amp;&amp; widget.parent()==null){
                    QtJambi_LibraryUtilities.internal.addReferenceCount(this, io.qt.widgets.QLayout.class, "__rcLayoutedObjects", false, false, widget);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="addRow(QWidget*,QWidget*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%1.parent()==null"/>
            </modify-argument>
            <modify-argument index="2" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%2.parent()==null"/>
            </modify-argument>
            <inject-code position="begin"><argument-map index="1" meta-name="%1" /><argument-map index="2" meta-name="%2" />
            if(QWidgetItem.hasWidgetItemV2(%1))
                throw new IllegalArgumentException("Widget is already a layout member.");
            if(QWidgetItem.hasWidgetItemV2(%2))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="addRow(QLayout*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="removeRow(QLayout*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="takeRow(QLayout*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="addRow(QWidget*,QLayout*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%1.parent()==null"/>
            </modify-argument>
            <modify-argument index="2" thread-affine="yes">
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code position="begin"><argument-map index="1" meta-name="%1" />
            if(QWidgetItem.hasWidgetItemV2(%1))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="addRow(QWidget*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%1.parent()==null"/>
            </modify-argument>
            <inject-code position="begin"><argument-map index="1" meta-name="%1" />
            if(QWidgetItem.hasWidgetItemV2(%1))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="removeRow(QWidget*)">
            <modify-argument index="1">
                <no-null-pointer/>
                <reference-count action="remove" declare-variable="QLayout" variable-name="__rcLayoutedObjects"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="takeRow(QWidget*)">
            <modify-argument index="1">
                <no-null-pointer/>
                <reference-count action="remove" declare-variable="QLayout" variable-name="__rcLayoutedObjects"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addRow(QString,QLayout*)" thread-affine="yes">
            <modify-argument index="2" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="addRow(QString,QWidget*)" thread-affine="yes">
            <modify-argument index="2" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%arg.parent()==null"/>
            </modify-argument>
            <inject-code position="begin"><argument-map index="2" meta-name="%2" />
            if(QWidgetItem.hasWidgetItemV2(%2))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="insertRow(int,QLayout*)" thread-affine="yes">
            <modify-argument index="2" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="insertRow(int,QWidget*,QLayout*)" thread-affine="yes">
            <inject-code position="begin"><argument-map index="2" meta-name="%2" />
            if(QWidgetItem.hasWidgetItemV2(%2))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
            <modify-argument index="2" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%arg.parent()==null"/>
            </modify-argument>
            <modify-argument index="3" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="insertRow(int,QWidget*,QWidget*)" thread-affine="yes">
            <inject-code position="begin"><argument-map index="3" meta-name="%3" /><argument-map index="2" meta-name="%2" />
            if(QWidgetItem.hasWidgetItemV2(%3))
                throw new IllegalArgumentException("Widget is already a layout member.");
            if(QWidgetItem.hasWidgetItemV2(%2))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
            <modify-argument index="2" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%arg.parent()==null"/>
            </modify-argument>
            <modify-argument index="3" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%arg.parent()==null"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insertRow(int,QWidget*)" thread-affine="yes">
            <inject-code position="begin"><argument-map index="2" meta-name="%2" />
            if(QWidgetItem.hasWidgetItemV2(%2))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
            <modify-argument index="2" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%arg.parent()==null"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insertRow(int,QString,QLayout*)" thread-affine="yes">
            <modify-argument index="3" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="insertRow(int,QString,QWidget*)" thread-affine="yes">
            <inject-code position="begin"><argument-map index="3" meta-name="%3" />
            if(QWidgetItem.hasWidgetItemV2(%3))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
            <modify-argument index="3" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%arg.parent()==null"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setRowVisible(QWidget *, bool)" thread-affine="yes" since="6.4">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setRowVisible(QLayout *, bool)" thread-affine="yes" since="6.4">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setLayout(int,QFormLayout::ItemRole,QLayout*)" thread-affine="yes">
            <modify-argument index="3" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
        <modify-function signature="setWidget(int,QFormLayout::ItemRole,QWidget*)" thread-affine="yes">
            <inject-code position="begin"><argument-map index="3" meta-name="%3" />
            if(QWidgetItem.hasWidgetItemV2(%3))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
            <modify-argument index="3" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%arg.parent()==null"/>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QFormLayout___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>

    <object-type name="QGridLayout">
        <extra-includes>
            <include file-name="qtjambi_widgets_repository.h" location="local"/>
        </extra-includes>
        <modify-function signature="takeAt(int)">
            <modify-argument index="return">
                <define-ownership class="shell" owner="cplusplus"/>
                <define-ownership class="native" owner="java"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="0" meta-name="%item" />
                if(%item != null){
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%item);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="addWidget(QWidget*,int,int,QFlags&lt;Qt::AlignmentFlag&gt;)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count declare-variable="QLayout" action="add" variable-name="__rcLayoutedObjects" condition="%1.parent()==null"/>
            </modify-argument>
            <inject-code position="begin"><argument-map index="1" meta-name="%1" />
            if(QWidgetItem.hasWidgetItemV2(%1))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="addWidget(QWidget*,int,int,int,int,QFlags&lt;Qt::AlignmentFlag&gt;)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count declare-variable="QLayout" action="add" variable-name="__rcLayoutedObjects" condition="%1.parent()==null"/>
            </modify-argument>
            <inject-code position="begin"><argument-map index="1" meta-name="%1" />
            if(QWidgetItem.hasWidgetItemV2(%1))
                throw new IllegalArgumentException("Widget is already a layout member.");
            </inject-code>
        </modify-function>
        <modify-function signature="addWidget(QWidget *)" remove="all" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <no-null-pointer/>
                <reference-count action="add" declare-variable="QLayout" variable-name="__rcLayoutedObjects" condition="%1.parent()==null"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addItem(QLayoutItem *)">
            <modify-argument index="1" invalidate-after-use="yes">
                <!-- FIXME: Maybe we should have a use/inherit ownership rule from base-class -->
                <no-null-pointer/>
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addItem(QLayoutItem *, int, int, int, int, QFlags&lt;Qt::AlignmentFlag&gt;)">
            <modify-argument index="1" invalidate-after-use="yes">
                <no-null-pointer/>
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
            <inject-code class="java" position="1">
                <argument-map index="1" meta-name="%1"/>
                QWidget widget = %1.widget();
            </inject-code>
            <inject-code class="java" position="end">
                if(widget!=null &amp;&amp; widget.parent()==null){
                    QtJambi_LibraryUtilities.internal.addReferenceCount(this, io.qt.widgets.QLayout.class, "__rcLayoutedObjects", false, false, widget);
                }
            </inject-code>
        </modify-function>
        <modify-function signature="getItemPosition(int,int*,int*,int*,int*)const">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QGridLayout$ItemInfo"/>
                <conversion-rule class="native">
                    %out = Java::QtWidgets::QGridLayout$ItemInfo::newInstance(%env, %2, %3, %4, %5);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QGridLayout___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QWizardPage">
        <modify-function signature="registerField(const QString &amp;, QWidget *, const char *, const char *)" thread-affine="ui">
            <modify-argument index="3">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <modify-argument index="4">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <inject-code class="java" position="beginning">
                if(changedSignal!=null &amp;&amp; !changedSignal.isEmpty()) {
                    io.qt.core.QMetaMethod sig = widget.metaObject().method(changedSignal);
                    if(sig.methodType()==io.qt.core.QMetaMethod.MethodType.Signal) {
                        changedSignal = "2"+sig.cppMethodSignature().toString();
                    }
                }
            </inject-code>
        </modify-function>
    </object-type>
    
    <object-type name="QGraphicsView">
        <modify-function signature="drawItems(QPainter*,int,QGraphicsItem**,const QStyleOptionGraphicsItem*)" thread-affine="yes">
            <modify-argument index="1" invalidate-after-use="yes" />
            <modify-argument index="3">
                <array-type length-parameter="2"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type length-parameter="2"/>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QGraphicsScene">
        <extra-includes>
        <include file-name="io.qt.core.*" location="java"/>
        <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QGraphicsScene___" quote-before-line="}// class"/>
        </inject-code>

        <modify-function signature="addEllipse(const QRectF &amp;, const QPen &amp;, const QBrush &amp;)" remove="all" />
        <modify-function signature="addEllipse(qreal, qreal, qreal, qreal, const QPen &amp;, const QBrush &amp;)" remove="all" />
        <modify-function signature="addLine(const QLineF &amp;, const QPen &amp;)" remove="all" />
        <modify-function signature="addLine(qreal, qreal, qreal, qreal, const QPen &amp;)" remove="all" />
        <modify-function signature="addPath(const QPainterPath &amp;, const QPen &amp;, const QBrush &amp;)" remove="all" />
        <modify-function signature="addPixmap(const QPixmap &amp;)" remove="all" />
        <modify-function signature="addPolygon(const QPolygonF &amp;, const QPen &amp;, const QBrush &amp;)" remove="all" />
        <modify-function signature="addRect(const QRectF &amp;, const QPen &amp;, const QBrush &amp;)" remove="all" />
        <modify-function signature="addRect(qreal, qreal, qreal, qreal, const QPen &amp;, const QBrush &amp;)" remove="all" />
        <modify-function signature="addSimpleText(const QString &amp;, const QFont &amp;)" remove="all" />
        <modify-function signature="addText(const QString &amp;, const QFont &amp;)" remove="all" />

        <modify-function signature="drawItems(QPainter*,int,QGraphicsItem**,const QStyleOptionGraphicsItem*,QWidget*)">
            <modify-argument index="1" invalidate-after-use="yes" />
            <modify-argument index="3">
                <array-type length-parameter="2"/>
            </modify-argument>
            <modify-argument index="4">
                <array-type length-parameter="2"/>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QProgressDialog">
        <modify-function signature="open(QObject*,const char*)" remove="all" />
    </object-type>

    <object-type name="QMessageBox">
        <modify-function signature="open(QObject*,const char*)" remove="all" />
        <modify-function signature="information(QWidget *, QString, QString, QFlags&lt;QMessageBox::StandardButton>, QMessageBox::StandardButton)" thread-affine="ui"/>
        <modify-function signature="question(QWidget *, QString, QString, QFlags&lt;QMessageBox::StandardButton>, QMessageBox::StandardButton)" thread-affine="ui"/>
        <modify-function signature="warning(QWidget *, QString, QString, QFlags&lt;QMessageBox::StandardButton>, QMessageBox::StandardButton)" thread-affine="ui"/>
        <modify-function signature="critical(QWidget *, QString, QString, QFlags&lt;QMessageBox::StandardButton>, QMessageBox::StandardButton)" thread-affine="ui"/>
        <modify-function signature="about(QWidget *, QString, QString)" thread-affine="ui"/>
        <modify-function signature="aboutQt(QWidget *, QString)" thread-affine="ui"/>
    </object-type>

    <object-type name="QWidget">
        <extra-includes since="6.3.0">
        <include file-name="io.qt.core.*" location="java"/>
        <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
        <inject-code since="6.3.0">
            <insert-template name="widget.addAction_with_shortcut">
                <replace from="%EXTRA " to=""/>
                <replace from="%CALL_EXTRA " to=""/>
            </insert-template>
            <insert-template name="widget.addAction_with_shortcut">
                <replace from="%EXTRA" to="QIcon icon,"/>
                <replace from="%CALL_EXTRA" to="icon,"/>
            </insert-template>
        </inject-code>
        <modify-function signature="paintEvent(QPaintEvent*)" thread-affine="ui">
            <inject-code class="shell" position="beginning">
            QTJAMBI_ABOUT_TO_PAINT(%env, __java_this)
            </inject-code>
        </modify-function>
        <modify-function signature="setWindowTitle(const QString &amp;)" thread-affine="ui">
            <inject-code class="native" position="beginning"><argument-map index="1" meta-name="%1"/>
            if (QMessageBox* box = dynamic_cast&lt;QMessageBox*>(__qt_this)) {
                box->setWindowTitle(__qt_%1);
                return;
            }
            </inject-code>
        </modify-function>


        <modify-function signature="setWindowModality(Qt::WindowModality)" thread-affine="ui">
            <inject-code class="native" position="beginning"><argument-map index="1" meta-name="%1"/>
            if (QMessageBox* box = dynamic_cast&lt;QMessageBox*>(__qt_this)) {
                box->setWindowModality(__qt_%1);
                return;
            }
            </inject-code>
        </modify-function>
        <modify-function signature="grabGesture(Qt::GestureType, QFlags&lt;Qt::GestureFlag&gt;)" thread-affine="ui">
            <modify-argument index="2">
              <replace-default-expression with="new io.qt.core.Qt.GestureFlag[0]"/>
            </modify-argument>
        </modify-function>
        
        <modify-function signature="grab(const QRect &amp;)" thread-affine="ui">
            <modify-argument index="1">
              <replace-default-expression with="new io.qt.core.QRect(new io.qt.core.QPoint(0, 0), new io.qt.core.QSize(-1, -1))"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="getContentsMargins(int*,int*,int*,int*)const" until="5.*" thread-affine="ui">
            <inject-code position="beginning">
                <argument-map index="1" meta-name="%1" />
                if(%1.length&lt;4) throw new IllegalArgumentException("An array of length 4 expected.");
            </inject-code>
            <modify-argument index="1" rename="margins">
                <replace-type modified-type="int[]"/>
                <conversion-rule class="native">
                jsize %out_size = 4;
                int* %out = qtjambi_array_cast&lt;int*>(%env, %scope, %in, %out_size);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                int* %out = __qt_%1+1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                int* %out = __qt_%1+2;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                int* %out = __qt_%1+3;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QDateTimeEdit">
         <modify-function signature="initStyleOption(QStyleOptionSpinBox*)const" access="friendly" rename="_initStyleOption">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionSpinBox"/>
                <conversion-rule class="native">
                    QStyleOptionSpinBox* %out = qtjambi_cast&lt;QStyleOptionSpinBox*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QAbstractSpinBox">
        <inject-code class="java" position="beginning">
        @io.qt.QtUninvokable
        protected final void initStyleOption(io.qt.widgets.QStyleOptionSpinBox option){
            if(this instanceof QDateTimeEdit){
                ((QDateTimeEdit)this)._initStyleOption(option);
                return;
            }
            _initStyleOption(option);
        }
        </inject-code>
        <modify-function signature="initStyleOption(QStyleOptionSpinBox*)const" access="private" rename="_initStyleOption">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionSpinBox"/>
                <conversion-rule class="native">
                    QStyleOptionSpinBox* %out = qtjambi_cast&lt;QStyleOptionSpinBox*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="fixup(QString&amp;)const">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="shell">
                    jstring %out = qtjambi_cast&lt;jstring>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QString %out = qtjambi_cast&lt;QString>(%env, %in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    jstring %out = qtjambi_cast&lt;jstring>(%env, __qt_%1);
                </conversion-rule>
                <conversion-rule class="shell">
                    %1 = qtjambi_cast&lt;QString>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="validate(QString&amp;,int&amp;)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.gui.QValidator$QValidationData"/>
                <conversion-rule class="shell">
                    <insert-template name="gui.convert_validationdata_to_java">
                        <replace from="%STRING" to="%1"/>
                        <replace from="%POS" to="%2"/>
                    </insert-template>
                </conversion-rule>
                <conversion-rule class="native">
                    <insert-template name="gui.convert_validationdata_to_string"/>
                </conversion-rule>
            </modify-argument>

            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="shell">
                    // nothing needed
                </conversion-rule>
                <conversion-rule class="native">
                    <insert-template name="gui.convert_validationdata_to_pos">
                        <replace from="%VALIDATIONDATA" to="%1"/>
                    </insert-template>
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end"><argument-map index="1" meta-name="%1"/>
                <insert-template name="gui.cleanup_validationdata_from_java"/>
            </inject-code>
            <inject-code class="shell" position="end"><argument-map index="1" meta-name="%STRING"/><argument-map index="2" meta-name="%POS"/>
                <insert-template name="gui.cleanup_validationdata_to_java"/>
            </inject-code>
        </modify-function>
    </object-type>

    <object-type name="QSlider">
        <modify-function signature="initStyleOption(QStyleOptionSlider*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionSlider"/>
                <conversion-rule class="native">
                    QStyleOptionSlider* %out = qtjambi_cast&lt;QStyleOptionSlider*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QLabel">
        <modify-function signature="picture()const" until="5.14">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.gui.QPicture"/>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="pixmap()const" until="5.14">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.gui.QPixmap"/>
                <conversion-rule class="native">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="picture()const" remove="all" since="5.15.0"/>
        <modify-function signature="pixmap()const" remove="all" since="5.15.0"/>
        <modify-function signature="picture(Qt::ReturnByValueConstant)const" since="5.15.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    Qt::ReturnByValueConstant %out = Qt::ReturnByValue;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="pixmap(Qt::ReturnByValueConstant)const" since="5.15.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    Qt::ReturnByValueConstant %out = Qt::ReturnByValue;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QColorDialog">
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QColorDialog__java_" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="getColor(const QColor &amp;, QWidget *, const QString &amp;, QFlags&lt;QColorDialog::ColorDialogOption>)" thread-affine="ui">
            <modify-argument index="1">
                <replace-default-expression with="new io.qt.gui.QColor(io.qt.core.Qt.GlobalColor.white)"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="open(QObject*,const char*)" thread-affine="yes">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <inject-code class="java" position="beginning">
                if(!member.startsWith("1") || !member.startsWith("2")) member = '1'+member;
            </inject-code>
        </modify-function>
        <modify-function signature="getRgba(uint,bool*,QWidget*)" thread-affine="ui" until="5.*">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Integer"/>
                <conversion-rule class="native">
                    %out = ok ? qtjambi_from_int(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QInputDialog">
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QInputDialog__java_" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="open(QObject*,const char*)" thread-affine="yes">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <inject-code class="java" position="beginning">
                if(!member.startsWith("1") || !member.startsWith("2")) member = '1'+member;
            </inject-code>
        </modify-function>
        <modify-function signature="getInt(QWidget*,const QString &amp;,const QString &amp;,int,int,int,int,bool*,QFlags&lt;Qt::WindowType&gt;)" thread-affine="ui">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Integer"/>
                <conversion-rule class="native">
                    %out = ok ? qtjambi_from_int(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="8">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <!-- This API is double even on ARM -->
        <modify-function signature="getDouble(QWidget *, const QString &amp;, const QString &amp;, double, double, double, int, bool *, QFlags&lt;Qt::WindowType&gt;)" thread-affine="ui" until="5.*">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Double"/>
                <conversion-rule class="native">
                    %out = ok ? qtjambi_from_double(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="8">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        
        <modify-function signature="getDouble(QWidget *, const QString &amp;, const QString &amp;, double, double, double, int, bool *, QFlags&lt;Qt::WindowType&gt;, double)" thread-affine="ui">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.Double"/>
                <conversion-rule class="native">
                    %out = ok ? qtjambi_from_double(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="8">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        
        <modify-function signature="getItem(QWidget*,QString,QString,QStringList,int,bool,bool*,QFlags&lt;Qt::WindowType>,QFlags&lt;Qt::InputMethodHint>)" thread-affine="ui">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    %out = ok ? qtjambi_cast&lt;jstring>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="7">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="getText(QWidget *, const QString &amp;, const QString &amp;, QLineEdit::EchoMode, const QString &amp;, bool *, QFlags&lt;Qt::WindowType&gt;,QFlags&lt;Qt::InputMethodHint>)" thread-affine="ui">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    %out = ok ? qtjambi_cast&lt;jstring>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="6">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        
        <modify-function signature="getMultiLineText(QWidget *, const QString &amp;, const QString &amp;, const QString &amp;, bool *, QFlags&lt;Qt::WindowType&gt;,QFlags&lt;Qt::InputMethodHint>)" thread-affine="ui">
            <modify-argument index="0">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    %out = ok ? qtjambi_cast&lt;jstring>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QFileDialog">
        <extra-includes>
            <include file-name="qtjambi_widgets_repository.h" location="local"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QFileDialog__java_" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="open(QObject*,const char*)" thread-affine="yes">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <inject-code class="java" position="beginning">
                if(!member.startsWith("1") || !member.startsWith("2")) member = '1'+member;
            </inject-code>
        </modify-function>
        <modify-function signature="getExistingDirectory(QWidget*,QString,QString,QFlags&lt;QFileDialog::Option&gt;)" thread-affine="ui">
            <modify-argument index="0">
                <conversion-rule class="native">
                    %out = %in.isEmpty() ? nullptr : qtjambi_cast&lt;jstring>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getExistingDirectoryUrl(QWidget*,QString,QUrl,QFlags&lt;QFileDialog::Option&gt;,QStringList)" thread-affine="ui">
            <modify-argument index="0">
                <conversion-rule class="native">
                    %out = %in.isEmpty() ? nullptr : qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getOpenFileName(QWidget*,QString,QString,QString,QString*,QFlags&lt;QFileDialog::Option&gt;)" thread-affine="ui">
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFileDialog$Result&lt;java.lang.String>"/>
                <conversion-rule class="native">
                    if(!%in.isEmpty()){
                        %out = Java::QtWidgets::QFileDialog$Result::newInstance(%env, qtjambi_cast&lt;jstring>(%env, %in), qtjambi_cast&lt;jobject>(%env, %5));
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getOpenFileNames(QWidget*,QString,QString,QString,QString*,QFlags&lt;QFileDialog::Option&gt;)" thread-affine="ui">
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFileDialog$Result&lt;java.util.List&lt;java.lang.String>>"/>
                <conversion-rule class="native">
                    if(!%in.isEmpty()){
                        %out = Java::QtWidgets::QFileDialog$Result::newInstance(%env, qtjambi_cast&lt;jobject>(%env, %in), qtjambi_cast&lt;jobject>(%env, %5));
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="getSaveFileName(QWidget*,QString,QString,QString,QString*,QFlags&lt;QFileDialog::Option&gt;)" thread-affine="ui">
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFileDialog$Result&lt;java.lang.String>"/>
                <conversion-rule class="native">
                    if(!%in.isEmpty()){
                        %out = Java::QtWidgets::QFileDialog$Result::newInstance(%env, qtjambi_cast&lt;jstring>(%env, %in), qtjambi_cast&lt;jobject>(%env, %5));
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        
        <modify-function signature="getOpenFileUrl(QWidget*,QString,QUrl,QString,QString*,QFlags&lt;QFileDialog::Option&gt;,QStringList)" thread-affine="ui">
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFileDialog$Result&lt;io.qt.core.QUrl>"/>
                <conversion-rule class="native">
                    if(!%in.isEmpty()){
                        %out = Java::QtWidgets::QFileDialog$Result::newInstance(%env, qtjambi_cast&lt;jobject>(%env, %in), qtjambi_cast&lt;jobject>(%env, %5));
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getOpenFileUrls(QWidget*,QString,QUrl,QString,QString*,QFlags&lt;QFileDialog::Option&gt;,QStringList)" thread-affine="ui">
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFileDialog$Result&lt;java.util.List&lt;io.qt.core.QUrl>>"/>
                <conversion-rule class="native">
                    if(!%in.isEmpty()){
                        %out = Java::QtWidgets::QFileDialog$Result::newInstance(%env, qtjambi_cast&lt;jobject>(%env, %in), qtjambi_cast&lt;jobject>(%env, %5));
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getSaveFileUrl(QWidget*,QString,QUrl,QString,QString*,QFlags&lt;QFileDialog::Option&gt;,QStringList)" thread-affine="ui">
            <modify-argument index="5">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QFileDialog$Result&lt;io.qt.core.QUrl>"/>
                <conversion-rule class="native">
                    if(!%in.isEmpty()){
                        %out = Java::QtWidgets::QFileDialog$Result::newInstance(%env, qtjambi_cast&lt;jobject>(%env, %in), qtjambi_cast&lt;jobject>(%env, %5));
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getOpenFileContent(QString, std::function&lt;void(const QString&amp;,const QByteArray&amp;)>)" thread-affine="ui">
            <modify-argument index="2">
                <replace-default-expression with="null"/>
                <replace-type modified-type="java.util.function.BiConsumer&lt;String,io.qt.core.QByteArray>"/>
                <conversion-rule class="native">
                    std::function&lt;void(const QString&amp;,const QByteArray&amp;)> %out;
                    if(%in){
                        JObjectWrapper wrapper(%env, %in);
                        %out = [wrapper](const QString&amp; value1,const QByteArray&amp; value2){
                                    if(JNIEnv *env = qtjambi_current_environment()){
                                        QTJAMBI_JNI_LOCAL_FRAME(env, 200)
                                        jobject _value1 = qtjambi_cast&lt;jobject>(env, value1);
                                        jobject _value2 = qtjambi_cast&lt;jobject>(env, value2);
                                        Java::Runtime::BiConsumer::accept(env, wrapper.object(), _value1, _value2);
                                    }
                                };
                    }
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setIconProvider(QAbstractFileIconProvider *)" since="6.0.0">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcIconProvider"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setIconProvider(QFileIconProvider*)" until="5.*">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcIconProvider"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setItemDelegate(QAbstractItemDelegate*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcItemDelegate"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QFontDialog">
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QFontDialog__java_" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="open(QObject*,const char*)" thread-affine="yes">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String" />
            </modify-argument>
            <inject-code class="java" position="beginning">
                if(!member.startsWith("1") || !member.startsWith("2")) member = '1'+member;
            </inject-code>
        </modify-function>
        <modify-function signature="getFont(bool*,QFont,QWidget*,QString,QFlags&lt;QFontDialog::FontDialogOption&gt;)" thread-affine="ui">
            <modify-argument index="0">
                <conversion-rule class="native">
                    %out = ok ? qtjambi_cast&lt;jobject>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="getFont(bool*,QWidget*)" thread-affine="ui">
            <modify-argument index="0">
                <conversion-rule class="native">
                    %out = ok ? qtjambi_cast&lt;jobject>(%env, %in) : nullptr;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    bool ok(false);
                    bool* %out = &amp;ok;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QTabBar">
        <modify-function signature="initStyleOption(QStyleOptionTab*,int)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionTab"/>
                <conversion-rule class="native">
                    QStyleOptionTab* %out = qtjambi_cast&lt;QStyleOptionTab*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QRadioButton">
        <modify-function signature="initStyleOption(QStyleOptionButton*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionButton"/>
                <conversion-rule class="native">
                    QStyleOptionButton* %out = qtjambi_cast&lt;QStyleOptionButton*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QScrollBar">
        <modify-function signature="initStyleOption(QStyleOptionSlider*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionSlider"/>
                <conversion-rule class="native">
                    QStyleOptionSlider* %out = qtjambi_cast&lt;QStyleOptionSlider*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QAbstractScrollArea">
        <extra-includes>
        <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QAbstractScrollArea___" quote-before-line="}// class"/>
        </inject-code>
    </object-type>
    <object-type name="QRubberBand">
        <modify-function signature="initStyleOption(QStyleOptionRubberBand*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionRubberBand"/>
                <conversion-rule class="native">
                    QStyleOptionRubberBand* %out = qtjambi_cast&lt;QStyleOptionRubberBand*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QSplitter">
        <extra-includes>
            <include file-name="qtjambi_widgets_repository.h" location="local"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QSplitter___" quote-before-line="}// class"/>
        </inject-code>
        <modify-function signature="getRange(int,int*,int*)const">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    jint %in;
                    int* %out = reinterpret_cast&lt;int*>(&amp;%in);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="0">
                <replace-type modified-type="io.qt.widgets.QSplitter$Range"/>
                <conversion-rule class="native">
                    %out = Java::QtWidgets::QSplitter$Range::newInstance(%env, %2, %3);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QGroupBox">
        <modify-function signature="initStyleOption(QStyleOptionGroupBox*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionGroupBox"/>
                <conversion-rule class="native">
                    QStyleOptionGroupBox* %out = qtjambi_cast&lt;QStyleOptionGroupBox*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QDial">
        <modify-function signature="initStyleOption(QStyleOptionSlider*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionSlider"/>
                <conversion-rule class="native">
                    QStyleOptionSlider* %out = qtjambi_cast&lt;QStyleOptionSlider*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QLineEdit">
        <extra-includes>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
        </extra-includes>
        <modify-function signature="initStyleOption(QStyleOptionFrame*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionFrame"/>
                <conversion-rule class="native">
                    QStyleOptionFrame* %out = qtjambi_cast&lt;QStyleOptionFrame*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QToolBar">
        <extra-includes until="6.2.*">
            <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
        <modify-function signature="initStyleOption(QStyleOptionToolBar*)const">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.widgets.QStyleOptionToolBar"/>
                <conversion-rule class="native">
                    QStyleOptionToolBar* %out = qtjambi_cast&lt;QStyleOptionToolBar*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code until="6.2.*">
            <insert-template name="gui.addAction">
                <replace from="%POST_CALL" to=""/>
                <replace from=" %END_EXTRA" to=""/>
                <replace from=" %END_CALL_EXTRA" to=""/>
                <replace from="%EXTRA" to="QIcon icon,"/>
                <replace from="%CALL_EXTRA" to="icon,"/>
                <replace from=" %INFIX_EXTRA" to=""/>
                <replace from=" %CONNECTION_TYPE" to=""/>
                <replace from=" %USE_CONNECTION_TYPE" to=""/>
            </insert-template>
            <insert-template name="gui.addAction">
                <replace from="%POST_CALL" to=""/>
                <replace from=" %END_EXTRA" to=""/>
                <replace from=" %END_CALL_EXTRA" to=""/>
                <replace from="%EXTRA " to=""/>
                <replace from=" %INFIX_EXTRA" to=""/>
                <replace from="%CALL_EXTRA " to=""/>
                <replace from=" %CONNECTION_TYPE" to=""/>
                <replace from=" %USE_CONNECTION_TYPE" to=""/>
            </insert-template>
        </inject-code>
    </object-type>

    <object-type name="QAction">
        <extra-includes>
        <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QAction___" quote-before-line="}// class"/>
        </inject-code>

        <modify-function signature="setActionGroup(QActionGroup*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code position="end">
                <argument-map index="1" meta-name="%1"/>
            if (__rcActionGroup != null) {
                QtJambi_LibraryUtilities.internal.removeFromCollectionReferenceCount(__rcActionGroup, QActionGroup.class, "__rcActions", false, this);
            }
            __rcActionGroup = %1;
            if (__rcActionGroup != null) {
                QtJambi_LibraryUtilities.internal.addReferenceCount(__rcActionGroup, QActionGroup.class, "__rcActions", false, false, this);
            }
            </inject-code>
        </modify-function>
    </object-type>


    <object-type name="QApplication">
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QApplication___" quote-before-line="}// class"/>
        </inject-code>
        <extra-includes>
            <include file-name="QtCore/private/qthread_p.h" location="global"/>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
            <include file-name="qtjambi/qtjambi_application.h" location="global"/>
            <include file-name="qtjambi/qtjambi_nativeinterface.h" location="global"/>
        </extra-includes>
        <modify-function signature="QApplication(int &amp;, char **, int)"><!-- since 4.8, was 2 arg -->
            <access modifier="protected"/>
            <inject-code class="native" position="beginning">
                if(!Java::QtCore::QCoreApplication::__qt_isInitializing(%env)){
                    JavaException::raiseIllegalAccessError(%env, "Not allowed to instantiate QApplication. Please use QGuiApplication.initialize() instead." QTJAMBI_STACKTRACEINFO );
                    return;
                }
            </inject-code>
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    // nothing to do
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String[]"/>
                <conversion-rule class="native">
                    std::unique_ptr&lt;ApplicationData> applicationData(new ApplicationData(%env, jobjectArray(%in)));
                    char** %out = applicationData->chars();
                    int&amp; __qt_%1 = applicationData->size();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
            </modify-argument>
            <inject-code class="native" position="end">
                QTJAMBI_SET_OBJECTUSERDATA(ApplicationData, __qt_this, applicationData.release());
            </inject-code>
        </modify-function>
        <!-- We implement a custom Java wrapper to this -->
        <modify-function signature="exec()">
            <inject-code class="native" position="beginning">
            QCoreApplication* instance = QCoreApplication::instance();
            if (!instance)
                JavaException::raiseRuntimeException(%env, "QApplication has not been initialized with QApplication.initialize()" QTJAMBI_STACKTRACEINFO );
            else if(instance->thread()!=QThread::currentThread())
                JavaException::raiseRuntimeException(%env, "exec() must be called from the main thread." QTJAMBI_STACKTRACEINFO );
            else if(QThreadData::get2(instance->thread())->eventLoops.size()>0)
                JavaException::raiseRuntimeException(%env, "The event loop is already running." QTJAMBI_STACKTRACEINFO );
            </inject-code>
        </modify-function>
        <template name="gui.application_char_pointer_function">
        public static %RETURN_TYPE %FUNCTION_NAME(%PRE_ARGUMENTS %COMMA QByteArray className) {
            return %FUNCTION_NAME(%PRE_CALL_ARGUMENTS %COMMA className == null ? null : className.data());
        }
        </template>
        <modify-function signature="font(const char*)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setFont(QFont,const char*)" thread-affine="ui">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="palette(const char*)">
            <modify-argument index="1">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setPalette(QPalette,const char*)" thread-affine="ui">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="notify(QObject *, QEvent *)">
            <modify-argument index="1" thread-affine="yes"/>
        </modify-function>
        <modify-function signature="aboutQt()" thread-affine="ui"/>
        <modify-function signature="resolveInterface(const char *, int)const" access="private" since="6.2.0">
            <modify-argument index="0">
                <replace-type modified-type="&lt;QNativeInterface extends io.qt.QtObjectInterface> QNativeInterface"/>
                <conversion-rule class="native">
                    jobject %out = qtjambi_from_object(%env, %in, %1, false, false);
                    qtjambi_register_dependent_interface(%env, %out, __this_nativeId);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="1">
                <replace-type modified-type="java.lang.Class&lt;QNativeInterface>"/>
                <conversion-rule class="native">
                    NITypeInfo info = qtjambi_get_native_interface_info(%env, %in);
                    const char* %out = info.name;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <conversion-rule class="native">
                    int %out = info.revision;
                </conversion-rule>
                <remove-argument/>
            </modify-argument>
        </modify-function>
    </object-type>

    <interface-type name="QGraphicsLayoutItem">
       <extra-includes>
            <include file-name="QObject" location="global"/>
            <include file-name="QGraphicsWidget" location="global"/>
            <include file-name="QGraphicsObject" location="global"/>
        </extra-includes>
        <modify-function signature="QGraphicsLayoutItem(QGraphicsLayoutItem*)" until="5.14">
            <inject-code>
                <argument-map index="1" meta-name="%1" />
                if (%1 instanceof QGraphicsWidget)
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="QGraphicsLayoutItem(QGraphicsLayoutItem*,bool)" since="5.15.0">
            <inject-code>
                <argument-map index="1" meta-name="%1" />
                if (%1 instanceof QGraphicsWidget)
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="setParentLayoutItem(QGraphicsLayoutItem*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore" />
            </modify-argument>
            <inject-code>
                <argument-map index="1" meta-name="%1" />
                if (%1 instanceof QGraphicsWidget)
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
                else
                    QtJambi_LibraryUtilities.internal.setDefaultOwnership(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="getContentsMargins(qreal*,qreal*,qreal*,qreal*)const">
            <inject-code position="beginning">
                <argument-map index="1" meta-name="%1" />
                if(%1.length&lt;4) throw new IllegalArgumentException("An array of length 4 expected.");
            </inject-code>
            <modify-argument index="1" rename="margins">
                <replace-type modified-type="double[]"/>
                <conversion-rule class="native">
                jsize %out_size = 4;
                qreal* %out = qtjambi_array_cast&lt;qreal*>(%env, %scope, %in, %out_size);
                </conversion-rule>
                <conversion-rule class="shell">
                qreal array[4];
                if(%1)
                    array[0] = *%1;
                if(%2)
                    array[1] = *%2;
                if(%3)
                    array[2] = *%3;
                if(%4)
                    array[3] = *%4;
                DoublePointerArray pointerArray(%env, array, 4);
                jdoubleArray %out = pointerArray.array();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+2;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+3;
                </conversion-rule>
            </modify-argument>
            <inject-code class="shell" position="end">
                <argument-map index="1" meta-name="%1" />
                <argument-map index="2" meta-name="%2" />
                <argument-map index="3" meta-name="%3" />
                <argument-map index="4" meta-name="%4" />
                    if(%1)
                        *%1 = array[0];
                    if(%2)
                        *%2 = array[1];
                    if(%3)
                        *%3 = array[2];
                    if(%4)
                        *%4 = array[3];
            </inject-code>
        </modify-function>
        <modify-function signature="setOwnedByLayout(bool)">
            <inject-code position="beginning">
                boolean oldValue = this.ownedByLayout();
            </inject-code>
            <inject-code position="end"><argument-map index="1" meta-name="%1" />
                if(oldValue!=%1) {
                    if(%1) {
                        if(this.parentLayoutItem()!=null &amp;&amp; QtJambi_LibraryUtilities.internal.isJavaOwnership(this)) {
                            QtJambi_LibraryUtilities.internal.setCppOwnership(this);
                        }
                    }else {
                        QtJambi_LibraryUtilities.internal.setDefaultOwnership(this);
                    }
                }
            </inject-code>
        </modify-function>
        <inject-code class="interface">
            /**
             * @see #getContentsMargins(double[])
             */
            @io.qt.QtDeclaredFinal
            @io.qt.QtUninvokable
            public default io.qt.core.QMarginsF contentsMargins(){
                double[] mrg = {0.0, 0.0, 0.0, 0.0};
                getContentsMargins(mrg);
                return new io.qt.core.QMarginsF(mrg[0], mrg[1], mrg[2], mrg[3]);
            }
        </inject-code>
    </interface-type>
    
    <object-type name="QGraphicsLayout">
       <extra-includes>
            <include file-name="QObject" location="global"/>
            <include file-name="QGraphicsWidget" location="global"/>
            <include file-name="QGraphicsObject" location="global"/>
        </extra-includes>
        <modify-function signature="QGraphicsLayout(QGraphicsLayoutItem*)">
            <inject-code>
                <argument-map index="1" meta-name="%1" />
                if (%1 instanceof QGraphicsWidget)
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>
        <modify-function signature="removeAt ( int )">
        <inject-code position="beginning">
            <argument-map index="1" meta-name="%1" />
            QGraphicsLayoutItem __item = itemAt(%1);
        </inject-code>
        <inject-code position="end">
            <argument-map index="1" meta-name="%1" />
            if(__item != null){
                QtJambi_LibraryUtilities.internal.setDefaultOwnership(__item);
            }
        </inject-code>
        </modify-function>
        <modify-function signature="getContentsMargins(qreal*,qreal*,qreal*,qreal*)const">
            <inject-code position="beginning">
                <argument-map index="1" meta-name="%1" />
                if(%1.length&lt;4) throw new IllegalArgumentException("An array of length 4 expected.");
            </inject-code>
            <modify-argument index="1" rename="margins">
                <replace-type modified-type="double[]"/>
                <conversion-rule class="native">
                jsize %out_size = 4;
                qreal* %out = qtjambi_array_cast&lt;qreal*>(%env, %scope, %in, %out_size);
                </conversion-rule>
                <conversion-rule class="shell">
                qreal array[4];
                if(%1)
                    array[0] = *%1;
                if(%2)
                    array[1] = *%2;
                if(%3)
                    array[2] = *%3;
                if(%4)
                    array[3] = *%4;
                %scope.addFinalAction([&amp;](){
                    if(%1)
                        *%1 = array[0];
                    if(%2)
                        *%2 = array[1];
                    if(%3)
                        *%3 = array[2];
                    if(%4)
                        *%4 = array[3];
                });
                jdoubleArray %out = qtjambi_array_cast&lt;jdoubleArray>(%env, %scope, array, 4);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+2;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+3;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QGraphicsAnchorLayout">
       <extra-includes>
            <include file-name="QObject" location="global"/>
            <include file-name="QGraphicsWidget" location="global"/>
            <include file-name="QGraphicsObject" location="global"/>
        </extra-includes>
        <modify-function signature="QGraphicsAnchorLayout(QGraphicsLayoutItem*)">
            <inject-code>
                <argument-map index="1" meta-name="%1" />
                if (%1 instanceof QGraphicsWidget)
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>
    </object-type>
    
    <object-type name="QGraphicsGridLayout">
       <extra-includes>
            <include file-name="QObject" location="global"/>
            <include file-name="QGraphicsWidget" location="global"/>
            <include file-name="QGraphicsObject" location="global"/>
        </extra-includes>
        <modify-function signature="QGraphicsGridLayout(QGraphicsLayoutItem*)">
            <inject-code>
                <argument-map index="1" meta-name="%1" />
                if (%1 instanceof QGraphicsWidget)
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>
    </object-type>
    
    <object-type name="QGraphicsLinearLayout">
       <extra-includes>
            <include file-name="QObject" location="global"/>
            <include file-name="QGraphicsWidget" location="global"/>
            <include file-name="QGraphicsObject" location="global"/>
        </extra-includes>
        <modify-function signature="QGraphicsLinearLayout(QGraphicsLayoutItem*)">
            <inject-code>
                <argument-map index="1" meta-name="%1" />
                if (%1 instanceof QGraphicsWidget)
                    QtJambi_LibraryUtilities.internal.setCppOwnership(%this);
            </inject-code>
        </modify-function>
    </object-type>
    
    <object-type name="QGraphicsProxyWidget">
    <modify-function signature="setWidget(QWidget*)" thread-affine="yes">
        <modify-argument index="1" thread-affine="yes">
            <reference-count action="ignore" />
        </modify-argument>
        <inject-code>
            <argument-map index="1" meta-name="%1" />
            if (%1 != null)
                QtJambi_LibraryUtilities.internal.setCppOwnership(%1);
            else if (widget() != null)
                QtJambi_LibraryUtilities.internal.setDefaultOwnership(widget());
        </inject-code>
    </modify-function>
    </object-type>
    <object-type name="QGraphicsWidget">
        <modify-function signature="setLayout(QGraphicsLayout*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
            <inject-code position="beginning">
                <argument-map index="1" meta-name="%1" />
                if(layout!=null &amp;&amp; layout.parentLayoutItem()!=null &amp;&amp; layout.parentLayoutItem()!=this) {
                    throw new IllegalArgumentException("Layout is already in use.");
                }
            </inject-code>
        </modify-function>
        <modify-function signature="getContentsMargins(qreal*,qreal*,qreal*,qreal*)const">
            <inject-code position="beginning">
                <argument-map index="1" meta-name="%1" />
                if(%1.length&lt;4) throw new IllegalArgumentException("An array of length 4 expected.");
            </inject-code>
            <modify-argument index="1" rename="margins">
                <replace-type modified-type="double[]"/>
                <conversion-rule class="native">
                jsize %out_size = 4;
                qreal* %out = qtjambi_array_cast&lt;qreal*>(%env, %scope, %in, %out_size);
                </conversion-rule>
                <conversion-rule class="shell">
                qreal array[4];
                if(%1)
                    array[0] = *%1;
                if(%2)
                    array[1] = *%2;
                if(%3)
                    array[2] = *%3;
                if(%4)
                    array[3] = *%4;
                DoublePointerArray pointerArray(%env, array, 4);
                jdoubleArray %out = pointerArray.array();
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+2;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+3;
                </conversion-rule>
            </modify-argument>
            <inject-code class="shell" position="end">
                <argument-map index="1" meta-name="%1" />
                <argument-map index="2" meta-name="%2" />
                <argument-map index="3" meta-name="%3" />
                <argument-map index="4" meta-name="%4" />
                    if(%1)
                        *%1 = array[0];
                    if(%2)
                        *%2 = array[1];
                    if(%3)
                        *%3 = array[2];
                    if(%4)
                        *%4 = array[3];
            </inject-code>
        </modify-function>
        <modify-function signature="getWindowFrameMargins(qreal*,qreal*,qreal*,qreal*)const">
            <inject-code position="beginning">
                <argument-map index="1" meta-name="%1" />
                if(%1.length&lt;4) throw new IllegalArgumentException("An array of length 4 expected.");
            </inject-code>
            <modify-argument index="1" rename="margins">
                <replace-type modified-type="double[]"/>
                <conversion-rule class="native">
                jsize %out_size = 4;
                qreal* %out = qtjambi_array_cast&lt;qreal*>(%env, %scope, %in, %out_size);
                </conversion-rule>
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+1;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+2;
                </conversion-rule>
            </modify-argument>
            <modify-argument index="4">
                <remove-argument/>
                <conversion-rule class="native">
                qreal* %out = __qt_%1+3;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QGraphicsWidget___" quote-before-line="}// class"/>
        </inject-code>

        <modify-function signature="initStyleOption(QStyleOption*)const">
            <modify-argument index="1" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.widgets.QStyleOption" />
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>

        <modify-function signature="paintWindowFrame(QPainter*,const QStyleOptionGraphicsItem*,QWidget*)">
            <modify-argument index="2">
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    const QStyleOptionGraphicsItem *%out = qtjambi_cast&lt;QStyleOptionGraphicsItem *>(%env, %in);
                </conversion-rule>
                <replace-type modified-type="io.qt.widgets.QStyleOptionGraphicsItem"/>
            </modify-argument>
        </modify-function>

        <modify-function signature="setLayout(QGraphicsLayout*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <define-ownership class="java" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QStyledItemDelegate">
        <modify-function signature="initStyleOption(QStyleOptionViewItem*,QModelIndex)const">
            <modify-argument index="1">
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOptionViewItem *%out = qtjambi_cast&lt;QStyleOptionViewItem *>(%env, %in);
                </conversion-rule>
                <replace-type modified-type="io.qt.widgets.QStyleOptionViewItem" />
            </modify-argument>
        </modify-function>
    </object-type>

    <object-type name="QListWidget">
        <modify-function signature="addItem(const QString &amp;)" remove="all" />
        <modify-function signature="addItems(const QStringList &amp;)" remove="all" />
        <modify-function signature="insertItem(int, const QString &amp;)" remove="all" />
        <modify-function signature="insertItems(int, const QStringList &amp;)" remove="all" />
        <inject-code>
            <import-file name="typesystem/java/typesystem_widgets-java.java" quote-after-line="class QListWidget___" quote-before-line="}// class" />
        </inject-code>
    </object-type>

    <interface-type name="QPictureFormatInterface" java-name="QPictureFormat">
        <modify-function signature="loadPicture(const QString &amp;,const QString &amp;,QPicture*)">
            <modify-argument index="3" invalidate-after-use="true">
                <no-null-pointer/>
                <replace-type modified-type="io.qt.gui.QPicture" />
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QPicture *%out = qtjambi_cast&lt;QPicture *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </interface-type>
    <object-type name="QPictureFormatPlugin">
        <modify-function signature="loadPicture(const QString &amp;,const QString &amp;,QPicture*)">
            <modify-argument index="3" invalidate-after-use="true">
                <no-null-pointer/>
                <replace-type modified-type="io.qt.gui.QPicture" />
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QPicture *%out = qtjambi_cast&lt;QPicture *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QTouchEvent">
      <modify-function signature="QTouchEvent(QEvent::Type,QTouchEvent::DeviceType,QFlags&lt;Qt::KeyboardModifier&gt;,QFlags&lt;Qt::TouchPointState&gt;,const QList&lt;QTouchEvent::TouchPoint&gt; &amp;)">
      <modify-argument index="5">
          <replace-default-expression with="new java.util.Vector&lt;QTouchEvent_TouchPoint&gt;()"/>
      </modify-argument>
      </modify-function>
    </object-type>
    <object-type name="QComboBox">
        <modify-function signature="findData(const QVariant&amp;,int,QFlags&lt;Qt::MatchFlag&gt;)const">
            <modify-argument index="3">
                <replace-default-expression with="io.qt.core.Qt.MatchFlag.MatchExactly, io.qt.core.Qt.MatchFlag.MatchCaseSensitive"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="findText(const QString&amp;,QFlags&lt;Qt::MatchFlag&gt;)const">
            <modify-argument index="2">
                <replace-default-expression with="io.qt.core.Qt.MatchFlag.MatchExactly, io.qt.core.Qt.MatchFlag.MatchCaseSensitive"/>
            </modify-argument>
    </modify-function>
    </object-type>
    
    <object-type name="QGraphicsEffect">
        <modify-function signature="sourcePixmap(Qt::CoordinateSystem, QPoint *, QGraphicsEffect::PixmapPadMode) const">
            <modify-argument index="2" invalidate-after-use="true">
                <replace-type modified-type="io.qt.core.QPoint" />
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QPoint *%out = qtjambi_cast&lt;QPoint *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QGraphicsRotation">
        <modify-function signature="applyTo(QMatrix4x4 *)const">
            <modify-argument index="1" invalidate-after-use="true">
                <replace-type modified-type="io.qt.gui.QMatrix4x4" />
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QMatrix4x4 *%out = qtjambi_cast&lt;QMatrix4x4 *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QGraphicsTransform">
        <modify-function signature="applyTo(QMatrix4x4 *)const">
            <modify-argument index="1" invalidate-after-use="true">
                <replace-type modified-type="io.qt.gui.QMatrix4x4" />
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QMatrix4x4 *%out = qtjambi_cast&lt;QMatrix4x4 *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QGraphicsScale">
        <modify-function signature="applyTo(QMatrix4x4 *)const">
            <modify-argument index="1" invalidate-after-use="true">
                <replace-type modified-type="io.qt.gui.QMatrix4x4" />
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QMatrix4x4 *%out = qtjambi_cast&lt;QMatrix4x4 *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QProxyStyle">
        <modify-function signature="standardPixmap(QStyle::StandardPixmap, const QStyleOption *, const QWidget *) const">
            <modify-argument index="2">
                <replace-type modified-type="io.qt.widgets.QStyleOption"/>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
                <conversion-rule class="native">
                    QStyleOption *%out = qtjambi_cast&lt;QStyleOption *>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    
    <object-type name="QAbstractScrollArea">
        <extra-includes>
        <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
    </object-type>
    
    <object-type name="QAbstractButton">
        <extra-includes>
        <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
    </object-type>
    
    <object-type name="QAbstractButton">
        <extra-includes>
        <include file-name="io.qt.gui.*" location="java"/>
        </extra-includes>
    </object-type>
    
    <value-type name="QStyleOptionViewItem">
        <modify-field name="widget">
            <reference-count action="set" variable-name="__rcWidget" />
        </modify-field>
    </value-type>

    <suppress-warning text="WARNING(JavaGenerator) :: Either add or remove specified for reference count variable '__rcItems' in 'QGraphicsGridLayout' but not both." />
</typesystem>
