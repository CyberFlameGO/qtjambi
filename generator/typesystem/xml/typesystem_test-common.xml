<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtTest" description="Classes for unit testing Qt applications and libraries.">
    <required-library name="QtDBus" mode="optional"/>
    <required-library name="QtWidgets"/>
    <rejection class="QTest" function-name="compare_ptr_helper" /><!-- not public API -->
    <rejection class="QTestData" />
    <rejection class="QSignalSpy" function-name="initArgs" /><!-- not public API -->
    <rejection class="QSignalSpy" function-name="qt_metacall" /><!-- not public API -->

    <enum-type name="QTest::ComparisonOperation" since="6.4"/>
    <enum-type name="QTest::AttributeIndex"/>
    <enum-type name="QTest::KeyAction"/>
    <enum-type name="QTest::LogElementType"/>
    <enum-type name="QTest::MouseAction"/>
    <enum-type name="QTest::QBenchmarkMetric"/>
    <enum-type name="QTest::SkipMode"/>
    <enum-type name="QTest::TestFailMode"/>

    <namespace-type name="QTest">
        <extra-includes>
            <include file-name="QTest" location="global"/>
            <include file-name="qtjambi/qtjambi_jobjectwrapper.h" location="global"/>
            <include file-name="qtjambi/qtjambi_application.h" location="global"/>
            <include file-name="qtjambi/qtjambi_repository.h" location="global"/>
            <include file-name="qtjambi_test_util.h" location="local"/>
        </extra-includes>

        <modify-function signature="qRun()" no-except="yes" block-exceptions="yes"/>
        <modify-function signature="qExec(QObject *, QStringList)" no-except="yes" block-exceptions="yes"/>
        <modify-function signature="touchEvent(QWindow *, QTouchDevice *, bool)" remove="all" until="5.*"/>
        <modify-function signature="touchEvent(QWidget *, QTouchDevice *, bool)" remove="all" until="5.*"/>
        <modify-function signature="touchEvent(QWindow *, QPointingDevice *, bool)" remove="all" since="6.0.0"/>
        <modify-function signature="touchEvent(QWidget *, QPointingDevice *, bool)" remove="all" since="6.0.0"/>
        <modify-function signature="formatString(const char *, const char *, size_t)" remove="all"/><!-- not public API -->
        <modify-function signature="compare_helper(bool,const char *,const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="compare_string_helper(const char *,const char *,const char *,const char *,const char *,int)" remove="all" /><!-- not public API -->
        <modify-function signature="toHexRepresentation(const char*,int)" remove="all" until="6.3.*"/><!-- FIXME: arg1 (const char *) -->
        <modify-function signature="toHexRepresentation(const char*,qsizetype)" remove="all" since="6.4.0"/><!-- FIXME: arg1 (const char *) -->
        <modify-function signature="toString(const char*)" remove="all" /><!-- FIXME: arg1 (const char *) -->
        <modify-function signature="toString(const void*)" remove="all" /><!-- probably not useful to QtJambi, other overload exist -->
        <modify-function signature="toString(const QObject*)" remove="all" since="6.2.0"/><!-- probably not useful to QtJambi, other overload exist -->
        <modify-function signature="toString(QSizePolicy)" remove="all" />
        <modify-function signature="toString(QGeoAreaMonitorInfo)" remove="all" since="6.2.0"/>
        <modify-function signature="toString(QGeoPositionInfo)" remove="all" since="6.2.0"/>
        <modify-function signature="toString(QGeoSatelliteInfo)" remove="all" since="6.2.0"/>
        <modify-function signature="toString(QSizePolicy::ControlType)" remove="all" />
        <modify-function signature="toString(QSizePolicy::Policy)" remove="all" />
        <modify-function signature="toString(QNetworkReply::NetworkError)" remove="all" />
        <modify-function signature="toString(QFlags&lt;QSizePolicy::ControlType>)" remove="all" />
        <modify-function signature="toString(QList&lt;QNetworkCookie>)" remove="all" />
        <modify-function signature="toString(QNetworkCookie)" remove="all" />
        <modify-function signature="toString(std::nullptr_t)" remove="all" />
        <modify-function signature="toString&lt;T1,T2>(const QPair&lt;T1, T2> &amp;)" remove="all"/>
        <modify-function signature="toPrettyCString(const char *, int)" remove="all" until="6.3.*"/><!-- probably not useful to QtJambi, other overload exist -->
        <modify-function signature="toPrettyCString(const char *, qsizetype)" remove="all" since="6.4.0"/><!-- probably not useful to QtJambi, other overload exist -->
        <modify-function signature="toPrettyUnicode(QStringView)" remove="all" /><!-- probably not useful to QtJambi, other overload exist -->
        <modify-function signature="qFindTestData(const char*, const char*, int, const char*)" remove="all" until="5.*"/>
        <modify-function signature="qFindTestData(const char*, const char*, int, const char*, const char*)" remove="all" since="6.0.0"/>
        <modify-function signature="qCompare(QStringView, QLatin1StringView, const char *, const char *, const char *, int)" remove="all" since="6.4.0"/>
        <modify-function signature="qCompare(QStringView, QLatin1String, const char *, const char *, const char *, int)" remove="all" until="6.3"/>
        <modify-function signature="qCompare(QString, QLatin1StringView, const char *, const char *, const char *, int)" remove="all" since="6.4.0"/>
        <modify-function signature="qCompare(QString, QLatin1String, const char *, const char *, const char *, int)" remove="all" until="6.3"/>
        <modify-function signature="qCompare(QString, QString, const char *, const char *, const char *, int)" remove="all"/>
        <modify-function signature="qCompare(QLatin1StringView, QStringView, const char *, const char *, const char *, int)" remove="all" since="6.4.0"/>
        <modify-function signature="qCompare(QLatin1String, QStringView, const char *, const char *, const char *, int)" remove="all" until="6.3"/>
        <modify-function signature="qCompare(QLatin1StringView, QString, const char *, const char *, const char *, int)" remove="all" since="6.4"/>
        <modify-function signature="qCompare(QLatin1String, QString, const char *, const char *, const char *, int)" remove="all" until="6.3"/>
        <modify-function signature="qCompare(char *, char *, const char *, const char *, const char *, int)" remove="all"/>
        <modify-function signature="qCompare(const char *, char *, const char *, const char *, const char *, int)" remove="all"/>
        <modify-function signature="qCompare(char *, const char *, const char *, const char *, const char *, int)" remove="all"/>
        <modify-function signature="qCompare(const char *, const char *, const char *, const char *, const char *, int)" remove="all"/>
        <modify-function signature="qCompare(qfloat16, qfloat16, const char *, const char *, const char *, int)" remove="all"/>
        <modify-function signature="qCompare(unsigned, unsigned, const char *, const char *, const char *, int)" remove="all"/>
        <modify-function signature="qCompare&lt;T,N>(const QList&lt;T> &amp;, std::initializer_list&lt;T>, const char *, const char *, const char *, int)" remove="all" since="6.0.0"/>
    </namespace-type>

    <object-type name="QTest::QBenchmarkIterationController">
    </object-type>
    <enum-type name="QTest::QBenchmarkIterationController::RunMode">
    </enum-type>
    <object-type name="QTest::QTouchEventSequence">
        <extra-includes>
        <include file-name="qtjambi_test_util.h" location="local"/>
        </extra-includes>
    </object-type>
    <object-type name="QTest::QTouchEventWidgetSequence" since="6.0.0">
        <extra-includes>
        <include file-name="qtjambi_test_util.h" location="local"/>
        </extra-includes>
    </object-type>

    <!--value-type name="QTestEventList"/-->

    <object-type name="QSignalSpy">
        <delegate-base-class base-class="QList&lt;QList&lt;QVariant>>" delegate="list"/>
        <extra-includes>
        <include file-name="qtjambi_test_util.h" location="local"/>
        </extra-includes>
        <modify-function signature="list()" access="private" />
        <modify-function signature="wait(int)" rename="waitForTimeout" /><!-- not public API -->
        <modify-function signature="QSignalSpy(const QObject *, const char *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QTestEventLoop">
    </object-type>
    <enum-type name="QAbstractItemModelTester::FailureReportingMode"/>
    <object-type name="QAbstractItemModelTester">
    </object-type>
    <object-type name="QSpontaneKeyEvent">
        <modify-field name="d" read="no" write="no"/>
        <modify-field name="t" read="no" write="no"/>
        <modify-function signature="setSpontaneous(QEvent*)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QTestEvent">
        <modify-function signature="clone()const">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QTestKeyEvent">
        <modify-function signature="clone()const">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
        </modify-function>
        <modify-field name="_action" rename="action"/>
        <modify-field name="_delay" rename="delay"/>
        <modify-field name="_delay" rename="delay"/>
        <modify-field name="_modifiers" rename="modifiers"/>
        <modify-field name="_ascii" rename="ascii"/>
        <modify-field name="_key" rename="key"/>
    </object-type>
    <object-type name="QTestKeyClicksEvent">
        <modify-function signature="clone()const">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QTestMouseEvent">
        <modify-function signature="clone()const">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QTestDelayEvent">
        <modify-function signature="clone()const">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QTestEventList">
        <inject-code class="native">
namespace QtJambiPrivate{
    template&lt;>
    struct supports_stream_operators&lt;QTestEventList> : std::false_type{};
}
        </inject-code>
        <modify-function signature="clear()" rename="purge" />
    </value-type>
	<global-function signature="qt_handleTouchEventv2(QWindow*, const QPointingDevice*, const QList&lt;QEventPoint>&amp;, Qt::KeyboardModifiers)" target-type="QTest">
	</global-function>
	<global-function signature="qt_handleKeyEvent(QWindow*, QEvent::Type, int, Qt::KeyboardModifiers, QString, bool, ushort)" target-type="QTest">
	</global-function>
	<global-function signature="qt_handleMouseEvent(QWindow*, QPointF, QPointF, Qt::MouseButtons, Qt::MouseButton, QEvent::Type, Qt::KeyboardModifiers, int)" target-type="QTest">
	</global-function>
	<global-function signature="qt_sendShortcutOverrideEvent(QObject*, ulong, int, Qt::KeyboardModifiers, QString, bool, ushort)" target-type="QTest">
	</global-function>
	<functional-type name="QTest::Supplier" using="qxp::function_ref&lt;const char*()>" generate="no" since="6.4"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: signature 'qWaitForWindowShown(QWidget*)' for function modification in 'QTest' not found. Possible candidates:"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: signature 'qWarn(const char*)' for function modification in 'QTest' not found. Possible candidates: qWarn(const char*,const char*,int) in QTest"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::newRow', unmatched return type '*QTestData*'"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::addColumn', unmatched parameter type '*'"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::toString*', unmatched parameter type '*'"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::qTest', unmatched parameter type '*'"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: signature 'compare_helper(bool,const char*,const char*,int)' for function modification in 'QTest' not found. Possible candidates: compare_helper(bool,const char*,char*,char*,const char*,const char*,const char*,int) in QTest"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::compare_ptr_helper', unmatched parameter type 'void const volatile*'"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::addRow', unmatched return type '*QTestData*'"/>
	<suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QTest::qCompare*', unmatched parameter type '*'"/>
	<suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QTestEventList."/>
</typesystem>

