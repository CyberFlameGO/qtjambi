<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtHttpServer" description="">
    <rejection class="QHttpServer::AfterRequestHandler"/>
    <rejection class="QHttpServerAfterRequestViewTraits"/>
    <rejection class="QHttpServerRouterViewTraits"/>
    <rejection class="QHttpServerRouter" function-name="bind_front"/>
    <object-type name="QAbstractHttpServer">
		<modify-function signature="sslSetup(QSslConfiguration)" pp-condition="QT_CONFIG(ssl)"/>
		<modify-function signature="sslSetup(QSslCertificate,QSslKey,QSsl::SslProtocol)" pp-condition="QT_CONFIG(ssl)"/>
		<modify-function signature="newWebSocketConnection()" pp-condition="defined(QT_WEBSOCKETS_LIB)"/>
		<modify-function signature="hasPendingWebSocketConnections() const" pp-condition="defined(QT_WEBSOCKETS_LIB)"/>
		<modify-function signature="nextPendingWebSocketConnection()" pp-condition="defined(QT_WEBSOCKETS_LIB)"/>
    </object-type>
    <object-type name="QHttpServer">
    </object-type>
    <object-type name="QHttpServerResponder">
    </object-type>
    <enum-type name="QHttpServerResponder::StatusCode">
    </enum-type>
    <object-type name="QHttpServerRequest">
    </object-type>
    <enum-type name="QHttpServerRequest::Method" flags="QHttpServerRequest::Methods">
		<reject-enum-value name="GET" />
		<reject-enum-value name="PUT" />
		<reject-enum-value name="DELETE" />
		<reject-enum-value name="POST" />
		<reject-enum-value name="HEAD" />
		<reject-enum-value name="OPTIONS" />
		<reject-enum-value name="PATCH" />
		<reject-enum-value name="CONNECT" />
    </enum-type>
    <value-type name="QHttpServerResponder::HeaderList" generate="no">
    </value-type>
    <!--typealias-type name="QHttpServerResponse::StatusCode">
    </typealias-type-->
    <object-type name="QHttpServerResponse">
		<modify-function signature="QHttpServerResponse(const char*,QHttpServerResponder::StatusCode)" remove="all"/>
    </object-type>
    <object-type name="QHttpServerRouter">
		<modify-function signature="addConverter(QAnyStringView)" remove="all"/>
		<modify-function signature="addRule(std::unique_ptr&lt;QHttpServerRouterRule>)" remove="all"/>
    </object-type>
    <object-type name="QHttpServerRouterRule">
        <extra-includes>
            <include file-name="QtCore/QRegularExpressionMatch" location="global"/>
            <include file-name="QtNetwork/QTcpSocket" location="global"/>
        </extra-includes>
    </object-type>
    <functional-type name="QHttpServerRouterRule::RouterHandler">
        <extra-includes>
            <include file-name="QtCore/QRegularExpressionMatch" location="global"/>
            <include file-name="QtNetwork/QTcpSocket" location="global"/>
        </extra-includes>
    </functional-type>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function '*', unmatched *type 'ViewTraits::BindableType'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function '*', unmatched *type 'QHttpServer::AfterRequestHandler'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: Type parser doesn't recognize the type std::function&lt;QHttpServerResponse(QHttpServerResponse&amp;&amp;,const QHttpServerRequest&amp;)> (is_busted)" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unsupported default value 'qMakePair(1u, 1u)' of argument in function 'writeStatusLine', class 'QHttpServerResponder'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: Cannot find enum constant for value 'StatusCode::Ok' in '*' or any of its super classes" />
</typesystem>

