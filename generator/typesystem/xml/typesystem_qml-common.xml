<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2009-2022 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtQml" description="Classes for QML and JavaScript languages.">
    <rejection class="QQmlTriviallyDestructibleDebuggingEnabler"/>
    <rejection class="QJSEngine::FunctionWithArgSignature"/>
    <rejection class="QJSEngine::FunctionSignature"/>
    <rejection class="" function-name="qmlCreateCustomParser"/>
    <rejection class="" function-name="qjsvalue_cast_helper"/>
    <rejection class="QJSEngine" function-name="fromScriptValue"/>
    <rejection class="QJSEngine" function-name="toScriptValue"/>
    <rejection class="QJSEngine" function-name="registerCustomType"/>
    <rejection class="QJSEngine" function-name="scriptValueFromQMetaObject"/>
    <rejection class="QJSEngine" function-name="newFunction"/>
    <!-- objectById is marked as internal API and would expose memory pointer in QtJambi API -->
    <rejection class="QQmlInfo" function-name="operator&lt;&lt;"/>
    <rejection class="QJSEngine" function-name="objectById"/>
    <rejection class="" function-name="qjsvalue_cast"/>
    <rejection class="QJSValueList"/>
    <rejection class="QJSValue::QJSValueList"/>
    <rejection class="QQmlTypeInfo"/>
    <rejection class="QQmlListProperty"/>
    <rejection class="QtQml" function-name="qmlInfo"/>
    <rejection class="QQmlV4Function"/>
    <rejection class="QV4::CompiledData::CompilationUnit"/>
    <rejection class="QV4::CompiledData"/>
    <rejection class="QV4"/>
    <rejection class="QQmlModuleRegistration"/>
    <rejection class="" enum-name="QQmlModuleImportSpecialVersions"/>
    <rejection class="QmlTypeAndRevisionsRegistration"/>
    <rejection class="QV4::ExecutionEngine"/>
    <rejection class="QQmlComponentAttached"/>

    <enum-type name="QJSEngine::ObjectOwnership" since="6.0.0"/>
    <enum-type name="QJSManagedValue::Type" since="6.1.0"/>
    <enum-type name="QJSPrimitiveValue::Type" since="6.1.0"/>
    <enum-type name="QJSValue::ObjectConversionBehavior" since="6.1.0"/>
    <enum-type name="QJSEngine::Extension" flags="QJSEngine::Extensions"/>
    <enum-type name="QQmlIncubator::IncubationMode"/>
    <enum-type name="QQmlIncubator::Status"/>
    <enum-type name="QQmlProperty::Type"/>
    <enum-type name="QQmlProperty::PropertyTypeCategory"/>
    <enum-type name="QJSValue::SpecialValue"/>
    <enum-type name="QJSValue::ErrorType"/>
    <enum-type name="QQmlComponent::CompilationMode"/>
    <enum-type name="QQmlComponent::Status"/>
    <enum-type name="QQmlEngine::ObjectOwnership"/>
    <enum-type name="QQmlAbstractUrlInterceptor::DataType"/>
    <interface-type name="QQmlAbstractUrlInterceptor"/>
    <enum-type name="QQmlDebuggingEnabler::StartMode"/>
    <object-type name="QQmlDebuggingEnabler">
        <modify-function signature="QQmlDebuggingEnabler(bool)" remove="all"/>
    </object-type>
    <enum-type name="QQmlFile::Status"/>
    <object-type name="QQmlFile">
        <modify-function signature="data() const" remove="all"/>
        <modify-function signature="connectDownloadProgress(QObject *, const char *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    J2CStringBuffer %out(%env, jstring(%in));
                </conversion-rule>
                <conversion-rule class="shell">
                    %out = jobject(qtjambi_from_qstring(%env, QLatin1String(%in)));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="connectDownloadProgress(QObject *, const char *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    J2CStringBuffer %out(%env, jstring(%in));
                </conversion-rule>
                <conversion-rule class="shell">
                    %out = jobject(qtjambi_from_qstring(%env, QLatin1String(%in)));
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="connectFinished(QObject *, const char *)">
            <modify-argument index="2">
                <replace-type modified-type="java.lang.String"/>
                <conversion-rule class="native">
                    J2CStringBuffer %out(%env, jstring(%in));
                </conversion-rule>
                <conversion-rule class="shell">
                    %out = jobject(qtjambi_from_qstring(%env, QLatin1String(%in)));
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QQmlContext::PropertyPair"/>
    <object-type name="QQmlContext">
        <modify-function signature="nameForObject(QObject*) const" until="5.*">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="nameForObject(const QObject*) const" since="6.0.0">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setContextObject(QObject*)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setContextProperty(QString,QObject*)">
            <modify-argument index="2">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
  <value-type name="QQmlScriptString">
    <modify-function signature="operator= ( const QQmlScriptString &amp; )" remove="all"/>
  </value-type>
    <object-type name="QJSManagedValue" since="6.1.0">
    </object-type>
    <value-type name="QJSPrimitiveValue" since="6.1.0">
        <modify-function signature="QJSPrimitiveValue(QJSPrimitiveNull)" remove="all"/>
        <modify-function signature="QJSPrimitiveValue(const QMetaType, const void *)" remove="all" since="6.4.0"/>
        <modify-function signature="QJSPrimitiveValue(QJSPrimitiveUndefined)" remove="all"/>
        <modify-function signature="operator+()" rename="unaryPlus" since="6.2.0"/>
        <modify-function signature="operator++()" rename="inc" since="6.2.0">
            <modify-argument index="return" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator-()" rename="unaryMinus" since="6.2.0"/>
        <modify-function signature="operator--()" rename="dec" since="6.2.0">
            <modify-argument index="return" replace-value="this"/>
        </modify-function>
        <modify-function signature="operator%(QJSPrimitiveValue)" rename="mod"/>
        <modify-function signature="operator/(QJSPrimitiveValue)" rename="div"/>
        <modify-function signature="operator*(QJSPrimitiveValue)" rename="times"/>
        <modify-function signature="operator+(QJSPrimitiveValue)" rename="plus"/>
        <modify-function signature="operator-(QJSPrimitiveValue)" rename="minus"/>
        <modify-function signature="operator--(int)" remove="all" since="6.2.0"/>
        <modify-function signature="operator++(int)" remove="all" since="6.2.0"/>
        <modify-function signature="operate&lt;Operators>(QJSPrimitiveValue,QJSPrimitiveValue)" remove="all"/>
        <modify-function signature="operateOnIntegers&lt;Operators,Lhs,Rhs>(QJSPrimitiveValue,QJSPrimitiveValue)" remove="all"/>
    </value-type>
    <value-type name="QJSPrimitiveNull" generate="no" since="6.1.0">
    </value-type>
    <value-type name="QJSPrimitiveUndefined" generate="no" since="6.1.0">
    </value-type>
    <object-type name="QJSNumberCoercion" since="6.1.0">
    </object-type>
    <value-type name="QJSValue">
        <modify-function signature="QJSValue(uint)" remove="all"/>
        <modify-function signature="QJSValue(const QLatin1String &amp;)" remove="all"/>
        <modify-function signature="QJSValue(const char * )" remove="all"/>
        <modify-function signature="operator= ( const QJSValue &amp; )" remove="all"/>
        <modify-function signature="toUInt() const" remove="all"/>
        <modify-function signature="toBool () const" rename="toBoolean"/>
        <modify-function signature="isBool () const" rename="isBoolean"/>
        <modify-function signature="isVariant () const" remove="all"/>
        <modify-function signature="toNumber () const" rename="toDouble"/>
        <modify-function signature="toVariant () const" rename="toObject"/>
    </value-type>
    <value-type name="QQmlInfo">
        <custom-constructor>
        if(copy){
            return new(placement) QQmlInfo(*copy);
        }else{
            return new(placement) QQmlInfo(qmlDebug(nullptr));
        }
        </custom-constructor>
        <custom-constructor type="default">
            new(placement) QQmlInfo(qmlDebug(nullptr));
        </custom-constructor>
    </value-type>
    <value-type name="QQmlError">
        <modify-function signature="operator=(const QQmlError &amp;)" remove="all"/>
        <modify-function signature="setObject(QObject*)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </value-type>
    <object-type name="QJSValueIterator">
        <modify-function signature="operator= ( QJSValue &amp; )" remove="all"/>
    </object-type>
    <namespace-type name="QtQml">
        <extra-includes>
            <include file-name="qqmllistproperty.h" location="local"/>
            <include file-name="qtjambi_qml.h" location="local"/>
        </extra-includes>
        <modify-function signature="qmlAttachedPropertiesObject(int *, const QObject *, const QMetaObject *, bool)" remove="all" until="5.*"/>
    </namespace-type>
    <functional-type name="QtQml::QQmlAttachedPropertiesFunc">
        <extra-includes>
            <include file-name="qqmllistproperty.h" location="local"/>
        </extra-includes>
    </functional-type>
    <functional-type name="QtQml::ValueCallback">
        <extra-includes>
            <include file-name="QtQml/QQmlEngine" location="global"/>
            <include file-name="QtQml/QJSEngine" location="global"/>
            <include file-name="qqmllistproperty.h" location="local"/>
        </extra-includes>
    </functional-type>
    <functional-type name="QtQml::ObjectCallback">
        <extra-includes>
            <include file-name="QtQml/QQmlEngine" location="global"/>
            <include file-name="QtQml/QJSEngine" location="global"/>
            <include file-name="qqmllistproperty.h" location="local"/>
        </extra-includes>
    </functional-type>
    <object-type name="QJSEngine">
        <modify-function signature="newQMetaObject&lt;T>()" remove="all"/>
        <modify-function signature="setObjectOwnership(QObject*,QJSEngine::ObjectOwnership)" since="6.0.0">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code class="java" position="end">
                <argument-map index="1" meta-name="%1"/>
                <argument-map index="2" meta-name="%2"/>
                if (%1 != null &amp;&amp; %2 != null){
                    switch(%2){
                    case CppOwnership: 
                        if(%1.parent()==null){
                            QtJambi_LibraryUtilities.internal.setJavaOwnership(%1);
                        }
                    default:
                        QtJambi_LibraryUtilities.internal.setCppOwnership(%1);
                    }
                }
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QQmlEngine">
        <extra-includes>
            <include file-name="qqmllistproperty.h" location="local"/>
        </extra-includes>
        <modify-function signature="addImageProvider(QString,QQmlImageProviderBase*)">
            <modify-argument index="2">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setIncubationController(QQmlIncubationController*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcIncubationController"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setNetworkAccessManagerFactory(QQmlNetworkAccessManagerFactory*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcNetworkAccessManagerFactory"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setContextForObject(QObject*,QQmlContext*)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
            <modify-argument index="2">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setObjectOwnership(QObject*,QQmlEngine::ObjectOwnership)" until="5.*">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
            <inject-code class="java" position="end">
                <argument-map index="1" meta-name="%1"/>
                <argument-map index="2" meta-name="%2"/>
                if (%1 != null &amp;&amp; %2 != null){
                    switch(%2){
                    case CppOwnership: 
                        if(%1.parent()==null){
                            QtJambi_LibraryUtilities.internal.setJavaOwnership(%1);
                        }
                    default:
                        QtJambi_LibraryUtilities.internal.setCppOwnership(%1);
                    }
                }
            </inject-code>
        </modify-function>
    </object-type>
    <object-type name="QQmlApplicationEngine">
        <modify-function signature="rootObjects()" remove="all" since="5.9.0" until="5.*"/>
    </object-type>
    <object-type name="QQmlExtensionPlugin">
    </object-type>
    <object-type name="QQmlEngineExtensionPlugin" since="5.15.0">
    </object-type>
    <object-type name="QQmlComponent">
        <modify-function signature="setInitialProperties(QObject*,QMap&lt;QString,QVariant>)">
            <modify-argument index="1">
                <reference-count action="ignore" />
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QQmlExpression">
    </object-type>
    <enum-type name="QQmlImageProviderBase::Flag" flags="QQmlImageProviderBase::Flags"/>
    <enum-type name="QQmlImageProviderBase::ImageType"/>
    <interface-type name="QQmlImageProviderBase" until="5.*">
    </interface-type>
    <object-type name="QQmlImageProviderBase" since="6.0.0">
    </object-type>
    <interface-type name="QQmlIncubationController">
        <modify-function signature="operator=(const QQmlIncubationController &amp;)" remove="all"/>
    </interface-type>
    <object-type name="QQmlIncubator">
        <modify-function signature="operator=(const QQmlIncubator &amp;)" remove="all"/>
        <modify-function signature="setInitialState(QObject*)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <!--interface-type name="QQmlAbstractUrlInterceptor">
    </interface-type-->
    <value-type name="QQmlListReference">
        <modify-function signature="operator=(const QQmlListReference &amp;)" remove="all"/>
    </value-type>

    <interface-type name="QQmlNetworkAccessManagerFactory">
        <modify-function signature="create(QObject *)">
            <modify-argument index="0">
                <define-ownership class="shell" owner="cplusplus"/>
                <define-ownership class="native" owner="java"/>
            </modify-argument>
        </modify-function>
    </interface-type>

    <interface-type name="QQmlParserStatus"/>

    <interface-type name="QQmlTypesExtensionInterface"/>
    <interface-type name="QQmlExtensionInterface"/>
    <interface-type name="QQmlEngineExtensionInterface" since="5.15.0"/>

    <value-type name="QQmlProperty">
        <modify-function signature="operator=(const QQmlProperty &amp;)" remove="all"/>
    </value-type>

    <object-type name="QQmlPropertyMap">
    <modify-function signature="operator[](const QString &amp;) const" remove="all"/>
        <modify-function signature="operator[](const QString &amp;)" remove="all"/><!-- duplicate with non-const version -->
    </object-type>

    <object-type name="QQmlFileSelector">
        <modify-function signature="setExtraSelectors(QStringList &amp;)" remove="all" until="5.*"/>
        <modify-function signature="setSelector(QFileSelector*)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcSelector" />
            </modify-argument>
        </modify-function>
    </object-type>
    
    <!--<object-type name="QQmlAbstractUrlInterceptor">
    </object-type>-->

    <interface-type name="QQmlPropertyValueSource"/>
	<global-function signature="qmlRegisterCustomExtendedType&lt;T,E>(const char*, int, int, const char*, QQmlCustomParser*)" remove="all"/>
	<global-function signature="qmlRegisterCustomType&lt;T>(const char*, int, int, const char*, QQmlCustomParser*)" remove="all"/>
	<global-function signature="qmlRegisterSingletonInstance&lt;T>(const char*, int, int, const char*, T*)" remove="all"/>
	<global-function signature="qjsEngine(const QObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlAttachedPropertiesFunction(QObject*, const QMetaObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlAttachedPropertiesObject(QObject*, QQmlAttachedPropertiesFunc, bool)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlClearTypeRegistrations()" target-type="QtQml">
	</global-function>
	<global-function signature="qmlContext(const QObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlWarning(const QObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlWarning(const QObject*, const QList&lt;QQmlError>&amp;)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlWarning(const QObject*, const QQmlError&amp;)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlDebug(const QObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlDebug(const QObject*, const QList&lt;QQmlError>&amp;)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlDebug(const QObject*, const QQmlError&amp;)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlEngine(const QObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlExecuteDeferred(QObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlExtendedObject(QObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlInfo(const QObject*)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlInfo(const QObject*, const QList&lt;QQmlError>&amp;)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlInfo(const QObject*, const QQmlError&amp;)" target-type="QtQml">
	</global-function>
	<global-function signature="qmlProtectModule(const char*, int)" target-type="QtQml">
		<modify-argument index="1">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterModule(const char*, int, int)" target-type="QtQml">
		<modify-argument index="1">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterModuleImport(const char*, int, const char*, int, int)" target-type="QtQml">
		<modify-argument index="1">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="3">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterNamespaceAndRevisions(const QMetaObject*, const char*, int)" target-type="QtQml">
		<modify-argument index="2">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterNamespaceAndRevisions(const QMetaObject*, const char*, int, QList&lt;int>*, const QMetaObject*)" target-type="QtQml">
		<modify-argument index="2">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterNamespaceAndRevisions(const QMetaObject*, const char*, int, QList&lt;int>*, const QMetaObject*, const QMetaObject*)" target-type="QtQml">
		<modify-argument index="2">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterSingletonType(QUrl, const char*, int, int, const char*)" target-type="QtQml">
		<modify-argument index="2">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="5">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterType(QUrl, const char*, int, int, const char*)" target-type="QtQml">
		<modify-argument index="2">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="5">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterTypeNotAvailable(const char*, int, int, const char*, QString)" target-type="QtQml">
		<modify-argument index="1">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="4">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterUncreatableMetaObject(const QMetaObject&amp;, const char*, int, int, const char*, QString)" target-type="QtQml">
		<modify-argument index="2">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="5">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlTypeId(const char*, int, int, const char*)" target-type="QtQml">
		<modify-argument index="1">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="4">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlUnregisterModuleImport(const char*, int, const char*, int, int)" target-type="QtQml">
		<modify-argument index="1">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="3">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
	</global-function>
	<global-function signature="qmlAttachedPropertiesObject&lt;T>(const QObject*, bool)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlAttachedPropertiesObject">
			<argument type="QObject"/>
			<add-argument index="1" type="java.lang.Class&lt;? extends io.qt.core.QObject>" name="type"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterAnonymousSequentialContainer&lt;Container>(const char*, int)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterAnonymousSequentialContainer">
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="io.qt.core.QMetaType" name="containerType"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterAnonymousType&lt;T>(const char*, int)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterAnonymousType">
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
		</instantiation>
		<instantiation proxy-call="qtjambi_qmlRegisterAnonymousType" since="6.3.0">
			<argument type="QString"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
			<add-argument index="2" type="int" name="metaObjectRevisionMinor"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterType&lt;T>()" target-type="QtQml" until="5.15.*">
		<instantiation proxy-call="qtjambi_qmlRegisterType">
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;? extends io.qt.core.QObject>" name="type"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterExtendedType&lt;T,E>()" target-type="QtQml" until="5.15.*">
		<instantiation proxy-call="qtjambi_qmlRegisterExtendedType">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;? extends io.qt.core.QObject>" name="type"/>
			<add-argument index="2" type="java.lang.Class&lt;? extends io.qt.core.QObject>" name="extendedType"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterAnonymousTypesAndRevisions&lt;T>(const char*, int)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterAnonymousTypesAndRevisions">
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterInterface&lt;T>(const char*, int)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterInterface">
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;? extends io.qt.QtObjectInterface>" name="type"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterInterface&lt;T>(const char*)" target-type="QtQml" until="5.15.*">
		<instantiation proxy-call="qtjambi_qmlRegisterInterface">
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;? extends io.qt.QtObjectInterface>" name="type"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterRevision&lt;T,metaObjectRevision>(const char*, int, int)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterRevision">
			<argument type="QObject"/>
			<argument type="int"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
			<add-argument index="2" type="int" name="metaObjectRevision"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterExtendedType&lt;T,E>(const char*, int)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterExtendedType">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
			<add-argument index="2" type="java.lang.Class&lt;?>" name="extendedType"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterExtendedType&lt;T,E>(const char*, int, int, const char*)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterExtendedType">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="4">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
			<add-argument index="2" type="java.lang.Class&lt;?>" name="extendedType"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterExtendedUncreatableType&lt;T,E>(const char*, int, int, const char*, QString)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterExtendedUncreatableType">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="4">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
			<add-argument index="2" type="java.lang.Class&lt;?>" name="extendedType"/>
		</instantiation>
		<instantiation proxy-call="qtjambi_qmlRegisterExtendedUncreatableType">
			<argument type="QObject"/>
			<argument type="QString"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="4">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
			<add-argument index="2" type="java.lang.Class&lt;?>" name="extendedType"/>
			<add-argument index="3" type="int" name="metaObjectRevision"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterSingletonType&lt;T>(const char*, int, int, const char*, QObject*)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterSingletonType">
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="4">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="5">
				<replace-type modified-type="io.qt.qml.QtQml$ObjectCallback"/>
				<conversion-rule class="native">
					QtQml::ObjectCallback %out = qtjambi_cast&lt;QtQml::ObjectCallback>(%env, %in);
				</conversion-rule>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;? extends io.qt.core.QObject>" name="type"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterSingletonType(const char*, int, int, const char*, QJSValue)" target-type="QtQml" proxy-call="qtjambi_qmlRegisterSingletonType">
		<modify-argument index="1">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="4">
			<replace-type modified-type="java.lang.String"/>
		</modify-argument>
		<modify-argument index="5">
			<replace-type modified-type="io.qt.qml.QtQml$ValueCallback"/>
			<conversion-rule class="native">
				QtQml::ValueCallback %out = qtjambi_cast&lt;QtQml::ValueCallback>(%env, %in);
			</conversion-rule>
		</modify-argument>
	</global-function>
	<global-function signature="qmlRegisterType&lt;T>(const char*, int, int, const char*)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterType">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="4">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
		</instantiation>
		<instantiation proxy-call="qtjambi_qmlRegisterType">
			<argument type="QString"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="4">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
			<add-argument index="2" type="int" name="metaObjectRevision"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterUncreatableType&lt;T>(const char*, int, int, const char*, QString)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterUncreatableType">
			<argument type="QString"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="4">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
		</instantiation>
		<instantiation proxy-call="qtjambi_qmlRegisterUncreatableType">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<modify-argument index="4">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument index="1" type="java.lang.Class&lt;?>" name="type"/>
			<add-argument index="2" type="int" name="metaObjectRevision"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterTypesAndRevisions&lt;T,Args...>(const char*, int)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterTypesAndRevisions">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument type="java.lang.Class&lt;?>..." name="types"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterTypesAndRevisions&lt;T,Args...>(const char*, int, QList&lt;int> *)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterTypesAndRevisions">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument type="java.lang.Class&lt;?>..." name="types"/>
		</instantiation>
	</global-function>
	<global-function signature="qmlRegisterTypesAndRevisions&lt;Args...>(const char*, int, QList&lt;int> *)" target-type="QtQml">
		<instantiation proxy-call="qtjambi_qmlRegisterTypesAndRevisions">
			<argument type="QObject"/>
			<argument type="QObject"/>
			<modify-argument index="1">
				<replace-type modified-type="java.lang.String"/>
			</modify-argument>
			<add-argument type="java.lang.Class&lt;?>..." name="types"/>
		</instantiation>
	</global-function>

    <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QHelpContentItem::QHelpContentItem', unmatched parameter type 'QHelpDBReader*'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: private virtual function 'changeEvent(QEvent * event)' in 'QHelpSearchQueryWidget'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: private virtual function 'focusInEvent(QFocusEvent * focusEvent)' in 'QHelpSearchQueryWidget'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: private virtual function 'changeEvent(QEvent * event)' in 'QHelpSearchResultWidget'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unhandled enum value: QSysInfo::BigEndian in QAudioFormat::Endian" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unmatched enum QSysInfo::BigEndian" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unhandled enum value: QSysInfo::LittleEndian in QAudioFormat::Endian" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: unmatched enum QSysInfo::LittleEndian" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QQmlPropertyMap::QQmlPropertyMap', unmatched parameter type 'DerivedType*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QMetaObject*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QMetaMethod*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QMetaProperty*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QQmlComponentAttached*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QQmlV8*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QV8*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QQmlCompiledData*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QQmlAbstractUrlInterceptor*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *unmatched *type '*QQmlContextData*'" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QJSValue::QJSValue', unmatched parameter type 'QScriptPassPointer&lt;QJSValuePrivate>'" />
    <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *, unmatched * type 'QQmlV4Function*'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *, unmatched * type 'QV4::*'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping *, unmatched * type 'QQmlInfo'"/>
    <suppress-warning text="WARNING(MetaJavaBuilder) :: unknown operator 'T::QmlForeignType'"/>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: enum 'QQmlModuleImportSpecialVersions' does not have a type entry or is not an enum" />
  <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QJSValue." />
  <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type QQmlContext::PropertyPair." />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: Type parser doesn't recognize the type std::function&lt;QObject *(QQmlEngine *, QJSEngine *)> (is_busted)" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: Type parser doesn't recognize the type QObject *(*)(QQmlEngine *, QJSEngine *) (is_busted)" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: Type parser doesn't recognize the type QJSValue (*)(QQmlEngine *, QJSEngine *) (is_busted)" />
</typesystem>
