<?xml version="1.0"?>
<typesystem package="io.qt.serialbus" module="qtjambi.serialbus" default-superclass="io.qt.QtObject">
    <object-type name="QCanBus">
        <extra-includes>
            <include file-name="qtjambi_serialbus.h" location="local"/>
        </extra-includes>
        <modify-function signature="createDevice(const QString &amp;, const QString &amp;, QString *) const" throws="QCanBusException">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
            <modify-argument index="3">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                <argument-map index="0" meta-name="%0"/>
                <argument-map index="3" meta-name="%3"/>
                if(!%0 &amp;&amp; !%3.isEmpty()){
                    Java::QtSerialBus::QCanBusException::throwNew(%env, %3 QTJAMBI_STACKTRACEINFO );
                }
            </inject-code>
            <inject-code class="shell" position="beginning">
                QTJAMBI_TRY{
            </inject-code>
            <inject-code class="shell" position="end">
                <argument-map index="3" meta-name="%3"/>
                }QTJAMBI_CATCH(const JavaException&amp; exn){
                    if(Java::QtSerialBus::QCanBusException::isInstanceOf(%env, exn.object())){
                        if(%3){
                            jstring message = Java::QtSerialBus::QCanBusException::getMessage(%env, exn.object());
                            qtjambi_to_qstring(*%3, %env, message);
                        }
                    }else{
                        exn.raise();
                    }
                }QTJAMBI_TRY_END
            </inject-code>
        </modify-function>
        <modify-function signature="availableDevices(const QString &amp;, QString *) const" throws="QCanBusException">
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                <argument-map index="2" meta-name="%2"/>
                if(!%2.isEmpty()){
                    Java::QtSerialBus::QCanBusException::throwNew(%env, %2 QTJAMBI_STACKTRACEINFO );
                }
            </inject-code>
            <inject-code class="shell" position="beginning">
                QTJAMBI_TRY{
            </inject-code>
            <inject-code class="shell" position="end">
                <argument-map index="2" meta-name="%2"/>
                }QTJAMBI_CATCH(const JavaException&amp; exn){
                    if(Java::QtSerialBus::QCanBusException::isInstanceOf(%env, exn.object())){
                        if(%2){
                            jstring message = Java::QtSerialBus::QCanBusException::getMessage(%env, exn.object());
                            qtjambi_to_qstring(*%2, %env, message);
                        }
                    }else{
                        exn.raise();
                    }
                }QTJAMBI_TRY_END
            </inject-code>
        </modify-function>
    </object-type>
    <interface-type name="QCanBusFactory">
        <extra-includes>
            <include file-name="qtjambi_serialbus.h" location="local"/>
        </extra-includes>
        <modify-function signature="createDevice(const QString &amp;, QString *) const" throws="QCanBusException">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                <argument-map index="0" meta-name="%0"/>
                <argument-map index="2" meta-name="%2"/>
                if(!%0 &amp;&amp; !%2.isEmpty()){
                    Java::QtSerialBus::QCanBusException::throwNew(%env, %2 QTJAMBI_STACKTRACEINFO );
                }
            </inject-code>
            <inject-code class="shell" position="beginning">
                QTJAMBI_TRY{
            </inject-code>
            <inject-code class="shell" position="end">
                <argument-map index="2" meta-name="%2"/>
                }QTJAMBI_CATCH(const JavaException&amp; exn){
                    if(Java::QtSerialBus::QCanBusException::isInstanceOf(%env, exn.object())){
                        if(%2){
                            jstring message = Java::QtSerialBus::QCanBusException::getMessage(%env, exn.object());
                            qtjambi_to_qstring(*%2, %env, message);
                        }
                    }else{
                        exn.raise();
                    }
                }QTJAMBI_TRY_END
            </inject-code>
        </modify-function>
        <modify-function signature="availableDevices(QString *) const" throws="QCanBusException" since="6.2.0">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                <argument-map index="1" meta-name="%1"/>
                if(!%1.isEmpty()){
                    Java::QtSerialBus::QCanBusException::throwNew(%env, %1 QTJAMBI_STACKTRACEINFO );
                }
            </inject-code>
            <inject-code class="shell" position="beginning">
                QTJAMBI_TRY{
            </inject-code>
            <inject-code class="shell" position="end">
                <argument-map index="1" meta-name="%1"/>
                }QTJAMBI_CATCH(const JavaException&amp; exn){
                    if(Java::QtSerialBus::QCanBusException::isInstanceOf(%env, exn.object())){
                        if(%1){
                            jstring message = Java::QtSerialBus::QCanBusException::getMessage(%env, exn.object());
                            qtjambi_to_qstring(*%1, %env, message);
                        }
                    }else{
                        exn.raise();
                    }
                }QTJAMBI_TRY_END
            </inject-code>
        </modify-function>
    </interface-type>
    <interface-type name="QCanBusFactoryV2">
        <extra-includes>
            <include file-name="qtjambi_serialbus.h" location="local"/>
        </extra-includes>
        <modify-function signature="createDevice(const QString &amp;, QString *) const" throws="QCanBusException">
            <modify-argument index="return">
                <define-ownership class="native" owner="java" />
                <define-ownership class="shell" owner="cpp" />
            </modify-argument>
            <modify-argument index="2">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                <argument-map index="0" meta-name="%0"/>
                <argument-map index="2" meta-name="%2"/>
                if(!%0 &amp;&amp; !%2.isEmpty()){
                    Java::QtSerialBus::QCanBusException::throwNew(%env, %2 QTJAMBI_STACKTRACEINFO );
                }
            </inject-code>
            <inject-code class="shell" position="beginning">
                QTJAMBI_TRY{
            </inject-code>
            <inject-code class="shell" position="end">
                <argument-map index="2" meta-name="%2"/>
                }QTJAMBI_CATCH(const JavaException&amp; exn){
                    if(Java::QtSerialBus::QCanBusException::isInstanceOf(%env, exn.object())){
                        if(%2){
                            jstring message = Java::QtSerialBus::QCanBusException::getMessage(%env, exn.object());
                            qtjambi_to_qstring(*%2, %env, message);
                        }
                    }else{
                        exn.raise();
                    }
                }QTJAMBI_TRY_END
            </inject-code>
        </modify-function>
        <modify-function signature="availableDevices(QString *) const" throws="QCanBusException">
            <modify-argument index="1">
                <remove-argument/>
                <conversion-rule class="native">
                    QString %in;
                    QString* %out = &amp;%in;
                </conversion-rule>
            </modify-argument>
            <inject-code class="native" position="end">
                <argument-map index="1" meta-name="%1"/>
                if(!%1.isEmpty()){
                    Java::QtSerialBus::QCanBusException::throwNew(%env, %1 QTJAMBI_STACKTRACEINFO );
                }
            </inject-code>
            <inject-code class="shell" position="beginning">
                QTJAMBI_TRY{
            </inject-code>
            <inject-code class="shell" position="end">
                <argument-map index="1" meta-name="%1"/>
                }QTJAMBI_CATCH(const JavaException&amp; exn){
                    if(Java::QtSerialBus::QCanBusException::isInstanceOf(%env, exn.object())){
                        if(%1){
                            jstring message = Java::QtSerialBus::QCanBusException::getMessage(%env, exn.object());
                            qtjambi_to_qstring(*%1, %env, message);
                        }
                    }else{
                        exn.raise();
                    }
                }QTJAMBI_TRY_END
            </inject-code>
        </modify-function>
    </interface-type>
    <object-type name="QModbusServer">
        <modify-function signature="data(QModbusDataUnit *) const">
            <modify-argument index="1" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.serialbus.QModbusDataUnit"/>
                <conversion-rule class="native">
                    QModbusDataUnit* %out = qtjambi_cast&lt;QModbusDataUnit*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="readData(QModbusDataUnit *) const">
            <modify-argument index="1" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.serialbus.QModbusDataUnit"/>
                <conversion-rule class="native">
                    QModbusDataUnit* %out = qtjambi_cast&lt;QModbusDataUnit*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="data(QModbusDataUnit::RegisterType,unsigned short,unsigned short*)const">
            <modify-argument index="3">
                <array-type min-length="1"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QModbusClient">
        <modify-function signature="processPrivateResponse(const QModbusResponse &amp;, QModbusDataUnit *)">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.serialbus.QModbusDataUnit"/>
                <conversion-rule class="native">
                    QModbusDataUnit* %out = qtjambi_cast&lt;QModbusDataUnit*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="processResponse(const QModbusResponse &amp;, QModbusDataUnit *)">
            <modify-argument index="2" invalidate-after-use="yes">
                <replace-type modified-type="io.qt.serialbus.QModbusDataUnit"/>
                <conversion-rule class="native">
                    QModbusDataUnit* %out = qtjambi_cast&lt;QModbusDataUnit*>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_cast&lt;jobject>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QCanBusDevice">
        <modify-function signature="clear(QFlags&lt;QCanBusDevice::Direction>)">
            <modify-argument index="1">
                <replace-default-expression with="io.qt.serialbus.QCanBusDevice.Direction.AllDirections"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QModbusTcpServer">
        <modify-function signature="installConnectionObserver(QModbusTcpConnectionObserver *)">
            <modify-argument index="1">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <value-type name="QModbusPdu">
            <inject-code>
                @io.qt.QtUninvokable
                public void encodeData(Number...data) {
                    io.qt.core.QByteArray byteArray = new io.qt.core.QByteArray();
                    io.qt.core.QDataStream stream = new io.qt.core.QDataStream(byteArray, io.qt.core.QIODevice.OpenModeFlag.WriteOnly);
                    for (Number s : data) {
                        if(s instanceof Byte) {
                            stream.writeByte((Byte)s);
                        }else if(s instanceof Short){
                            stream.writeShort((Short)s);
                        }else {
                            throw new IllegalArgumentException("Only byte and short supported.");
                        }
                    }
                    setData(byteArray);
                }
                
                @io.qt.QtUninvokable
                public void encodeData(short...data) {
                    io.qt.core.QByteArray byteArray = new io.qt.core.QByteArray();
                    io.qt.core.QDataStream stream = new io.qt.core.QDataStream(byteArray, io.qt.core.QIODevice.OpenModeFlag.WriteOnly);
                    for (short s : data) {
                        stream.writeShort(s);
                    }
                    setData(byteArray);
                }
                
                @io.qt.QtUninvokable
                public void encodeData(byte...data) {
                    io.qt.core.QByteArray byteArray = new io.qt.core.QByteArray();
                    io.qt.core.QDataStream stream = new io.qt.core.QDataStream(byteArray, io.qt.core.QIODevice.OpenModeFlag.WriteOnly);
                    for (byte s : data) {
                        stream.writeByte(s);
                    }
                    setData(byteArray);
                }
                
                @io.qt.QtUninvokable
                public void decodeData(byte[] data) {
                    io.qt.core.QDataStream stream = new io.qt.core.QDataStream(data(), io.qt.core.QIODevice.OpenModeFlag.ReadOnly);
                    for (int i = 0; i &lt; data.length; ++i) {
                        data[i] = stream.readByte();
                    }
                }
                
                @io.qt.QtUninvokable
                public void decodeData(short[] data) {
                    io.qt.core.QDataStream stream = new io.qt.core.QDataStream(data(), io.qt.core.QIODevice.OpenModeFlag.ReadOnly);
                    for (int i = 0; i &lt; data.length; ++i) {
                        data[i] = stream.readShort();
                    }
                }
    
                @io.qt.QtUninvokable
                public void decodeData(Number[][] data) {
                    io.qt.core.QDataStream stream = new io.qt.core.QDataStream(data(), io.qt.core.QIODevice.OpenModeFlag.ReadOnly);
                    for (int i = 0; i &lt; data.length; ++i) {
                        if(data[i] instanceof Byte[]) {
                            ((Byte[])data[i])[0] = stream.readByte();
                        }else if(data[i] instanceof Short[]) {
                            ((Short[])data[i])[0] = stream.readShort();
                        }else {
                            throw new IllegalArgumentException("Only byte and short supported.");
                        }
                    }
                }
            </inject-code>
    </value-type>
    <value-type name="QModbusRequest">
        <modify-function signature="registerDataSizeCalculator(QModbusPdu::FunctionCode, QModbusRequest::CalcFuncPtr)">
            <modify-argument index="2">
                <replace-type modified-type="io.qt.serialbus.QModbusRequestCalculatorFunction"/>
                <conversion-rule class="native">
                    QModbusRequest::CalcFuncPtr %out = qtjambi_cast&lt;QModbusRequest::CalcFuncPtr>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>
    <value-type name="QModbusResponse">
        <modify-function signature="registerDataSizeCalculator(QModbusPdu::FunctionCode, QModbusResponse::CalcFuncPtr)">
            <modify-argument index="2">
                <replace-type modified-type="io.qt.serialbus.QModbusResponseCalculatorFunction"/>
                <conversion-rule class="native">
                    QModbusResponse::CalcFuncPtr %out = qtjambi_cast&lt;QModbusResponse::CalcFuncPtr>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </value-type>
    <object-type name="QModbusTcpServer">
        <modify-function signature="modbusClientDisconnected(QTcpSocket *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.network.QTcpSocket"/>
                <conversion-rule class="native">
                    QTcpSocket* %out = qtjambi_to_object&lt;QTcpSocket>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    %out = qtjambi_from_object(%env, reinterpret_cast&lt;void*>(%in), "io/qt/network/QTcpSocket", false, false);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <interface-type name="QModbusTcpConnectionObserver">
        <modify-function signature="acceptNewConnection(QTcpSocket *)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.network.QTcpSocket"/>
                <conversion-rule class="native">
                    QTcpSocket* %out = qtjambi_to_object&lt;QTcpSocket>(%env, %in);
                </conversion-rule>
                <conversion-rule class="shell">
                    jobject %out = qtjambi_from_object(%env, reinterpret_cast&lt;void*>(%in), "io/qt/network/QTcpSocket", false, false);
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </interface-type>
  <suppress-warning text="WARNING(MetaJavaBuilder) :: Class function '*::CalcFuncPtr' is specified in typesystem, but not declared" />
  <suppress-warning text="WARNING(MetaJavaBuilder) :: skipping function 'QModbusPdu::encode', unmatched parameter type '*'" />
</typesystem>
