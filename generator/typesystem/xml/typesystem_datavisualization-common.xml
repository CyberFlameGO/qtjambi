<?xml version="1.0"?>
<!--****************************************************************************
**
** Copyright (C) 2019 Dr. Peter Droste, Omix Visualization GmbH & Co. KG. All rights reserved.
**
** This file is part of Qt Jambi.
**
** ** $BEGIN_LICENSE$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and Nokia.
**
** GNU Lesser General Public License Usage
** This file may be used under the terms of the GNU Lesser
** General Public License version 2.1 as published by the Free Software
** Foundation and appearing in the file LICENSE.LGPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU Lesser General Public License version 2.1 requirements
** will be met: http://www.gnu.org/licenses/old-licenses/lgpl-2.1.html.
**
** In addition, as a special exception, Nokia gives you certain
** additional rights. These rights are described in the Nokia Qt LGPL
** Exception version 1.0, included in the file LGPL_EXCEPTION.txt in this
** package.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3.0 as published by the Free Software
** Foundation and appearing in the file LICENSE.GPL included in the
** packaging of this file.  Please review the following information to
** ensure the GNU General Public License version 3.0 requirements will be
** met: http://www.gnu.org/copyleft/gpl.html.
**
** If you are unsure which license is appropriate for your use, please
** contact the sales department at qt-sales@nokia.com.
** $END_LICENSE$

**
** This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
** WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.
**
****************************************************************************-->
<typesystem qt-library="QtDataVisualization" description="UI Components for creating stunning 3D data visualizations.">
    <rejection class="*" function-name="dptr"/>
    <rejection class="*" function-name="dptrc"/>
    <rejection class="*" field-name="d_ptr"/>
    <namespace-prefix prefix="QtDataVisualization" namespace="QtDataVisualization" naming-policy="cut" until="5.*"/>
    <namespace-prefix prefix="QtDataVisualization" namespace="" since="6.0.0"/>
    <namespace-type name="QtDataVisualization">
        <extra-includes>
            <include file-name="QtDataVisualization/qutils.h" location="global"/>
        </extra-includes>
    </namespace-type>
	<global-function signature="qDefaultSurfaceFormat(bool)" target-type="QtDataVisualization" since="6.0">
	</global-function>
    <object-type name="QtDataVisualization::QAbstract3DAxisPrivate" generate="no"/>
    <object-type name="QtDataVisualization::QAbstractDataProxyPrivate" generate="no"/>
    <object-type name="QtDataVisualization::QAbstract3DSeriesPrivate" generate="no"/>
    <object-type name="QtDataVisualization::QAbstract3DGraphPrivate" generate="no"/>
    <object-type name="QtDataVisualization::Q3DBars">
        <modify-function signature="Q3DBars(const QSurfaceFormat*,QWindow*)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.gui.QSurfaceFormat"/>
                <conversion-rule class="native">
                const QSurfaceFormat* %out = qtjambi_cast&lt;const QSurfaceFormat*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setColumnAxis(QtDataVisualization::QCategory3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setRowAxis(QtDataVisualization::QCategory3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setValueAxis(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addAxis(QtDataVisualization::QAbstract3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="releaseAxis(QtDataVisualization::QAbstract3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setPrimarySeries(QtDataVisualization::QBar3DSeries *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addSeries(QtDataVisualization::QBar3DSeries *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="removeSeries(QtDataVisualization::QBar3DSeries *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insertSeries(int, QtDataVisualization::QBar3DSeries *)" thread-affine="yes">
            <modify-argument index="2" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <enum-type name="QtDataVisualization::Q3DCamera::CameraPreset"/>
    <object-type name="QtDataVisualization::Q3DCamera">
    </object-type>
    <object-type name="QtDataVisualization::Q3DInputHandler">
       <modify-function signature="mouseMoveEvent(QMouseEvent *,QPoint)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="mousePressEvent(QMouseEvent *,QPoint)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="mouseReleaseEvent(QMouseEvent *,QPoint)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="wheelEvent(QWheelEvent *)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
     </object-type>
    <object-type name="QtDataVisualization::Q3DLight">
    </object-type>
    <object-type name="QtDataVisualization::Q3DObject">
    </object-type>
    <object-type name="QtDataVisualization::Q3DScatter">
        <modify-function signature="Q3DScatter(const QSurfaceFormat*,QWindow*)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.gui.QSurfaceFormat"/>
                <conversion-rule class="native">
                const QSurfaceFormat* %out = qtjambi_cast&lt;const QSurfaceFormat*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAxisX(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAxisY(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAxisZ(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addAxis(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addSeries(QtDataVisualization::QScatter3DSeries *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="releaseAxis(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="removeSeries(QtDataVisualization::QScatter3DSeries *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::Q3DScene">
        <modify-function signature="setActiveCamera(QtDataVisualization::Q3DCamera *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setActiveLight(QtDataVisualization::Q3DLight *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::Q3DSurface">
        <modify-function signature="Q3DSurface(const QSurfaceFormat*,QWindow*)">
            <modify-argument index="1">
                <replace-type modified-type="io.qt.gui.QSurfaceFormat"/>
                <conversion-rule class="native">
                const QSurfaceFormat* %out = qtjambi_cast&lt;const QSurfaceFormat*>(%env, %in);
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="addAxis(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addSeries(QtDataVisualization::QSurface3DSeries *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="removeSeries(QtDataVisualization::QSurface3DSeries *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAxisX(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAxisY(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setAxisZ(QtDataVisualization::QValue3DAxis *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <enum-type name="QtDataVisualization::Q3DTheme::ColorStyle"/>
    <enum-type name="QtDataVisualization::Q3DTheme::Theme"/>
    <object-type name="QtDataVisualization::Q3DTheme">
    </object-type>
    <enum-type name="QtDataVisualization::QAbstract3DAxis::AxisOrientation"/>
    <enum-type name="QtDataVisualization::QAbstract3DAxis::AxisType"/>
    <object-type name="QtDataVisualization::QAbstract3DAxis">
        <modify-function signature="QAbstract3DAxis(QtDataVisualization::QAbstract3DAxisPrivate *, QObject *)" remove="all"/>
        <modify-function signature="setLabels(QStringList)" access="non-final"/>
        <modify-function signature="labels()const" access="non-final"/>
    </object-type>
    <enum-type name="QtDataVisualization::QAbstract3DGraph::ElementType"/>
    <enum-type name="QtDataVisualization::QAbstract3DGraph::ShadowQuality"/>
    <enum-type name="QtDataVisualization::QAbstract3DGraph::OptimizationHint" flags="QtDataVisualization::QAbstract3DGraph::OptimizationHints"/>
    <enum-type name="QtDataVisualization::QAbstract3DGraph::SelectionFlag" flags="QtDataVisualization::QAbstract3DGraph::SelectionFlags"/>
    <object-type name="QtDataVisualization::QAbstract3DGraph">
        <modify-function signature="QAbstract3DGraph(QtDataVisualization::QAbstract3DGraphPrivate *,const QSurfaceFormat *, QWindow *)" remove="all"/>
        <delegate-base-class base-class="QOpenGLFunctions" delegate="functions"/>
        <modify-function signature="addCustomItem(QtDataVisualization::QCustom3DItem *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addInputHandler(QtDataVisualization::QAbstract3DInputHandler *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addTheme(QtDataVisualization::Q3DTheme *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="releaseCustomItem(QtDataVisualization::QCustom3DItem *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="releaseInputHandler(QtDataVisualization::QAbstract3DInputHandler *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="releaseTheme(QtDataVisualization::Q3DTheme *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="removeCustomItem(QtDataVisualization::QCustom3DItem *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setActiveInputHandler(QtDataVisualization::QAbstract3DInputHandler *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setActiveTheme(QtDataVisualization::Q3DTheme *)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="ignore"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <enum-type name="QtDataVisualization::QAbstract3DInputHandler::InputView"/>
    <object-type name="QtDataVisualization::QAbstract3DInputHandler">
       <modify-function signature="mouseMoveEvent(QMouseEvent *,QPoint)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="mousePressEvent(QMouseEvent *,QPoint)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="mouseReleaseEvent(QMouseEvent *,QPoint)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="mouseDoubleClickEvent(QMouseEvent *)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="touchEvent(QTouchEvent *)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="wheelEvent(QWheelEvent *)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
       <modify-function signature="setScene(QtDataVisualization::Q3DScene *)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcScene"/>
            </modify-argument>
       </modify-function>
    </object-type>
    <enum-type name="QtDataVisualization::QAbstract3DSeries::Mesh"/>
    <enum-type name="QtDataVisualization::QAbstract3DSeries::SeriesType"/>
    <object-type name="QtDataVisualization::QAbstract3DSeries">
        <modify-function signature="QAbstract3DSeries(QtDataVisualization::QAbstract3DSeriesPrivate *, QObject *)" remove="all"/>
    </object-type>
    <enum-type name="QtDataVisualization::QAbstractDataProxy::DataType"/>
    <object-type name="QtDataVisualization::QAbstractDataProxy">
        <modify-function signature="QAbstractDataProxy(QtDataVisualization::QAbstractDataProxyPrivate *, QObject *)" remove="all"/>
    </object-type>
    <object-type name="QtDataVisualization::QBar3DSeries">
    </object-type>
    <value-type name="QtDataVisualization::QBarDataItem">
        <modify-function signature="operator=(QtDataVisualization::QBarDataItem)" remove="all"/>
    </value-type>
    <object-type name="QtDataVisualization::QBarDataProxy">
        <modify-function signature="addRow(QtDataVisualization::QBarDataRow*)">
            <modify-argument index="1">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="addRow(QtDataVisualization::QBarDataRow*,QString)">
            <modify-argument index="1">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insertRow(int,QtDataVisualization::QBarDataRow*)">
            <modify-argument index="2">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insertRow(int,QtDataVisualization::QBarDataRow*,QString)">
            <modify-argument index="2">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setRow(int,QtDataVisualization::QBarDataRow*)">
            <modify-argument index="2">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setRow(int,QtDataVisualization::QBarDataRow*,QString)">
            <modify-argument index="2">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="array()const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.datavis.QBarDataArray"/>
                <conversion-rule class="native">
                %out = %in ? qtjambi_cast&lt;jobject>(%env, *%in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="itemAt(int,int)const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.datavis.QBarDataItem"/>
                <conversion-rule class="native">
                %out = %in ? qtjambi_cast&lt;jobject>(%env, *%in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="itemAt(QPoint)const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.datavis.QBarDataItem"/>
                <conversion-rule class="native">
                %out = %in ? qtjambi_cast&lt;jobject>(%env, *%in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QBarDataRow">
        <extra-includes>
            <include file-name="qtjambi_datavis3d_hashes.h" location="local"/>
        </extra-includes>
    </object-type>
    <value-type name="QtDataVisualization::QBarDataArray">
        <extra-includes>
            <include file-name="qtjambi_datavis3d_hashes.h" location="local"/>
        </extra-includes>
    </value-type>
    <object-type name="QtDataVisualization::QCategory3DAxis">
    </object-type>
    <object-type name="QtDataVisualization::QCustom3DItem">
    </object-type>
    <object-type name="QtDataVisualization::QCustom3DLabel">
    </object-type>
    <object-type name="QtDataVisualization::QCustom3DVolume">
        <modify-function signature="setSubTextureData(Qt::Axis,int,const unsigned char*)">
            <modify-argument index="3">
                <array-type as-buffer="yes"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QHeightMapSurfaceDataProxy">
    </object-type>
    <enum-type name="QtDataVisualization::QItemModelBarDataProxy::MultiMatchBehavior"/>
    <object-type name="QtDataVisualization::QItemModelBarDataProxy">
        <modify-function signature="setItemModel(QAbstractItemModel*)" thread-affine="yes">
            <modify-argument index="1" thread-affine="yes">
                <reference-count action="set" variable-name="__rcItemModel"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QItemModelScatterDataProxy">
       <modify-function signature="setItemModel(QAbstractItemModel *)" thread-affine="yes">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcItemModel"/>
            </modify-argument>
       </modify-function>
    </object-type>
    <enum-type name="QtDataVisualization::QItemModelSurfaceDataProxy::MultiMatchBehavior"/>
    <object-type name="QtDataVisualization::QItemModelSurfaceDataProxy">
       <modify-function signature="setItemModel(QAbstractItemModel *)" thread-affine="yes">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcItemModel"/>
            </modify-argument>
       </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QLogValue3DAxisFormatter">
        <modify-function signature="createNewInstance()const">
            <modify-argument index="return">
                <define-ownership owner="java" class="native"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QScatter3DSeries">
    </object-type>
    <value-type name="QtDataVisualization::QScatterDataItem">
        <modify-function signature="operator=(QtDataVisualization::QScatterDataItem)" remove="all"/>
    </value-type>
    <object-type name="QtDataVisualization::QScatterDataProxy">
        <modify-function signature="array()const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.datavis.QScatterDataArray"/>
                <conversion-rule class="native">
                %out = %in ? qtjambi_cast&lt;jobject>(%env, *%in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="itemAt(int)const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.datavis.QScatterDataItem"/>
                <conversion-rule class="native">
                %out = %in ? qtjambi_cast&lt;jobject>(%env, *%in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QScatterDataRow">
        <extra-includes>
            <include file-name="qtjambi_datavis3d_hashes.h" location="local"/>
        </extra-includes>
    </object-type>
    <value-type name="QtDataVisualization::QScatterDataArray">
        <extra-includes>
            <include file-name="qtjambi_datavis3d_hashes.h" location="local"/>
        </extra-includes>
    </value-type>
    <enum-type name="QtDataVisualization::QSurface3DSeries::DrawFlag" flags="QtDataVisualization::QSurface3DSeries::DrawFlags"/>
    <object-type name="QtDataVisualization::QSurface3DSeries">
    </object-type>
    <value-type name="QtDataVisualization::QSurfaceDataItem">
        <modify-function signature="operator=(QtDataVisualization::QSurfaceDataItem)" remove="all"/>
    </value-type>
    <object-type name="QtDataVisualization::QSurfaceDataProxy">
        <modify-function signature="addRow(QtDataVisualization::QSurfaceDataRow*)">
            <modify-argument index="1">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="insertRow(int,QtDataVisualization::QSurfaceDataRow*)">
            <modify-argument index="2">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="setRow(int,QtDataVisualization::QSurfaceDataRow*)">
            <modify-argument index="2">
                <define-ownership class="native" owner="cplusplus"/>
            </modify-argument>
        </modify-function>
        <modify-function signature="array()const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.datavis.QSurfaceDataArray"/>
                <conversion-rule class="native">
                %out = %in ? qtjambi_cast&lt;jobject>(%env, *%in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="itemAt(int,int)const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.datavis.QSurfaceDataItem"/>
                <conversion-rule class="native">
                %out = %in ? qtjambi_cast&lt;jobject>(%env, *%in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
        <modify-function signature="itemAt(QPoint)const">
            <modify-argument index="0">
                <replace-type modified-type="io.qt.datavis.QSurfaceDataItem"/>
                <conversion-rule class="native">
                %out = %in ? qtjambi_cast&lt;jobject>(%env, *%in) : nullptr;
                </conversion-rule>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QSurfaceDataRow">
        <extra-includes>
            <include file-name="qtjambi_datavis3d_hashes.h" location="local"/>
        </extra-includes>
    </object-type>
    <value-type name="QtDataVisualization::QSurfaceDataArray"/>
    <object-type name="QtDataVisualization::QTouch3DInputHandler">
       <modify-function signature="touchEvent(QTouchEvent *)">
            <modify-argument index="1" invalidate-after-use="yes" />
       </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QValue3DAxis">
        <modify-function signature="setFormatter(QtDataVisualization::QValue3DAxisFormatter *)">
            <modify-argument index="1">
                <reference-count action="set" variable-name="__rcFormatter"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <object-type name="QtDataVisualization::QValue3DAxisFormatter">
        <modify-function signature="createNewInstance()const">
            <modify-argument index="return">
                <define-ownership owner="java" class="native"/>
            </modify-argument>
        </modify-function>
    </object-type>
    <suppress-warning text="WARNING(JavaGenerator) :: No ==/!= operator found for value type *Q*DataArray." />
</typesystem>
